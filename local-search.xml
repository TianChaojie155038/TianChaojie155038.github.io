<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>卷积神经网络为什么认不出我写的数字？</title>
    <link href="/2024/01/31/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AE%A4%E4%B8%8D%E5%87%BA%E6%88%91%E5%86%99%E7%9A%84%E6%95%B0%E5%AD%97%EF%BC%9F/"/>
    <url>/2024/01/31/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AE%A4%E4%B8%8D%E5%87%BA%E6%88%91%E5%86%99%E7%9A%84%E6%95%B0%E5%AD%97%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="卷积神经网络为什么认不出我写的数字？"><a href="#卷积神经网络为什么认不出我写的数字？" class="headerlink" title="卷积神经网络为什么认不出我写的数字？"></a>卷积神经网络为什么认不出我写的数字？</h2><p><img src="%E5%86%85%E5%AE%B9%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.png" alt="内容思维导图"></p><h4 id="在MNIST上训练"><a href="#在MNIST上训练" class="headerlink" title="在MNIST上训练"></a>在MNIST上训练</h4><p>MNIST是一个经典的手写体数字数据集，包含了7万个手写数字，这些数字是从0到9的任何整数。我们将用这个数据集训练我们的视觉模型。其中的部分数据如下：<img src="../AppData/Roaming/Typora/typora-user-images/image-20240129230242386.png" alt="image-20240129230242386" style="zoom:150%;" /></p><p>生活中的手写数字往往是偏白色背景，黑色字体的，所以我们根据源数据，将图片的颜色翻转，得到下面的数据集（部分数据）：<img src="../AppData/Roaming/Typora/typora-user-images/image-20240129230806529.png" alt="image-20240129230806529" style="zoom:130%;" /></p><p>我们再把这两个数据集结合起来，作为最终的手写体数据集（14万个手写数字）来训练我们的模型。其中80%的数字用于训练，另外20%的数字用于验证（不参与训练）。</p><p>我们的模型的结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python">inputs = keras.Input(shape=(<span class="hljs-number">28</span>, <span class="hljs-number">28</span>, <span class="hljs-number">3</span>))<br>layer1 = layers.Conv2D(filters=<span class="hljs-number">8</span>, kernel_size=<span class="hljs-number">3</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>)(inputs)<br>layer2 = layers.MaxPooling2D(pool_size=<span class="hljs-number">2</span>)(layer1)<br>layer3 = layers.Conv2D(filters=<span class="hljs-number">16</span>, kernel_size=<span class="hljs-number">3</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>)(layer2)<br>layer4 = layers.MaxPooling2D(pool_size=<span class="hljs-number">2</span>)(layer3)<br>layer5 = layers.Conv2D(filters=<span class="hljs-number">32</span>, kernel_size=<span class="hljs-number">3</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>)(layer4)<br>layer6 = layers.Flatten()(layer5)<br>layer7 = layers.Dense(<span class="hljs-number">128</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>)(layer6)<br>outputs = layers.Dense(<span class="hljs-number">10</span>, activation=<span class="hljs-string">&#x27;softmax&#x27;</span>)(layer6)<br>model = keras.Model(inputs=inputs, outputs=outputs, name=<span class="hljs-string">&#x27;CNN&#x27;</span>)<br><br>Model: <span class="hljs-string">&quot;CNN&quot;</span><br>_________________________________________________________________<br> Layer (<span class="hljs-built_in">type</span>)                Output Shape              Param <span class="hljs-comment">#   </span><br>=================================================================<br> input_1 (InputLayer)        [(<span class="hljs-literal">None</span>, <span class="hljs-number">28</span>, <span class="hljs-number">28</span>, <span class="hljs-number">3</span>)]       <span class="hljs-number">0</span>         <br>                                                                 <br> conv2d (Conv2D)             (<span class="hljs-literal">None</span>, <span class="hljs-number">26</span>, <span class="hljs-number">26</span>, <span class="hljs-number">8</span>)         <span class="hljs-number">224</span>       <br>                                                                 <br> max_pooling2d (MaxPooling2D  (<span class="hljs-literal">None</span>, <span class="hljs-number">13</span>, <span class="hljs-number">13</span>, <span class="hljs-number">8</span>)        <span class="hljs-number">0</span>         <br> )                                                               <br>                                                                 <br> conv2d_1 (Conv2D)           (<span class="hljs-literal">None</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">16</span>)        <span class="hljs-number">1168</span>      <br>                                                                 <br> max_pooling2d_1 (MaxPooling  (<span class="hljs-literal">None</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">16</span>)         <span class="hljs-number">0</span>         <br> 2D)                                                             <br>                                                                 <br> conv2d_2 (Conv2D)           (<span class="hljs-literal">None</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>)          <span class="hljs-number">4640</span>      <br>                                                                 <br> flatten (Flatten)           (<span class="hljs-literal">None</span>, <span class="hljs-number">288</span>)               <span class="hljs-number">0</span>         <br>                                                                 <br> dense_1 (Dense)             (<span class="hljs-literal">None</span>, <span class="hljs-number">10</span>)                <span class="hljs-number">2890</span>      <br>                                                                 <br>=================================================================<br>Total params: <span class="hljs-number">8</span>,<span class="hljs-number">922</span><br>Trainable params: <span class="hljs-number">8</span>,<span class="hljs-number">922</span><br>Non-trainable params: <span class="hljs-number">0</span><br>_________________________________________________________________<br></code></pre></td></tr></table></figure><ol><li><code>inputs = keras.Input(shape=(28, 28, 3))</code><ul><li>定义输入层。这里的<code>shape=(28, 28, 3)</code>表示输入图像的尺寸是28x28像素，并且有3个通道（RGB图像）。</li></ul></li><li><code>layer1 = layers.Conv2D(filters=8, kernel_size=3, activation=&#39;relu&#39;)(inputs)</code><ul><li>定义第一个卷积层。<code>filters=8</code>表示该层有8个卷积核（或过滤器）。<code>kernel_size=3</code>表示每个卷积核的大小是3x3。<code>activation=&#39;relu&#39;</code>表示使用ReLU（Rectified Linear Unit）作为激活函数。</li></ul></li><li><code>layer2 = layers.MaxPooling2D(pool_size=2)(layer1)</code><ul><li>定义第一个最大池化层。<code>pool_size=2</code>表示池化窗口的大小是2x2。这有助于降低图像的空间维度。</li></ul></li><li><code>layer3 = layers.Conv2D(filters=16, kernel_size=3, activation=&#39;relu&#39;)(layer2)</code><ul><li>定义第二个卷积层，该层有16个卷积核。</li></ul></li><li><code>layer4 = layers.MaxPooling2D(pool_size=2)(layer3)</code><ul><li>定义第二个最大池化层。</li></ul></li><li><code>layer5 = layers.Conv2D(filters=32, kernel_size=3, activation=&#39;relu&#39;)(layer4)</code><ul><li>定义第三个卷积层，该层有32个卷积核。</li></ul></li><li><code>layer6 = layers.Flatten()(layer5)</code><ul><li>将卷积层的输出展平，以便可以连接到全连接层。</li></ul></li><li><code>layer7 = layers.Dense(128, activation=&#39;relu&#39;)(layer6)</code><ul><li>定义一个全连接层，有128个节点，并使用ReLU作为激活函数。</li></ul></li><li><code>outputs = layers.Dense(10, activation=&#39;softmax&#39;)(layer6)</code><ul><li>定义输出层，有10个节点（对应于10个类别的分类任务）。使用softmax激活函数，为每个类别（0~9）生成一个概率分布。</li></ul></li><li><code>model = keras.Model(inputs=inputs, outputs=outputs, name=&#39;CNN&#39;)</code><ul><li>创建一个模型对象，指定输入和输出，并为模型命名为”CNN”。</li></ul></li></ol><h5 id="训练过程："><a href="#训练过程：" class="headerlink" title="训练过程："></a>训练过程：</h5><p>数据集中80%的数字用于训练，另外20%的数字用于验证（不参与训练）。</p><img src="模型性能指标.png" alt="模型性能指标" style="zoom:80%;" /><p><img src="%E6%AF%8F%E4%B8%AAepoch.png" alt="每个epoch"></p><p>我们选择了第五轮训练后的模型作为最终模型，因为他的表现较好。</p><h4 id="成功识别验证集中的数字"><a href="#成功识别验证集中的数字" class="headerlink" title="成功识别验证集中的数字"></a>成功识别验证集中的数字</h4><p>我们读取已经训练好的模型，并在验证集上进行预测。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">model = keras.models.load_model(<span class="hljs-string">&#x27;model1&#x27;</span>)<br>model.evaluate(val_data)<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Found</span> <span class="hljs-number">140000</span> files belonging to <span class="hljs-number">10</span> classes.<br><span class="hljs-attribute">Using</span> <span class="hljs-number">28000</span> files for validation.<br><span class="hljs-attribute">438</span>/<span class="hljs-number">438</span><span class="hljs-meta"> [==============================] - 8s 11ms/step - loss: 0.0657 - accuracy: 0.9831</span><br></code></pre></td></tr></table></figure><p>效果还是挺好的，准确率达到了98%！即使没有预先看到过这些数字。</p><h4 id="无法准确识别我写的数字"><a href="#无法准确识别我写的数字" class="headerlink" title="无法准确识别我写的数字"></a>无法准确识别我写的数字</h4><p>好的模型需要用到生活中去，躺在实验室里是没有意义的。所以我在A4纸上写下了0~9这10个数。</p><img src="../Documents/WeChat Files/wxid_m0j3iymlvwyn22/FileStorage/Temp/6c1048623e676043cc45d6575d51947.png" alt="6c1048623e676043cc45d6575d51947" style="zoom:130%;" /><p>当然，只有这十个数字是不够做测试的，为了避免实验的偶然性，我又搜集了不同的人写的数字。这样我们的测试集就有50个数字了。</p><p>我们读取已经训练好的模型，并在这些数字上进行预测。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">my_data = image_dataset_from_directory(<br>    <span class="hljs-string">&quot;C:\\Users\TCJ\Desktop\我写的数字&quot;</span>,<br>    image_size=(img_height, img_width),<br>    batch_size=batch_size)<br>model = keras.models.load_model(<span class="hljs-string">&#x27;model1&#x27;</span>)<br>model.evaluate(my_data)<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Found</span> <span class="hljs-number">50</span> files belonging to <span class="hljs-number">10</span> classes.<br><span class="hljs-attribute">1</span>/<span class="hljs-number">1</span><span class="hljs-meta"> [==============================] - 4s 4s/step - loss: 0.8660 - accuracy: 0.7600</span><br></code></pre></td></tr></table></figure><p>准确率只有76%，这相比于98%还是差了很多的。损失值更是达到了0.866，是在验证集上的13倍！</p><h4 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h4><p>同样是卷积网络未曾见过的数字，为什么准确率差这么多？</p><img src="三种类型的数字.png" alt="三种类型的数字" style="zoom:150%;" /><p>难道是因为我写的“6”的背景不够白吗？对于我们（人）而言，可以通过他们之间的色差区分出图中的数字。显然这个实验中的卷积网络不是根据这个特征来识别数字的。难道他过拟合了，认为只有纯白和纯黑组合成的图片才更有可能是数字？</p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>我们可以通过增加卷积核的方法来提升卷积网络学习特征的能力，并通过添加“dropout”层来阻止网络过度依赖某一特征，从而防止过拟合。</p><p>改进后的模型的结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python">inputs = keras.Input(shape=(<span class="hljs-number">28</span>, <span class="hljs-number">28</span>, <span class="hljs-number">3</span>))<br>layer1 = layers.Conv2D(filters=<span class="hljs-number">32</span>, kernel_size=<span class="hljs-number">3</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>)(inputs)<br>layer1_drop = layers.Dropout(<span class="hljs-number">0.15</span>)(layer1)<br>layer2 = layers.MaxPooling2D(pool_size=<span class="hljs-number">2</span>)(layer1_drop)<br>layer3 = layers.Conv2D(filters=<span class="hljs-number">64</span>, kernel_size=<span class="hljs-number">3</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>)(layer2)<br>layer3_drop = layers.Dropout(<span class="hljs-number">0.18</span>)(layer3)<br>layer4 = layers.MaxPooling2D(pool_size=<span class="hljs-number">2</span>)(layer3_drop)<br>layer5 = layers.Conv2D(filters=<span class="hljs-number">64</span>, kernel_size=<span class="hljs-number">3</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>)(layer4)<br>layer5_drop = layers.Dropout(<span class="hljs-number">0.20</span>)(layer5)<br>layer6 = layers.Flatten()(layer5_drop)<br>layer7 = layers.Dense(<span class="hljs-number">128</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>)(layer6)<br>layer7_drop = layers.Dropout(<span class="hljs-number">0.15</span>)(layer7)<br>outputs = layers.Dense(<span class="hljs-number">10</span>, activation=<span class="hljs-string">&#x27;softmax&#x27;</span>)(layer7_drop)<br>model = keras.Model(inputs=inputs, outputs=outputs, name=<span class="hljs-string">&#x27;CNN&#x27;</span>)<br><br>Model: <span class="hljs-string">&quot;CNN&quot;</span><br>_________________________________________________________________<br> Layer (<span class="hljs-built_in">type</span>)                Output Shape              Param <span class="hljs-comment">#   </span><br>=================================================================<br> input_1 (InputLayer)        [(<span class="hljs-literal">None</span>, <span class="hljs-number">28</span>, <span class="hljs-number">28</span>, <span class="hljs-number">3</span>)]       <span class="hljs-number">0</span>         <br>                                                                 <br> conv2d (Conv2D)             (<span class="hljs-literal">None</span>, <span class="hljs-number">26</span>, <span class="hljs-number">26</span>, <span class="hljs-number">32</span>)        <span class="hljs-number">896</span>       <br>                                                                 <br> dropout (Dropout)           (<span class="hljs-literal">None</span>, <span class="hljs-number">26</span>, <span class="hljs-number">26</span>, <span class="hljs-number">32</span>)        <span class="hljs-number">0</span>         <br>                                                                 <br> max_pooling2d (MaxPooling2D  (<span class="hljs-literal">None</span>, <span class="hljs-number">13</span>, <span class="hljs-number">13</span>, <span class="hljs-number">32</span>)       <span class="hljs-number">0</span>         <br> )                                                               <br>                                                                 <br> conv2d_1 (Conv2D)           (<span class="hljs-literal">None</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">64</span>)        <span class="hljs-number">18496</span>     <br>                                                                 <br> dropout_1 (Dropout)         (<span class="hljs-literal">None</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>, <span class="hljs-number">64</span>)        <span class="hljs-number">0</span>         <br>                                                                 <br> max_pooling2d_1 (MaxPooling  (<span class="hljs-literal">None</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">64</span>)         <span class="hljs-number">0</span>         <br> 2D)                                                             <br>                                                                 <br> conv2d_2 (Conv2D)           (<span class="hljs-literal">None</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">64</span>)          <span class="hljs-number">36928</span>     <br>                                                                 <br> dropout_2 (Dropout)         (<span class="hljs-literal">None</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">64</span>)          <span class="hljs-number">0</span>         <br>                                                                 <br> flatten (Flatten)           (<span class="hljs-literal">None</span>, <span class="hljs-number">576</span>)               <span class="hljs-number">0</span>         <br>                                                                 <br> dense (Dense)               (<span class="hljs-literal">None</span>, <span class="hljs-number">128</span>)               <span class="hljs-number">73856</span>     <br>                                                                 <br> dropout_3 (Dropout)         (<span class="hljs-literal">None</span>, <span class="hljs-number">128</span>)               <span class="hljs-number">0</span>         <br>                                                                 <br> dense_1 (Dense)             (<span class="hljs-literal">None</span>, <span class="hljs-number">10</span>)                <span class="hljs-number">1290</span>      <br>                                                                 <br>=================================================================<br>Total params: <span class="hljs-number">131</span>,<span class="hljs-number">466</span><br>Trainable params: <span class="hljs-number">131</span>,<span class="hljs-number">466</span><br>Non-trainable params: <span class="hljs-number">0</span><br>_________________________________________________________________<br></code></pre></td></tr></table></figure><ol><li><p><code>inputs = keras.Input(shape=(28, 28, 3))</code></p><ul><li>这行代码定义了模型的输入层。<code>shape=(28, 28, 3)</code>表示输入的图像是一个28x28像素的RGB图像（因此总共有3个通道）。</li></ul></li><li><p><code>layer1 = layers.Conv2D(filters=32, kernel_size=3, activation=&#39;relu&#39;)(inputs)</code></p><ul><li>创建一个二维卷积层，包含32个过滤器（或称为卷积核），每个过滤器的大小为3x3。<code>activation=&#39;relu&#39;</code>表示使用ReLU（Rectified Linear Unit）作为激活函数。</li></ul></li><li><p><code>layer1_drop = layers.Dropout(0.15)(layer1)</code></p><ul><li>在<code>layer1</code>上添加一个dropout层，dropout率（即随机忽略的神经元比例）为0.15。</li></ul></li><li><p><code>layer2 = layers.MaxPooling2D(pool_size=2)(layer1_drop)</code></p><ul><li>添加一个最大池化层，池化窗口的大小为2x2。</li></ul></li><li><p><code>layer3 = layers.Conv2D(filters=64, kernel_size=3, activation=&#39;relu&#39;)(layer2)</code></p><ul><li>创建另一个卷积层，这次包含64个过滤器。</li></ul></li><li><p><code>layer3_drop = layers.Dropout(0.18)(layer3)</code></p><ul><li>在<code>layer3</code>上添加另一个dropout层，这次dropout率为0.18。</li></ul></li><li><p><code>layer4 = layers.MaxPooling2D(pool_size=2)(layer3_drop)</code></p><ul><li>再添加一个最大池化层。</li></ul></li><li><p><code>layer5 = layers.Conv2D(filters=64, kernel_size=3, activation=&#39;relu&#39;)(layer4)</code></p><ul><li>再次创建卷积层，包含64个过滤器。</li></ul></li><li><p><code>layer5_drop = layers.Dropout(0.20)(layer5)</code></p><ul><li>在<code>layer5</code>上添加另一个dropout层，这次dropout率为0.20。</li></ul></li><li><p><code>layer6 = layers.Flatten()(layer5_drop)</code></p><ul><li>将<code>layer5_drop</code>的输出展平，这样它可以从一个多维张量转换为一个一维张量，以便可以连接到全连接层。</li></ul></li><li><p><code>layer7 = layers.Dense(128, activation=&#39;relu&#39;)(layer6)</code></p><ul><li>创建一个全连接层（也称为密集层），包含128个神经元，并使用ReLU作为激活函数。</li></ul></li><li><p><code>layer7_drop = layers.Dropout(0.15)(layer7)</code></p><ul><li>在<code>layer7</code>上添加一个dropout层，dropout率为0.15。</li></ul></li><li><p><code>outputs = layers.Dense(10, activation=&#39;softmax&#39;)(layer7_drop)</code></p><ul><li>创建一个输出层，包含10个神经元（对应于0~9这十个类别），并使用softmax激活函数进行分类。</li></ul></li><li><p><code>model = keras.Model(inputs=inputs, outputs=outputs, name=&#39;CNN&#39;)</code></p><ul><li>创建一个模型对象，将输入和输出连接起来，并命名为“CNN”。</li></ul></li></ol><h5 id="训练过程：-1"><a href="#训练过程：-1" class="headerlink" title="训练过程："></a>训练过程：</h5><p>数据集中80%的数字用于训练，另外20%的数字用于验证（不参与训练）。</p><img src="改进后的模型性能.png" alt="改进后的模型性能" style="zoom:80%;" /><p><img src="%E6%94%B9%E8%BF%9B%E5%90%8E%E7%9A%84%E6%AF%8F%E4%B8%AAepoch.png" alt="改进后的每个epoch"></p><p>这次我们选择了第四轮训练后的模型作为最终模型，因为他的表现较好。</p><h4 id="预测生活中的数字"><a href="#预测生活中的数字" class="headerlink" title="预测生活中的数字"></a>预测生活中的数字</h4><p>我们读取已经训练好的模型，并在数据集上进行预测。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">model = keras.models.load_model(<span class="hljs-string">&#x27;model3&#x27;</span>)<br>model.evaluate(my_data)<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Found</span> <span class="hljs-number">50</span> files belonging to <span class="hljs-number">10</span> classes.<br><span class="hljs-attribute">1</span>/<span class="hljs-number">1</span><span class="hljs-meta"> [==============================] - 2s 2s/step - loss: 0.6355 - accuracy: 0.8800</span><br></code></pre></td></tr></table></figure><p>精度和损失值都有不小的提升，这并不是偶然事件。事实上，我已经在相同的架构上训练了好几次了。最后的结果都表明改进后的模型具有较好的泛化能力。</p>]]></content>
    
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人工智能班会（班委竞选）</title>
    <link href="/2023/09/19/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%8F%AD%E4%BC%9A%EF%BC%88%E7%8F%AD%E5%A7%94%E7%AB%9E%E9%80%89%EF%BC%89/"/>
    <url>/2023/09/19/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%8F%AD%E4%BC%9A%EF%BC%88%E7%8F%AD%E5%A7%94%E7%AB%9E%E9%80%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="本次班委竞选共有6个职位：分别为班长、团支书、学委、心理委员、宣传委员、文体委员（文艺-体育委员）。"><a href="#本次班委竞选共有6个职位：分别为班长、团支书、学委、心理委员、宣传委员、文体委员（文艺-体育委员）。" class="headerlink" title="本次班委竞选共有6个职位：分别为班长、团支书、学委、心理委员、宣传委员、文体委员（文艺+体育委员）。"></a>本次班委竞选共有6个职位：分别为班长、团支书、学委、心理委员、宣传委员、文体委员（文艺+体育委员）。</h3><h3 id="此页面开启评论，同学们可在下方实名评论想要竞选的班委，也可以匿名举报竞选者（手动狗头），刷新网页查看最新评论！"><a href="#此页面开启评论，同学们可在下方实名评论想要竞选的班委，也可以匿名举报竞选者（手动狗头），刷新网页查看最新评论！" class="headerlink" title="此页面开启评论，同学们可在下方实名评论想要竞选的班委，也可以匿名举报竞选者（手动狗头），刷新网页查看最新评论！"></a>此页面开启评论，同学们可在下方实名评论想要竞选的班委，也可以匿名举报竞选者（手动狗头），刷新网页查看最新评论！</h3><h3 id="扫码快速进入！！！（查看职位介绍并评论！）"><a href="#扫码快速进入！！！（查看职位介绍并评论！）" class="headerlink" title="扫码快速进入！！！（查看职位介绍并评论！）"></a>扫码快速进入！！！（查看职位介绍并评论！）</h3><img src="/images/班会1/快速通道.png" alt="快速通道" style="zoom:80%;" /><img src="/images/班会1/心理委员.jpg" alt="心理委员" style="zoom:50%;" /><img src="/images/班会1/宣传委员.jpg" alt="宣传委员" style="zoom:50%;" /><img src="/images/班会1/文艺委员.jpg" alt="文艺委员" style="zoom:50%;" /><img src="/images/班会1/礼物.jpg" alt="礼物" style="zoom:70%;" />]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>不想睡觉，因为会遗忘</title>
    <link href="/2023/08/15/%E4%B8%8D%E6%83%B3%E7%9D%A1%E8%A7%89%EF%BC%8C%E5%9B%A0%E4%B8%BA%E4%BC%9A%E9%81%97%E5%BF%98/"/>
    <url>/2023/08/15/%E4%B8%8D%E6%83%B3%E7%9D%A1%E8%A7%89%EF%BC%8C%E5%9B%A0%E4%B8%BA%E4%BC%9A%E9%81%97%E5%BF%98/</url>
    
    <content type="html"><![CDATA[<p>大人的世界里总是有很多令人难受的事情，事实就是这样，但是我一下子很难接受。有很多可以说全部事情都是围绕着利益展开的，嗯，这很现实，同样很打击人。不想睡觉，怕天真的自己给这些残忍的原理披上善良的外衣。没关系，要坚强，很想用酒精和尼古丁麻醉自己，一次也行。但是，…我终究不能这么做，我不会向困难低头，我只会变得更强，强到足以抵挡这些事。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>暑假的一大步，未来的一小步</title>
    <link href="/2023/07/24/%E6%9A%91%E5%81%87%E7%9A%84%E4%B8%80%E5%A4%A7%E6%AD%A5%EF%BC%8C%E6%9C%AA%E6%9D%A5%E7%9A%84%E4%B8%80%E5%B0%8F%E6%AD%A5/"/>
    <url>/2023/07/24/%E6%9A%91%E5%81%87%E7%9A%84%E4%B8%80%E5%A4%A7%E6%AD%A5%EF%BC%8C%E6%9C%AA%E6%9D%A5%E7%9A%84%E4%B8%80%E5%B0%8F%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<p>21号晚上，省教育考试院网站公布了23年高考的最终录取结果。博主很幸运， 被录取到了浙江科技大学的人工智能专业。如果一切顺利的话，博主将在开学不久后获得杭州户籍✌。这是一件令人振奋的事情，我迈出了走出农村的第一步。</p><p>所以，我决定从现在开始卷，坚持发布AI领域的博文。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>人世间的伤心事本该如此</title>
    <link href="/2023/07/11/sad/"/>
    <url>/2023/07/11/sad/</url>
    
    <content type="html"><![CDATA[<p>不是，这不还没到点吗？怎么开始emo了？emm…好吧我只是想发点牢骚。毕竟像高考这么大的事都没能让我有立刻写一篇博文并发表的力量。</p><p>暂不可看。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>如果这是我必须要经历的，我会勇敢的面对</title>
    <link href="/2023/04/29/%E5%A6%82%E6%9E%9C%E8%BF%99%E6%98%AF%E6%88%91%E5%BF%85%E9%A1%BB%E8%A6%81%E7%BB%8F%E5%8E%86%E7%9A%84%EF%BC%8C%E6%88%91%E4%BC%9A%E5%8B%87%E6%95%A2%E7%9A%84%E9%9D%A2%E5%AF%B9/"/>
    <url>/2023/04/29/%E5%A6%82%E6%9E%9C%E8%BF%99%E6%98%AF%E6%88%91%E5%BF%85%E9%A1%BB%E8%A6%81%E7%BB%8F%E5%8E%86%E7%9A%84%EF%BC%8C%E6%88%91%E4%BC%9A%E5%8B%87%E6%95%A2%E7%9A%84%E9%9D%A2%E5%AF%B9/</url>
    
    <content type="html"><![CDATA[<p>而且会乐此不疲。</p><p>2023年是我人生中最重要的一年之一，因为我即将面临高考。这同时宣告了我的懵懂的青春将于不久后结束。诺贝尔文学奖得主马尔克斯曾说过：“我年轻过，落魄过，幸福过。我对生活一往情深。”斯言不谬，在中学时光，我奋斗过，爱过，失望过，低谷过，成功过。我自始至终都在顽强地活着。“生活本就是处处布满漩涡和暗礁的海洋”，叔本华之言可谓切中肯綮。如果你甘愿接受平庸，以躺平过活，只寻求眼前的美好事物的话，那么你就输了。</p><p>最近做题目的时候看到了《烟火漫卷》的节选部分，书中的主人公都有生活的不如意，这正是当今社会中大多数人的真实写照。但是，无论是谁，面对着多么大的困难，都始终在勇敢地面对生活。今天去朋友家做客，是在乡下，家里另外人只有爷爷和奶奶。他们很热情，我们一共就4个人，但是却有10碗菜！爷爷待人很真诚，告诉我不要抽烟和喝酒。奶奶看起来很和蔼。虽然他们的生命接近了尾声，但是依然在好好地生活。这给了我很大的感触，有种泪在眶里打转的感觉。他们不是毛泽东，更不是马克思，没有人会一直记得他们，可是，他们热爱生活的样子会给人以温暖，照亮一个正在踱步的青年人。</p><p>村上春树说过：“我即将融入剧烈争斗的大人世界，要在那里边孤军奋战，必须变得比任何人都坚不可摧”。我知道，我必须学会自爱、自强、自立、自信、自娱自乐。所以，我买了一架电子钢琴。在独处时，我会敲响优美的乐章，沉醉其中。在学校的长期影响下，我知道，书中的知识可以充盈一个人的精神世界。于是，我给自己定下了一个目标：多看点书，多走点路。这也许算不上一个目标吧。</p><p>田超杰的博客的主题是成长。人注定要在挫折中成长，这是条必经的坎坷的路，在这条路上，只有拥有强大的内心的人才能走得远。如果这是我必须要经历的，我会勇敢的面对，而且会乐此不疲，因为成长是我永恒的主题。</p>]]></content>
    
    
    
    <tags>
      
      <tag>成长</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>是什么让现在的我如此努力？</title>
    <link href="/2023/04/01/%E6%98%AF%E4%BB%80%E4%B9%88%E8%AE%A9%E7%8E%B0%E5%9C%A8%E7%9A%84%E6%88%91%E5%A6%82%E6%AD%A4%E5%8A%AA%E5%8A%9B%EF%BC%9F/"/>
    <url>/2023/04/01/%E6%98%AF%E4%BB%80%E4%B9%88%E8%AE%A9%E7%8E%B0%E5%9C%A8%E7%9A%84%E6%88%91%E5%A6%82%E6%AD%A4%E5%8A%AA%E5%8A%9B%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>让ChatGPT回答我的问题：</p><p>高三是中国学生人生中非常重要的一年，这一年的学习成绩将直接影响他们的大学录取和未来的发展。因此，高三学生要努力学习，主要有以下几个原因：</p><p>实现个人梦想和目标：高三学生将面临高考，这是他们进入大学和实现个人梦想和目标的必要条件。通过努力学习，他们可以提高成绩，增加被名校录取的机会，实现自己的人生目标。</p><p>掌握更多的知识和技能：高中阶段是人生中最重要的知识和技能获取阶段之一，通过努力学习，学生可以掌握更多的知识和技能，为未来的发展奠定坚实的基础。</p><p>提高竞争力：在当今社会中，知识和技能已经成为衡量一个人能力和竞争力的重要标准之一。通过努力学习，高三学生可以提高自己的知识水平和综合素质，增强自己在未来的就业市场上的竞争力。</p><p>培养自律和坚韧精神：高三学习生活是一个非常紧张和有挑战性的过程，通过努力学习，学生可以培养自律和坚韧精神，这对未来的生活和事业都非常重要。</p><p>为社会作出贡献：学生是社会的未来和希望，通过努力学习，他们可以为社会作出更多的贡献，为实现中华民族的伟大复兴做出更大的贡献。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>论自省</title>
    <link href="/2023/02/19/%E8%AE%BA%E8%87%AA%E7%9C%81/"/>
    <url>/2023/02/19/%E8%AE%BA%E8%87%AA%E7%9C%81/</url>
    
    <content type="html"><![CDATA[<p>我知道，要一个人直面自己的缺点是何足的艰难与残忍！但是，困难不会因为你选择逃避而避你远之。所以，这是一个必须要养成的不可或缺的好习惯。</p><p>自省，就是一个人主动发现自己的不足之处并尝试改正的过程。无可否认，让一个人主动去找自己的不好堪比拿刀自刎。每个人都希望自己尽可能的完美，即使有半点不好也是不太会去承认的。由此可得，自省的不易之处，同样也可知道自省的品质的宝贵。</p><p>也许，自省的过程会让你丧失信心；也许，自省的过程会让你选择逃避；也许，自省的过程会让你选择苟且偷生。但请相信，自省不会亏待每一位勇士。卡耐基在《人性的弱点》中写到人要学会自省，富兰克林甚至有自己的反省档案。</p><p>在快捷功利的社会里，自省会让你铭记初心，自省会让你临危不惧，自省会带你走向成功之路。直面挑战吧，勇士！自省将会成为你最引以为傲的武器。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>这是一条质与质的分界线</title>
    <link href="/2023/01/20/%E8%BF%99%E6%98%AF%E4%B8%80%E6%9D%A1%E8%B4%A8%E4%B8%8E%E8%B4%A8%E7%9A%84%E5%88%86%E7%95%8C%E7%BA%BF/"/>
    <url>/2023/01/20/%E8%BF%99%E6%98%AF%E4%B8%80%E6%9D%A1%E8%B4%A8%E4%B8%8E%E8%B4%A8%E7%9A%84%E5%88%86%E7%95%8C%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<p>在博客刚开设的时候，为了让博客看起来更充实，博主时常是为了写而写，所以早期的博客内是有从其它地方抄袭过来的文章的（当然在我意识到这个问题之后就把它们都删除了）。博主非常喜欢计算机，因此也就有了这个博客。说来神奇，我只是在哔哩哔哩网站上看到了某个UP主发的博客建设教程，于是我就脑子一热地行动了起来。当然，这在我的能力范围内，否则这个博客也不会运行到至今还未关服。这必须要感恩这个时代🌹。所以，我现在要写下一些什么，在日后看到了说不定也能让自己感动地泪涕俱下。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>现在是2023年了，谈谈博主在过去一年的成长历程</title>
    <link href="/2023/01/01/%E7%8E%B0%E5%9C%A8%E6%98%AF2023%E5%B9%B4%E4%BA%86%EF%BC%8C%E8%B0%88%E8%B0%88%E5%8D%9A%E4%B8%BB%E5%9C%A8%E8%BF%87%E5%8E%BB%E4%B8%80%E5%B9%B4%E7%9A%84%E6%88%90%E9%95%BF%E5%8E%86%E7%A8%8B/"/>
    <url>/2023/01/01/%E7%8E%B0%E5%9C%A8%E6%98%AF2023%E5%B9%B4%E4%BA%86%EF%BC%8C%E8%B0%88%E8%B0%88%E5%8D%9A%E4%B8%BB%E5%9C%A8%E8%BF%87%E5%8E%BB%E4%B8%80%E5%B9%B4%E7%9A%84%E6%88%90%E9%95%BF%E5%8E%86%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>很开心，因为今天是元旦，是新年的开端。以年为单位的记录让我有很多可以写的事情，但是都是琐事居多。恰巧博主在半个月前成年了，这让我解锁了很多人生的新姿势。emmm，突然不知道要写什么了，写不下去了我说。</p><p>先记录一下去年看的书吧。都是开卷有益的书哦！</p><p>1.《人性的弱点》：听名字就知道很厉害了，其实我已经看了好多遍了。书里面的主要内容是“交友之道”，还涉及了个人方面的内容。</p><p>2.《薛兆丰经济学讲义》：这本书我也看了很多遍了，每次看都能体会到知识的乐趣。</p><p>再记录一下去年达成的成就。</p><p>1.写了30篇博文。</p><p>2.赚到了第一桶金。</p><p>3.创立了一家互联网公司。</p><p>okfine，接下来进入正题。一年的时间也成长了蛮多的。接下来的内容极其私密，如果你在现实中认识我的话请不要嘲笑我。</p><p>暂不可见</p>]]></content>
    
    
    <categories>
      
      <category>人生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>成长</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>经营一家公司需要怎样的思维？</title>
    <link href="/2022/12/26/%E7%BB%8F%E8%90%A5%E4%B8%80%E5%AE%B6%E5%85%AC%E5%8F%B8%E9%9C%80%E8%A6%81%E6%80%8E%E6%A0%B7%E7%9A%84%E6%80%9D%E7%BB%B4%EF%BC%9F/"/>
    <url>/2022/12/26/%E7%BB%8F%E8%90%A5%E4%B8%80%E5%AE%B6%E5%85%AC%E5%8F%B8%E9%9C%80%E8%A6%81%E6%80%8E%E6%A0%B7%E7%9A%84%E6%80%9D%E7%BB%B4%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p><span class="label label-primary"><font size="3" color="red">创新思维：</font></span>创新思维特指人们在实践中破除迷信、超越陈规、有所发现、有所发明的思维活动。</p><p>要求：创新思维要以实践为基础，创新思维离不开对前人和他人已有成果的继承。</p><p>特点：创新思维的思路具有多向性、步骤具有跨越性、结果具有独特性。</p><p>表现：思路新、方法新、结果新。</p><p><span class="label label-warning"><font size="3" color="green">发散思维：</font></span>发散思维是根据已知的事物信息，从不同的角度、不同的方向思考，以寻求解决问题的多样性答案的思维方式。</p><p>技法：检核表法、信息交合法、头脑风暴法等。</p><p>作用：不仅能够帮助人们发现新问题，而且能对所要解决的问题提供众多新设想。</p><p><span class="label label-success"><font size="3" color="pink">聚合思维：</font></span>聚合思维是利用已有的知识和经验，把众多信息逐步引导到条理化的逻辑思路中，以便得出合乎逻辑的解决问题的方案。</p><p>要求：在思维聚合的过程中，需要多次运用比较、分析、抽象、归纳、演绎、综合等逻辑思维方法。</p><p><span class="label label-default"><font size="3" color="gray">超前思维：</font></span>超前思维是在多角度、全方位地分析事物的历史和现状的基础上，从事物发展的现实情况出发，认识和把握事物的发展状态，运用合理的推理和想象，判断事物未来发展趋势的思维形态。</p><p>表现：”先知先觉“。</p><p>特点：探索性、预测性、不确定性。</p><p><span class="label label-danger"><font size="3" color="blue">逆向思维：</font></span>逆向思维是人们从过去所把握的事物原理的反面、构成要素的反面、功能结构的反面等，去思考、去求索，以实现创新的目的。</p><p>要求：逆向思维要求作转换性思考，作反向思考，作交换性思考；发挥思维正逆互补的作用，正逆互补，携手共进。</p><p><span class="label label-info"><font size="3" color="broow">联想思维：</font></span>联想思维就是将记忆中对不同事物的认识进行联结与思考的思维活动。</p><p>特点：具有跨越的联结性和非逻辑制约的畅想性。</p><p>要求：迁移、想象。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>字符串常用函数和方法</title>
    <link href="/2022/12/18/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%B9%E6%B3%95/"/>
    <url>/2022/12/18/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th>函数和方法</th><th>功能</th></tr></thead><tbody><tr><td>len(x)</td><td>统计字符串x中字符的个数</td></tr><tr><td>x.find(y)</td><td>返回字符串x中子串y出现的首字符下标，若找不到，则输出-1</td></tr><tr><td>x.split(str=’’,num=string.count(str))</td><td>以str分隔符切片x，如果num有指定值，那么仅分隔num个子串。切片得到的值存储在列表中（不改变原字符串对象）。x.split()表示用空格为分隔符切片。</td></tr><tr><td>x.replace(old,new[,max])</td><td>返回字符串中的old（旧字符串）替换成new（新字符串）后生成的新字符串，如果指定第三个参数max，那么替换不超过max次（不改变原字符串对象）</td></tr><tr><td>x.upper()</td><td>把字符串x中的小写字母转换成大写字母（不改变原字符串对象）</td></tr><tr><td>x.lower()</td><td>把字符串x中的大写字母转换成小写字母（不改变原字符串对象）</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>信息复习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>pyplot库</title>
    <link href="/2022/12/18/pyplot%E5%BA%93/"/>
    <url>/2022/12/18/pyplot%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>figure()</td><td>创建一个新的图表对象，并设置为当前绘图对象。如果不创建figure对象，直接调用plot等绘图函数进行绘图，matplotlib会自动创建一个figure对象</td></tr><tr><td>plot()</td><td>绘制线形图</td></tr><tr><td>bar()</td><td>绘制垂直柱形图</td></tr><tr><td>barh()</td><td>绘制水平柱形图</td></tr><tr><td>scatter()</td><td>绘制散点图</td></tr><tr><td>title()</td><td>设置图表的标题</td></tr><tr><td>xlim()、ylim()</td><td>设置X、Y轴的取值范围</td></tr><tr><td>xlable()、ylable()</td><td>设置X、Y轴的标签</td></tr><tr><td>legend()</td><td>显示图例</td></tr><tr><td>show()</td><td>显示创建的所有绘图对象</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math  <span class="hljs-comment"># 导入math库，用于计算数据</span><br><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt  <span class="hljs-comment"># 从matplotlib库中导入子库pyplot，并将其简称为plt</span><br><br>x = <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>)  <span class="hljs-comment"># 创建不可变的数字序列</span><br>y = []<br>plt.figure(figsize=(<span class="hljs-number">10</span>, <span class="hljs-number">6</span>))  <span class="hljs-comment"># 创建图表对象，并设置它的大小为1000*600</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> x:<br>    y.append(math.sin(i))<br>plt.title(<span class="hljs-string">&#x27;sin(x)&#x27;</span>)  <span class="hljs-comment"># 设置标题</span><br>plt.plot(x, y, label=<span class="hljs-string">&#x27;sin(x)&#x27;</span>, color=<span class="hljs-string">&#x27;r&#x27;</span>, linewidth=<span class="hljs-number">3</span>)  <span class="hljs-comment"># 绘制线形图，并设置它的图例、颜色和线条宽度</span><br>plt.ylim(-<span class="hljs-number">0.75</span>, <span class="hljs-number">0.75</span>)  <span class="hljs-comment"># 设置y坐标轴的取值范围</span><br>plt.xlim(<span class="hljs-number">0</span>, <span class="hljs-number">40</span>)  <span class="hljs-comment"># 设置x坐标轴的取值范围</span><br>plt.legend()  <span class="hljs-comment"># 显示图例</span><br>plt.show()  <span class="hljs-comment"># 显示图像</span><br></code></pre></td></tr></table></figure><p>程序运行结果如下：</p><p><img src="/images/pyplot%E5%BA%93/%E7%BA%BF%E5%BD%A2%E5%9B%BE.png" alt="线形图"></p>]]></content>
    
    
    <categories>
      
      <category>信息复习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Image模块</title>
    <link href="/2022/12/17/Image%E6%A8%A1%E5%9D%97/"/>
    <url>/2022/12/17/Image%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<p>Image模块是PIL库（Python Image Library）中的重要模块。下面是它的常见操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image <span class="hljs-comment">#从PIL库中导入Image模块</span><br>im = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;tcj.jpg&#x27;</span>) <span class="hljs-comment">#打开tcj.jpg图像文件</span><br>im.<span class="hljs-built_in">format</span> <span class="hljs-comment">#返回图像文件格式</span><br>im.size <span class="hljs-comment">#返回图像尺寸大小（以像素为单位表示图像的宽度和高度）</span><br>im.mode <span class="hljs-comment">#返回图像的颜色模式</span><br>im.rotate(<span class="hljs-number">45</span>).show() <span class="hljs-comment">#将图像旋转45°后显示</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信息复习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>马克思主义哲学的基本观点</title>
    <link href="/2022/12/03/%E9%A9%AC%E5%85%8B%E6%80%9D%E4%B8%BB%E4%B9%89%E5%93%B2%E5%AD%A6%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%A7%82%E7%82%B9/"/>
    <url>/2022/12/03/%E9%A9%AC%E5%85%8B%E6%80%9D%E4%B8%BB%E4%B9%89%E5%93%B2%E5%AD%A6%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%A7%82%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h4 id="物质观"><a href="#物质观" class="headerlink" title="物质观"></a>物质观</h4><p>自然界在本质上是物质的，人类社会的产生、存在、发展及其构成要素都具有客观的物质性，人的意识本身就根源于物质，物质决定意识。</p><h4 id="运动观"><a href="#运动观" class="headerlink" title="运动观"></a>运动观</h4><p>物质是运动的物质，运动是物质固有的根本属性和存在方式，物质是运动的承担者。物质运动不是杂乱无章的，而是有其客观规律。</p><h4 id="意识观"><a href="#意识观" class="headerlink" title="意识观"></a>意识观</h4><p>人能够能动地认识世界，人能够能动地改造世界。意识的能动作用是巨大的，但要受到客观规律的制约。</p><h4 id="联系观"><a href="#联系观" class="headerlink" title="联系观"></a>联系观</h4><p>联系具有普遍性、客观性和多样性，要求我们用联系的观点看问题。整体与部分的辩证关系原理要求我们树立全局观念，掌握系统优化方法，同时必须重视部分的作用。</p><h4 id="发展观"><a href="#发展观" class="headerlink" title="发展观"></a>发展观</h4><p>发展具有普遍性，要求我们用发展的观点分析问题；发展的实质是事物的前进和上升，是新事物的产生和旧事物的灭亡；量变与质变的辩证关系原理要求我们既要重视量的积累，又要抓住时机，促成质变；发展的前进性和曲折性的辩证关系原理要求我们既要对新事物的未来充满信心，又要做好克服困难的准备。</p><h4 id="矛盾观"><a href="#矛盾观" class="headerlink" title="矛盾观"></a>矛盾观</h4><p>矛盾具有同一性和斗争性，二者相互区别、相互联系，要把握二者的对立统一；矛盾的普遍性原理要求承认矛盾、直面矛盾、分析矛盾，寻找正确的方法解决矛盾；矛盾的特殊性原理要求坚持具体问题具体分析；矛盾的普遍性和特殊性相互联结，并在一定条件下相互转化；主次矛盾、矛盾的主次方面的辩证关系原理，要求我们坚持两点论与重点论相结合。</p><h4 id="真理观"><a href="#真理观" class="headerlink" title="真理观"></a>真理观</h4><p>真理是标志主观同客观相符合的哲学范畴，是人们对客观事物及其规律的正确反映。真理都是有条件的、具体的。认识具有反复性、无限性和上升性，要求与时俱进，开拓创新，在实践中认识和发现真理，在实践中检验和发展真理。</p><h4 id="实践观"><a href="#实践观" class="headerlink" title="实践观"></a>实践观</h4><p>实践是人们改造客观世界的物质性活动。实践具有客观物质性、主观能动性、社会历史性的特点。实践是认识的基础——实践是认识的来源，实践是认识发展的动力，实践是检验认识的真理性的唯一标准，实践是认识的目的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>哲学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论自利</title>
    <link href="/2022/11/20/%E8%AE%BA%E8%87%AA%E5%88%A9/"/>
    <url>/2022/11/20/%E8%AE%BA%E8%87%AA%E5%88%A9/</url>
    
    <content type="html"><![CDATA[<p>博文伊始，先来看一个简单的推论：人不会做对自己不利的事（前提）<strong>→</strong> 人做的事都是对自己有利的（结论）<strong>→</strong> 人的一切所作所为都是出于为自己考虑（揭示本质）。</p><p>看到这里，有些同学就会提出疑问了：既然人做的都是对自己有利的事，那为什么还有那么多人进监狱呢，难道监狱是个好地方吗？</p><p>要解答上面这个疑惑，我们需要分别从主观和客观的角度来看待问题。</p><p>主观上，人的行为都是为了满足自己的需要，从一个人出生时就是这样，这一点毋庸置疑。</p><p>但是在客观上，人的这种行为所产生的效果可能会适得其反。</p><p>看到这里，又有些同学会提出疑问：难道别人向红十字会捐钱也是为了自己吗？</p><p>没错，别人捐款，只是因为别人要从中得到他需要的东西。他或许是觉得这样做很神圣，想从中得到自豪感；又或者是因为他无法拒绝。</p><p>由此，我们又可以得出一个结论，那就是：虽然人做的事都是为了自己，但这也有可能对他人有利。</p><p>子曰：“君子喻于义，小人喻于利。”上面的推论或许会让你觉得人都是自私的，所谓的君子只是比小人看到了更长远的利益。因为人们崇尚“义”，所以君子会更受人们待见，而小人则会遭到人们鄙弃，由是观之，谁的做法更有利于自身的发展就显而易见了。从这个角度分析，君子反倒是更聪明的逐利者。</p><p>人类社会中的物质是匮乏的，每个人都希望得到尽可能多的物资来满足自身的欲望。你没法要求别人无偿把物资让给你，更无权要求别人首先为你的需要考虑。原因很简单，一个连自己都不爱的人是不可能去爱其他人的。</p><p>“自利”是人类社会能够长久稳定运行的一个基本原理之一。从古到今，“自私”都是被人们憎恶的，因为人们想通过道德上的约束作用来淡化人的自利本性。事实证明，适当的为他人考虑确实能够促进社会的发展，但是这并不是在否定“自利”，这恰恰是对“自利”的巧妙运用。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>蒲公英飞走了</title>
    <link href="/2022/11/05/%E8%92%B2%E5%85%AC%E8%8B%B1%E9%A3%9E%E8%B5%B0%E4%BA%86/"/>
    <url>/2022/11/05/%E8%92%B2%E5%85%AC%E8%8B%B1%E9%A3%9E%E8%B5%B0%E4%BA%86/</url>
    
    <content type="html"><![CDATA[<p>暴风雨过后， 他出门寻找“白色精灵”，但是却怎么也找不到，无论是在田野里还是在河边，都没有她的踪迹。这仿佛像一道闪电正中他的天灵盖，他立马昏倒在地，从此便一蹶不振。</p><p>十年前，他和比他只小两岁的弟弟曾经去过一个地方——在那里，遍地都是白色的蒲公英。他们最喜欢做的事情就是互相往对方身上吹雪白的蒲公英——吹得到处都是。</p><p>他的家在农村——一个偏僻且被时代抛弃了的农村。也许这里根本称不上农村，因为全村的人口屈指可数，而且这里的房子大多是用泥土建的——一种流行于上世纪五六十年代的方法。十年来，这片地区取得了很多出人意料的成绩——除了他家的那个农村。</p><p>他的爸爸和爷爷都是地地道道的农民，生在农村，长在农村，并归根于农村。全家的希望都寄托在了他的身上。他也并不比镇上的孩子差，“大红花”和奖状一样都不会少。小时候的他就像“白色精灵”般给这个贫瘠的地方带来了一丝生机。</p><p>蒲公英虽然不需要人为的照顾，以至于在他的家乡遍地都是，但是，她同样也经不起任何风雨的摧残。对于农村的孩子来说，“野蛮生长”是他们最大的特点，但是这种疯狂的生长是无序的。</p><p>事实上，像他这样曾让家里人看到希望的农村孩子还有很多，但是，“野蛮生长”近乎不可能朝着正确的方向生长，以至于他们中的很多人依然走不出农村，甚至于他们的后代。</p><p>蒲公英随风而起、随遇而安、循环往复，代代如此。</p>]]></content>
    
    
    
    <tags>
      
      <tag>散文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入理解Series和DataFrame</title>
    <link href="/2022/10/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Series%E5%92%8CDataFrame/"/>
    <url>/2022/10/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Series%E5%92%8CDataFrame/</url>
    
    <content type="html"><![CDATA[<p>Series和DataFrame这两种数据结构都是第三方库（pandas）所特有的。理解他们的最好的方法就是深入理解他们的底层源码。</p><h3 id="一、Series"><a href="#一、Series" class="headerlink" title="一、Series"></a>一、Series</h3><p>Series类的构造方法是：pandas.Series(data,index,dtype,name,copy)</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>可以是类似数组的数据、迭代对象（例：range()）、字典和标准值(例：1)。如果是字典，那么数据的顺序与其在字典中的顺序一致。</td></tr><tr><td>index</td><td>可以是类似数组的数据和迭代对象。其值必须是可哈希（经过哈希运算后能产生唯一的value与key对应）的且长度与数据长度一致。默认是RangeIndex (0, 1, 2, …, n)。如果是字典，那么字典的key值会作为index值。</td></tr><tr><td>dtype</td><td>可以是str, numpy.dtype, or ExtensionDtype, optional。默认自动判断。</td></tr><tr><td>name</td><td>可以是str, optional。Series的名字。</td></tr><tr><td>copy</td><td>布尔值。默认是False。</td></tr></tbody></table><h4 id="①对属性name的具体解释"><a href="#①对属性name的具体解释" class="headerlink" title="①对属性name的具体解释"></a>①对属性name的具体解释</h4><p>在Series和DataFrame中，name可看作列标题。</p><h4 id="②对属性values的具体解释"><a href="#②对属性values的具体解释" class="headerlink" title="②对属性values的具体解释"></a>②对属性values的具体解释</h4><p>返回存储值的数组（数组内元素间用一个空格隔开）。</p><h4 id="③len-函数的应用"><a href="#③len-函数的应用" class="headerlink" title="③len()函数的应用"></a>③len()函数的应用</h4><p>len(Series对象)返回值个数。</p><h4 id="④取值的几种方法"><a href="#④取值的几种方法" class="headerlink" title="④取值的几种方法"></a>④取值的几种方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#底层源码中关于“取值”的部分代码</span><br><span class="hljs-keyword">if</span> is_integer(key) <span class="hljs-keyword">and</span> self.index._should_fallback_to_positional:<br>    <span class="hljs-keyword">return</span> self._values[key]<br><br><span class="hljs-keyword">elif</span> key_is_scalar:<br>    <span class="hljs-keyword">return</span> self._get_value(key)<br></code></pre></td></tr></table></figure><p>由上可得，我们可以通过数字索引和自定义索引来访问Series对象中的值。</p><h4 id="⑤改值的几种方法"><a href="#⑤改值的几种方法" class="headerlink" title="⑤改值的几种方法"></a>⑤改值的几种方法</h4><h5 id="直接改值："><a href="#直接改值：" class="headerlink" title="直接改值："></a>直接改值：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#底层源码中关于“改值”的部分代码</span><br>self._mgr.setitem_inplace(key, value)<span class="hljs-comment">#key是数字索引，value是要修改的值</span><br></code></pre></td></tr></table></figure><p>当我们用自定义索引改值时，python需要先取得相应的数字索引，再执行上述代码。</p><h5 id="使用update-方法："><a href="#使用update-方法：" class="headerlink" title="使用update()方法："></a>使用update()方法：</h5><p>示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>s = pd.Series([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>s.update(pd.Series([<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]))<br><span class="hljs-meta">&gt;&gt;&gt; </span>s<br><span class="hljs-number">0</span>    <span class="hljs-number">4</span><br><span class="hljs-number">1</span>    <span class="hljs-number">5</span><br><span class="hljs-number">2</span>    <span class="hljs-number">6</span><br>dtype: int64<br><span class="hljs-meta">&gt;&gt;&gt; </span>s = pd.Series([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>s.update(pd.Series([<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>], index=[<span class="hljs-number">0</span>, <span class="hljs-number">2</span>]))<br><span class="hljs-meta">&gt;&gt;&gt; </span>s<br><span class="hljs-number">0</span>    d<br><span class="hljs-number">1</span>    b<br><span class="hljs-number">2</span>    e<br>dtype: <span class="hljs-built_in">object</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s = pd.Series([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>s.update(pd.Series([<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]))<br><span class="hljs-meta">&gt;&gt;&gt; </span>s<br><span class="hljs-number">0</span>    <span class="hljs-number">4</span><br><span class="hljs-number">1</span>    <span class="hljs-number">5</span><br><span class="hljs-number">2</span>    <span class="hljs-number">6</span><br>dtype: int64<br>If other contains NaNs the corresponding values are <span class="hljs-keyword">not</span> updated <span class="hljs-keyword">in</span> the original Series.<br><span class="hljs-meta">&gt;&gt;&gt; </span>s = pd.Series([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>s.update(pd.Series([<span class="hljs-number">4</span>, np.nan, <span class="hljs-number">6</span>]))<br><span class="hljs-meta">&gt;&gt;&gt; </span>s<br><span class="hljs-number">0</span>    <span class="hljs-number">4</span><br><span class="hljs-number">1</span>    <span class="hljs-number">2</span><br><span class="hljs-number">2</span>    <span class="hljs-number">6</span><br>dtype: int64<br>other can also be a non-Series <span class="hljs-built_in">object</span> <span class="hljs-built_in">type</span> that <span class="hljs-keyword">is</span> coercible into a Series<br><span class="hljs-meta">&gt;&gt;&gt; </span>s = pd.Series([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>s.update([<span class="hljs-number">4</span>, np.nan, <span class="hljs-number">6</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>s<br><span class="hljs-number">0</span>    <span class="hljs-number">4</span><br><span class="hljs-number">1</span>    <span class="hljs-number">2</span><br><span class="hljs-number">2</span>    <span class="hljs-number">6</span><br>dtype: int64<br><span class="hljs-meta">&gt;&gt;&gt; </span>s = pd.Series([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>s.update(&#123;<span class="hljs-number">1</span>: <span class="hljs-number">9</span>&#125;)<br><span class="hljs-meta">&gt;&gt;&gt; </span>s<br><span class="hljs-number">0</span>    <span class="hljs-number">1</span><br><span class="hljs-number">1</span>    <span class="hljs-number">9</span><br><span class="hljs-number">2</span>    <span class="hljs-number">3</span><br>dtype: int64<br></code></pre></td></tr></table></figure><h4 id="⑥加值的方法"><a href="#⑥加值的方法" class="headerlink" title="⑥加值的方法"></a>⑥加值的方法</h4><p><strong>s[新索引]=新值</strong></p><h4 id="⑦删值的方法"><a href="#⑦删值的方法" class="headerlink" title="⑦删值的方法"></a>⑦删值的方法</h4><p><strong>del s[索引]：直接从源数据中删除 s[索引]。</strong></p><p><strong>s.drop(labels=,inplace=)：labels可以是单个索引也可以是多个索引组成的数组。inplace为False时，不改变源数据；inplace为True时，直接改源数据；inplace默认为False。</strong></p><h4 id="⑦转为字典"><a href="#⑦转为字典" class="headerlink" title="⑦转为字典"></a>⑦转为字典</h4><p>使用 <strong>to_dict()</strong> 方法可将Series对象转为字典。</p><h4 id="⑧groupby-方法"><a href="#⑧groupby-方法" class="headerlink" title="⑧groupby()方法"></a>⑧groupby()方法</h4><p>示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt; ser = pd.Series([<span class="hljs-number">390.</span>, <span class="hljs-number">350.</span>, <span class="hljs-number">30.</span>, <span class="hljs-number">20.</span>], ...                 index=[<span class="hljs-string">&#x27;Falcon&#x27;</span>, <span class="hljs-string">&#x27;Falcon&#x27;</span>, <span class="hljs-string">&#x27;Parrot&#x27;</span>, <span class="hljs-string">&#x27;Parrot&#x27;</span>], name=<span class="hljs-string">&quot;Max Speed&quot;</span>) <br><span class="hljs-meta">&gt;&gt;&gt; </span>ser<br>Falcon    <span class="hljs-number">390.0</span><br>Falcon    <span class="hljs-number">350.0</span><br>Parrot     <span class="hljs-number">30.0</span><br>Parrot     <span class="hljs-number">20.0</span><br>Name: Max Speed, dtype: float64 <br><span class="hljs-meta">&gt;&gt;&gt; </span>ser.groupby([<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>]).mean()<br>a    <span class="hljs-number">210.0</span><br>b    <span class="hljs-number">185.0</span><br>Name: Max Speed, dtype: float64 <br><span class="hljs-meta">&gt;&gt;&gt; </span>ser.groupby(level=<span class="hljs-number">0</span>).mean()<br>Falcon    <span class="hljs-number">370.0</span><br>Parrot     <span class="hljs-number">25.0</span><br>Name: Max Speed, dtype: float64<br><span class="hljs-meta">&gt;&gt;&gt; </span>ser.groupby(ser &gt; <span class="hljs-number">100</span>).mean()<br>Max Speed<br><span class="hljs-literal">False</span>     <span class="hljs-number">25.0</span><br><span class="hljs-literal">True</span>     <span class="hljs-number">370.0</span><br>Name: Max Speed, dtype: float64<br></code></pre></td></tr></table></figure><h4 id="⑨count-方法"><a href="#⑨count-方法" class="headerlink" title="⑨count()方法"></a>⑨count()方法</h4><p>返回值的个数。</p><h4 id="⑩sort-values-方法"><a href="#⑩sort-values-方法" class="headerlink" title="⑩sort_values()方法"></a>⑩sort_values()方法</h4><p>示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>s = pd.Series([np.nan, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>, <span class="hljs-number">5</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>s<br><span class="hljs-number">0</span>     NaN<br><span class="hljs-number">1</span>     <span class="hljs-number">1.0</span><br><span class="hljs-number">2</span>     <span class="hljs-number">3.0</span><br><span class="hljs-number">3</span>     <span class="hljs-number">10.0</span><br><span class="hljs-number">4</span>     <span class="hljs-number">5.0</span><br>dtype: float64<br>Sort values ascending order (default behaviour)<br><span class="hljs-meta">&gt;&gt;&gt; </span>s.sort_values(ascending=<span class="hljs-literal">True</span>)<br><span class="hljs-number">1</span>     <span class="hljs-number">1.0</span><br><span class="hljs-number">2</span>     <span class="hljs-number">3.0</span><br><span class="hljs-number">4</span>     <span class="hljs-number">5.0</span><br><span class="hljs-number">3</span>    <span class="hljs-number">10.0</span><br><span class="hljs-number">0</span>     NaN<br>dtype: float64<br>Sort values descending order<br><span class="hljs-meta">&gt;&gt;&gt; </span>s.sort_values(ascending=<span class="hljs-literal">False</span>)<br><span class="hljs-number">3</span>    <span class="hljs-number">10.0</span><br><span class="hljs-number">4</span>     <span class="hljs-number">5.0</span><br><span class="hljs-number">2</span>     <span class="hljs-number">3.0</span><br><span class="hljs-number">1</span>     <span class="hljs-number">1.0</span><br><span class="hljs-number">0</span>     NaN<br>dtype: float64<br>Sort values inplace<br><span class="hljs-meta">&gt;&gt;&gt; </span>s.sort_values(ascending=<span class="hljs-literal">False</span>, inplace=<span class="hljs-literal">True</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>s<br><span class="hljs-number">3</span>    <span class="hljs-number">10.0</span><br><span class="hljs-number">4</span>     <span class="hljs-number">5.0</span><br><span class="hljs-number">2</span>     <span class="hljs-number">3.0</span><br><span class="hljs-number">1</span>     <span class="hljs-number">1.0</span><br><span class="hljs-number">0</span>     NaN<br>dtype: float64<br>Sort values putting NAs first<br><span class="hljs-meta">&gt;&gt;&gt; </span>s.sort_values(na_position=<span class="hljs-string">&#x27;first&#x27;</span>)<br><span class="hljs-number">0</span>     NaN<br><span class="hljs-number">1</span>     <span class="hljs-number">1.0</span><br><span class="hljs-number">2</span>     <span class="hljs-number">3.0</span><br><span class="hljs-number">4</span>     <span class="hljs-number">5.0</span><br><span class="hljs-number">3</span>    <span class="hljs-number">10.0</span><br>dtype: float64<br>Sort a series of strings<br><span class="hljs-meta">&gt;&gt;&gt; </span>s = pd.Series([<span class="hljs-string">&#x27;z&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>s<br><span class="hljs-number">0</span>    z<br><span class="hljs-number">1</span>    b<br><span class="hljs-number">2</span>    d<br><span class="hljs-number">3</span>    a<br><span class="hljs-number">4</span>    c<br>dtype: <span class="hljs-built_in">object</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s.sort_values()<br><span class="hljs-number">3</span>    a<br><span class="hljs-number">1</span>    b<br><span class="hljs-number">4</span>    c<br><span class="hljs-number">2</span>    d<br><span class="hljs-number">0</span>    z<br>dtype: <span class="hljs-built_in">object</span><br>Sort using a key function. Your key function will be given the Series of values <span class="hljs-keyword">and</span> should <span class="hljs-keyword">return</span> an array-like.<br><span class="hljs-meta">&gt;&gt;&gt; </span>s = pd.Series([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>s.sort_values()<br><span class="hljs-number">1</span>    B<br><span class="hljs-number">3</span>    D<br><span class="hljs-number">0</span>    a<br><span class="hljs-number">2</span>    c<br><span class="hljs-number">4</span>    e<br>dtype: <span class="hljs-built_in">object</span><br></code></pre></td></tr></table></figure><h4 id="⑪sort-index-方法"><a href="#⑪sort-index-方法" class="headerlink" title="⑪sort_index()方法"></a>⑪sort_index()方法</h4><p>示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>s = pd.Series([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>], index=[<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>s.sort_index()<br><span class="hljs-number">1</span>    c<br><span class="hljs-number">2</span>    b<br><span class="hljs-number">3</span>    a<br><span class="hljs-number">4</span>    d<br>dtype: <span class="hljs-built_in">object</span><br>Sort Descending<br><span class="hljs-meta">&gt;&gt;&gt; </span>s.sort_index(ascending=<span class="hljs-literal">False</span>)<br><span class="hljs-number">4</span>    d<br><span class="hljs-number">3</span>    a<br><span class="hljs-number">2</span>    b<br><span class="hljs-number">1</span>    c<br>dtype: <span class="hljs-built_in">object</span><br>Sort Inplace<br><span class="hljs-meta">&gt;&gt;&gt; </span>s.sort_index(inplace=<span class="hljs-literal">True</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>s<br><span class="hljs-number">1</span>    c<br><span class="hljs-number">2</span>    b<br><span class="hljs-number">3</span>    a<br><span class="hljs-number">4</span>    d<br>dtype: <span class="hljs-built_in">object</span><br></code></pre></td></tr></table></figure><h4 id="⑫drop-方法"><a href="#⑫drop-方法" class="headerlink" title="⑫drop()方法"></a>⑫drop()方法</h4><p>示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>s = pd.Series(data=np.arange(<span class="hljs-number">3</span>), index=[<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>s<br>A  <span class="hljs-number">0</span><br>B  <span class="hljs-number">1</span><br>C  <span class="hljs-number">2</span><br>dtype: int64<br>Drop labels B en C<br><span class="hljs-meta">&gt;&gt;&gt; </span>s.drop(labels=[<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>])<br>A  <span class="hljs-number">0</span><br>dtype: int64<br></code></pre></td></tr></table></figure><p><strong>注意：在使用了自定义索引后，drop()不再支持数字索引；反之也成立。</strong></p><h3 id="二、Dataframe"><a href="#二、Dataframe" class="headerlink" title="二、Dataframe"></a>二、Dataframe</h3><p>Dataframe类的构造方法是：pandas.Dataframe(data,index,columns,dtype,copy)</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>可以是n维矩阵、迭代对象（例：range()）和字典。如果是字典，那么key将作为列标题。</td></tr><tr><td>index</td><td>可以是类似数组的数据和迭代对象。其值必须是可哈希（经过哈希运算后能产生唯一的value与key对应）的且长度与数据长度一致。默认是RangeIndex (0, 1, 2, …, n)。</td></tr><tr><td>columns</td><td>可以是类似数组的数据和迭代对象。默认是RangeIndex (0, 1, 2, …, n)。</td></tr><tr><td>dtype</td><td>默认自动判断。</td></tr><tr><td>copy</td><td>布尔值。默认是None。</td></tr></tbody></table><h4 id="①转为字典"><a href="#①转为字典" class="headerlink" title="①转为字典"></a>①转为字典</h4><p>使用 <strong>to_dict()</strong> 方法可将Dataframe对象转为字典。</p><h4 id="②行列转置"><a href="#②行列转置" class="headerlink" title="②行列转置"></a>②行列转置</h4><p><strong>df.T</strong></p><h4 id="③取值的几种方法"><a href="#③取值的几种方法" class="headerlink" title="③取值的几种方法"></a>③取值的几种方法</h4><h5 id="df-at-："><a href="#df-at-：" class="headerlink" title="df.at[]："></a>df.at[]：</h5><p>示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>df = pd.DataFrame([[<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>]],<br><span class="hljs-meta">... </span>                  index=[<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], columns=[<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>df<br>    A   B   C<br><span class="hljs-number">4</span>   <span class="hljs-number">0</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span><br><span class="hljs-number">5</span>   <span class="hljs-number">0</span>   <span class="hljs-number">4</span>   <span class="hljs-number">1</span><br><span class="hljs-number">6</span>  <span class="hljs-number">10</span>  <span class="hljs-number">20</span>  <span class="hljs-number">30</span><br><br>Get value at specified row/column pair<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>df.at[<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;B&#x27;</span>]<br><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h5 id="df-start-end-step-，此方法只能取行。使用布尔索引也可以检索符合条件（多条件时，分条件需用圆括号括起）的行。"><a href="#df-start-end-step-，此方法只能取行。使用布尔索引也可以检索符合条件（多条件时，分条件需用圆括号括起）的行。" class="headerlink" title="df[ start : end : step ]，此方法只能取行。使用布尔索引也可以检索符合条件（多条件时，分条件需用圆括号括起）的行。"></a>df[ start : end : step ]，此方法只能取行。使用布尔索引也可以检索符合条件（多条件时，分条件需用圆括号括起）的行。</h5><h5 id="df-XX-和-df-，这两种方法只能取列。注意：属性检索法不支持数字列标题。"><a href="#df-XX-和-df-，这两种方法只能取列。注意：属性检索法不支持数字列标题。" class="headerlink" title="df.XX 和 df[]，这两种方法只能取列。注意：属性检索法不支持数字列标题。"></a>df.XX 和 df[]，这两种方法只能取列。注意：属性检索法不支持数字列标题。</h5><h4 id="④改值的方法"><a href="#④改值的方法" class="headerlink" title="④改值的方法"></a>④改值的方法</h4><p><strong>直接改值。</strong></p><p><strong>使用update()方法：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>df = pd.DataFrame(&#123;<span class="hljs-string">&#x27;A&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br><span class="hljs-meta">... </span>                   <span class="hljs-string">&#x27;B&#x27;</span>: [<span class="hljs-number">400</span>, <span class="hljs-number">500</span>, <span class="hljs-number">600</span>]&#125;)<br><span class="hljs-meta">&gt;&gt;&gt; </span>new_df = pd.DataFrame(&#123;<span class="hljs-string">&#x27;B&#x27;</span>: [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>],<br><span class="hljs-meta">... </span>                       <span class="hljs-string">&#x27;C&#x27;</span>: [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]&#125;)<br><span class="hljs-meta">&gt;&gt;&gt; </span>df.update(new_df)<br><span class="hljs-meta">&gt;&gt;&gt; </span>df<br>   A  B<br><span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">4</span><br><span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">5</span><br><span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">6</span><br>The DataFrame<span class="hljs-string">&#x27;s length does not increase as a result of the update, only values at matching index/column labels are updated.</span><br><span class="hljs-string">&gt;&gt;&gt; df = pd.DataFrame(&#123;&#x27;</span>A<span class="hljs-string">&#x27;: [&#x27;</span>a<span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-string">b&#x27;, &#x27;</span>c<span class="hljs-string">&#x27;],</span><br><span class="hljs-string">...                    &#x27;</span><span class="hljs-string">B&#x27;: [&#x27;</span>x<span class="hljs-string">&#x27;, &#x27;</span>y<span class="hljs-string">&#x27;, &#x27;</span>z<span class="hljs-string">&#x27;]&#125;)</span><br><span class="hljs-string">&gt;&gt;&gt; new_df = pd.DataFrame(&#123;&#x27;</span><span class="hljs-string">B&#x27;: [&#x27;</span>d<span class="hljs-string">&#x27;, &#x27;</span>e<span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-string">f&#x27;, &#x27;</span>g<span class="hljs-string">&#x27;, &#x27;</span>h<span class="hljs-string">&#x27;, &#x27;</span>i<span class="hljs-string">&#x27;]&#125;)</span><br><span class="hljs-string">&gt;&gt;&gt; df.update(new_df)</span><br><span class="hljs-string">&gt;&gt;&gt; df</span><br><span class="hljs-string">   A  B</span><br><span class="hljs-string">0  a  d</span><br><span class="hljs-string">1  b  e</span><br><span class="hljs-string">2  c  f</span><br><span class="hljs-string">For Series, its name attribute must be set.</span><br><span class="hljs-string">&gt;&gt;&gt; df = pd.DataFrame(&#123;&#x27;</span>A<span class="hljs-string">&#x27;: [&#x27;</span>a<span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-string">b&#x27;, &#x27;</span>c<span class="hljs-string">&#x27;],</span><br><span class="hljs-string">...                    &#x27;</span><span class="hljs-string">B&#x27;: [&#x27;</span>x<span class="hljs-string">&#x27;, &#x27;</span>y<span class="hljs-string">&#x27;, &#x27;</span>z<span class="hljs-string">&#x27;]&#125;)</span><br><span class="hljs-string">&gt;&gt;&gt; new_column = pd.Series([&#x27;</span>d<span class="hljs-string">&#x27;, &#x27;</span>e<span class="hljs-string">&#x27;], name=&#x27;</span><span class="hljs-string">B&#x27;, index=[0, 2])</span><br><span class="hljs-string">&gt;&gt;&gt; df.update(new_column)</span><br><span class="hljs-string">&gt;&gt;&gt; df</span><br><span class="hljs-string">   A  B</span><br><span class="hljs-string">0  a  d</span><br><span class="hljs-string">1  b  y</span><br><span class="hljs-string">2  c  e</span><br><span class="hljs-string">&gt;&gt;&gt; df = pd.DataFrame(&#123;&#x27;</span>A<span class="hljs-string">&#x27;: [&#x27;</span>a<span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-string">b&#x27;, &#x27;</span>c<span class="hljs-string">&#x27;],</span><br><span class="hljs-string">...                    &#x27;</span><span class="hljs-string">B&#x27;: [&#x27;</span>x<span class="hljs-string">&#x27;, &#x27;</span>y<span class="hljs-string">&#x27;, &#x27;</span>z<span class="hljs-string">&#x27;]&#125;)</span><br><span class="hljs-string">&gt;&gt;&gt; new_df = pd.DataFrame(&#123;&#x27;</span><span class="hljs-string">B&#x27;: [&#x27;</span>d<span class="hljs-string">&#x27;, &#x27;</span>e<span class="hljs-string">&#x27;]&#125;, index=[1, 2])</span><br><span class="hljs-string">&gt;&gt;&gt; df.update(new_df)</span><br><span class="hljs-string">&gt;&gt;&gt; df</span><br><span class="hljs-string">   A  B</span><br><span class="hljs-string">0  a  x</span><br><span class="hljs-string">1  b  d</span><br><span class="hljs-string">2  c  e</span><br><span class="hljs-string">If other contains NaNs the corresponding values are not updated in the original dataframe.</span><br><span class="hljs-string">&gt;&gt;&gt; df = pd.DataFrame(&#123;&#x27;</span>A<span class="hljs-string">&#x27;: [1, 2, 3],</span><br><span class="hljs-string">...                    &#x27;</span><span class="hljs-string">B&#x27;: [400, 500, 600]&#125;)</span><br><span class="hljs-string">&gt;&gt;&gt; new_df = pd.DataFrame(&#123;&#x27;</span><span class="hljs-string">B&#x27;: [4, np.nan, 6]&#125;)</span><br><span class="hljs-string">&gt;&gt;&gt; df.update(new_df)</span><br><span class="hljs-string">&gt;&gt;&gt; df</span><br><span class="hljs-string">   A      B</span><br><span class="hljs-string">0  1    4.0</span><br><span class="hljs-string">1  2  500.0</span><br><span class="hljs-string">2  3    6.0</span><br></code></pre></td></tr></table></figure><h4 id="⑤加值的方法"><a href="#⑤加值的方法" class="headerlink" title="⑤加值的方法"></a>⑤加值的方法</h4><p><strong>直接加值：df[新索引]=新值。注意：不支持属性检索法。</strong></p><p><strong>使用insert()方法。</strong></p><h4 id="⑥删值的方法"><a href="#⑥删值的方法" class="headerlink" title="⑥删值的方法"></a>⑥删值的方法</h4><p><strong>df.pop(列标题)：直接从源数据中删除并返回删去的列。</strong></p><p><strong>使用drop()方法。</strong></p><h4 id="⑦sort-index-方法"><a href="#⑦sort-index-方法" class="headerlink" title="⑦sort_index()方法"></a>⑦sort_index()方法</h4><p>示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>df = pd.DataFrame([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>], index=[<span class="hljs-number">100</span>, <span class="hljs-number">29</span>, <span class="hljs-number">234</span>, <span class="hljs-number">1</span>, <span class="hljs-number">150</span>],<br><span class="hljs-meta">... </span>                  columns=[<span class="hljs-string">&#x27;A&#x27;</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>df.sort_index()<br>     A<br><span class="hljs-number">1</span>    <span class="hljs-number">4</span><br><span class="hljs-number">29</span>   <span class="hljs-number">2</span><br><span class="hljs-number">100</span>  <span class="hljs-number">1</span><br><span class="hljs-number">150</span>  <span class="hljs-number">5</span><br><span class="hljs-number">234</span>  <span class="hljs-number">3</span><br>By default, it sorts <span class="hljs-keyword">in</span> ascending order, to sort <span class="hljs-keyword">in</span> descending order, use ascending=<span class="hljs-literal">False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>df.sort_index(ascending=<span class="hljs-literal">False</span>)<br>     A<br><span class="hljs-number">234</span>  <span class="hljs-number">3</span><br><span class="hljs-number">150</span>  <span class="hljs-number">5</span><br><span class="hljs-number">100</span>  <span class="hljs-number">1</span><br><span class="hljs-number">29</span>   <span class="hljs-number">2</span><br><span class="hljs-number">1</span>    <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h4 id="⑧append-方法"><a href="#⑧append-方法" class="headerlink" title="⑧append()方法"></a>⑧append()方法</h4><p>示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>df = pd.DataFrame([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]], columns=<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;AB&#x27;</span>), index=[<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>df<br>   A  B<br>x  <span class="hljs-number">1</span>  <span class="hljs-number">2</span><br>y  <span class="hljs-number">3</span>  <span class="hljs-number">4</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>df2 = pd.DataFrame([[<span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>]], columns=<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;AB&#x27;</span>), index=[<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>df.append(df2)<br>   A  B<br>x  <span class="hljs-number">1</span>  <span class="hljs-number">2</span><br>y  <span class="hljs-number">3</span>  <span class="hljs-number">4</span><br>x  <span class="hljs-number">5</span>  <span class="hljs-number">6</span><br>y  <span class="hljs-number">7</span>  <span class="hljs-number">8</span><br>With ignore_index <span class="hljs-built_in">set</span> to <span class="hljs-literal">True</span>:<br><span class="hljs-meta">&gt;&gt;&gt; </span>df.append(df2, ignore_index=<span class="hljs-literal">True</span>)<br>   A  B<br><span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span><br><span class="hljs-number">1</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span><br><span class="hljs-number">2</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span><br><span class="hljs-number">3</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><h4 id="⑨values属性"><a href="#⑨values属性" class="headerlink" title="⑨values属性"></a>⑨values属性</h4><p>返回存储值的二维数据（类二维列表，行与行间用空格隔开，输出时呈现二维形式）。</p><hr><p><strong>tcjblog.com版权所有</strong></p>]]></content>
    
    
    <categories>
      
      <category>信息复习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【扩展】用Python处理数据</title>
    <link href="/2022/10/02/%E3%80%90%E6%89%A9%E5%B1%95%E3%80%91Python%E8%AF%BE%E5%A4%96%E7%9F%A5%E8%AF%86/"/>
    <url>/2022/10/02/%E3%80%90%E6%89%A9%E5%B1%95%E3%80%91Python%E8%AF%BE%E5%A4%96%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<p><strong>1.sum(list)：</strong>对列表（list）求和。</p><p><strong>2.函数内如果没有 return 语句，则会返回 None。</strong></p><p><strong>3.函数的返回值如果是多个（彼此间用逗号隔开），返回结果为元组。</strong></p><p><strong>4.math.pow()：</strong>返回实数。</p><p><strong>5.DataFrame中的groupby()：</strong>as_index属性默认为True，即更改主索引，此时的主索引不适用属性检索法和字典检索法。单纯的分组（未进行进一步计算）后，返回的是DataFrame对象在内存中的虚拟地址，此时的主索引适用属性检索法和字典检索法，调用后返回的是虚拟地址。</p><p><strong>6.DataFrame中的sum()：</strong>axis=0时，表示列相加（数字相加、字符串相接）；axis=1时，表示行相加（同上）。默认axis=0。sum()与groupby()搭配使用时，不支持axis属性。不改变原对象。</p><p><strong>7.DataFrame中的mean()：</strong>返回的对象中的数字为实型，且所有数值小数位数保持一致（不足补0）。axis=0时，表示对列求平均；axis=1时，表示对行求平均。默认axis=0。所有计算仅限于数字之间。mean()与groupby()搭配使用时，不支持axis属性。不改变原对象。</p><p><strong>8.DataFrame中的max()：</strong>返回各属性下的最大值（数字比大小，字符串比编码值）。max()与groupby()搭配使用时，不会对作为分组依据的属性产生效果。不改变原对象。</p><p><strong>9.DataFrame中的min()：</strong>同max()。</p><p><strong>10.DataFrame中的sort_values()：</strong>‘DataFrameGroupBy’对象没有这个属性，即分组后的对象不能使用这个属性。使用此函数时需要指明属性。ascending=False时，表示降序排序；ascending=True时，表示升序排序。默认ascending=True。axis=0时，表示列排序；axis=1时，表示行排序。默认axis=0。inplace=True时，改变原对象，并返回None；inplace=False时，不改变原对象，并返回一个新对象。默认inplace=False。</p><p><strong>11.DataFrame中的drop()：</strong>axis=1时，表示删除列，此时需要指定属性；axis=0时，表示删除行，此时需要指定索引。默认axis=0。inplace=True时，改变原对象，并返回None；inplace=False时，不改变原对象，并返回一个新对象。默认inplace=False。</p><p><strong>12.DataFrame中的insert(loc,column,value)：</strong>改变原对象，并返回None。</p><p>loc是一个整数，它是我们要插入新列的列的位置。这将使该位置上的现有列向右移动。<br>column是一个字符串，它是要插入的列的名称。<br>value是要插入的值。它可以是int，string，float或任何东西，甚至可以是series值和列表。仅提供一个值将为所有行设置相同的值。</p><p><strong>13.DataFrame中的count()：</strong>axis=0时，表示统计列；axis=1时，表示统计行。默认axis=0。不改变原对象，并返回一个新对象。</p><hr><p><strong>tcjblog.com版权所有</strong></p>]]></content>
    
    
    <categories>
      
      <category>信息复习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>立稳固之基，求创新之变</title>
    <link href="/2022/10/02/%E7%AB%8B%E7%A8%B3%E5%9B%BA%E4%B9%8B%E5%9F%BA%EF%BC%8C%E6%B1%82%E5%88%9B%E6%96%B0%E4%B9%8B%E5%8F%98/"/>
    <url>/2022/10/02/%E7%AB%8B%E7%A8%B3%E5%9B%BA%E4%B9%8B%E5%9F%BA%EF%BC%8C%E6%B1%82%E5%88%9B%E6%96%B0%E4%B9%8B%E5%8F%98/</url>
    
    <content type="html"><![CDATA[<p>子曰：”无欲速，无见小利。欲速则不达，见小利则大事不成。“这句话的大致意思是：不求快，不贪求小利。求快反而达不到目的，贪求小利就耽误了大事。在当今快节奏的社会背景下，很多人都急于求成，力图”快“。但是，”急于求成“往往会导致”事与愿违“！依我拙见，我们要立稳固之基，求创新之变。</p><p>脚踏实地，稳固基础，方可扎牢全局之根。1956年4月，中华人民共和国航空工业委员会正式成立，这标志着中国的航天事业创业的开始。从此，中国的航天人便开始了一场长跑接力赛。从昔日的高攀美国不起，到现在对美国申请爱搭不理。中国在这之间都经历了什么？1956年10月15日，聂荣臻副总理就发展中国导弹事业向中央报告，提出对导弹的研究采取“自力更生为主，力争外援和利用外国已有的科学成果”的方针。十七日，中央批准了这个报告。这表明，中国在一开始就下定决心为中国在未来航天事业的发展打好基础。历史证明，中国当年走“自力更生”的道路的决定是正确的，这为其在之后的发展打好了基础。由此可见，基础就像是参天大树的“根基”，有了“它”，大树才会茁壮成长。</p><p>然而，只是一味的追求基础就能让一颗大树长成参天大树了吗？答案是否定的。若是一味的追求基础，没有去尝试创新的做法的话，大树就永远不会突破它的高度上限。在当今世界，创新的地位已经达到了前所未有之高。创新发展甚至被规划为中国“五大发展理念”之一。</p><p>创新是历史进步的动力、时代发展的关键。很多人认为创新就是不走寻常路，其实不然，创新不仅需要有有别于常规的看法，还要求这种看法能产生益处，否则就是“倒退”。创新创造出了新事物，新事物是具有强大生命力且拥有远大发展前途的事物，它是符合历史发展的客观规律且顺应时代发展的要求的。不仅如此，它还反映了人民群众的利益和要求，并得到了人民群众的广泛支持。由此可得，创新就像是参天大树的“催化剂”，有了“它”，大树才会一次次地突破上限，直冲云霄。</p><p>所以，基础是事物发展的“根基”，创新是事物发展的“催化剂”，它们是一个统一的整体。</p><p>揆诸时下，身为新时代的新青年，在这个充满着机遇与挑战的时代里，我们应该立稳固之基，求创新之变。正如老子所言：“合抱之木，生于毫末：九层之台，起于垒土；千里之行，始于足下。”和爱因斯坦所言：“有了精神的实验和观测作为研究的依据，想像力便成为自然科学理论的设计师。”</p>]]></content>
    
    
    
    <tags>
      
      <tag>议论文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>立足当下，展望未来</title>
    <link href="/2022/10/01/%E7%AB%8B%E8%B6%B3%E5%BD%93%E4%B8%8B%EF%BC%8C%E5%B1%95%E6%9C%9B%E6%9C%AA%E6%9D%A5/"/>
    <url>/2022/10/01/%E7%AB%8B%E8%B6%B3%E5%BD%93%E4%B8%8B%EF%BC%8C%E5%B1%95%E6%9C%9B%E6%9C%AA%E6%9D%A5/</url>
    
    <content type="html"><![CDATA[<p>“不积跬步，无以至千里；不积小流，无以成江海”。早在几千年前，伟大的荀子就提出了做事要立足当下，从小事做起的观点。比荀子晚出生一千年的欧阳修在《伶官传序》中提到：忧劳可以兴国，逸豫可以亡身。直到今天，这两句话所蕴含的哲理依然可以指导我们如何为人处世。依我拙见，我们要立足当下，展望未来。</p><p>当下是长远的基础，从当下做起，脚踏实地，埋头苦干，方可实现稳步发展。水花的精灵——奥运跳水冠军全红婵在7岁时就进入了湛江市体校，从此便开始了她的体育生涯。刚开始，她还是个“旱鸭子”，但她很努力，不管是在炎热的夏天还是在寒冷的冬天，她都”度年如日“般地坚持了下来。“即便是如此艰苦的环境，全红婵在训练中的刻苦、认真慢慢表现出来了”，陈华明说。诚然，她具有超出常人的天赋，但是，她的成功离不开她一天天，一年年的刻苦训练。由此可得，“立足当下，脚踏实地”就像是最终汇聚成大海的一条条支流。</p><p>然而，只是一味的立足当下，埋头苦干就能够有所成就吗？答案是否定的。如果只是一味的立足当下，那么你会失去前进的方向，迷失在茫茫人海中。因为长远是当下的航灯，能够指导人们向自己的目标发展，所以，我们要展望未来。</p><p>运用前瞻性思维，合理规划未来，方可沿着正确的路前进。在上个世纪30年代，美国的贝尔实验室就开展了在当时看来还十分遥远的半导体器件的开发。经过十几年的努力，巴丁和肖克利等人终于发明了晶体管，并使电子三极管过渡到了晶体三极管。贝尔实验室之所以闻名于世且始终处于领跑地位，其中的一个原因就是他们有长远的规划。由此可见，“未雨绸缪，展望未来”就像是指明道路的航灯。</p><p>所以，“立足当下”和“展望未来”既不是对立的，也不是“零和博弈”，而是前者是后者的基础，后者是前者的指导的关系。</p><p>揆诸时下，身为新时代的新青年，在这个充满着机遇与挑战的时代里，我们应该立足当下，脚踏实地，同时还要未雨绸缪，展望未来。正如习总书记所言：“未来属于青年，希望寄予青年。”</p>]]></content>
    
    
    
    <tags>
      
      <tag>议论文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【卒】我的智能助理小T</title>
    <link href="/2022/10/01/%E3%80%90%E5%8D%92%E3%80%91%E6%88%91%E7%9A%84%E6%99%BA%E8%83%BD%E5%8A%A9%E7%90%86%E5%B0%8FT/"/>
    <url>/2022/10/01/%E3%80%90%E5%8D%92%E3%80%91%E6%88%91%E7%9A%84%E6%99%BA%E8%83%BD%E5%8A%A9%E7%90%86%E5%B0%8FT/</url>
    
    <content type="html"><![CDATA[<p>正如标题所述，T-Ti项目永久性地破产了。泰戈尔曾说：“天空没有留下翅膀的痕迹，但我已飞过。”虽然，我没有实现这个疯狂的计划，但是，它却记载了逝去的青春。</p><p>T-Ti项目于2021年初启动，并于2022年7月初宣告失败。</p><p>整个T-Ti智能飞行机器人可以分为常规无人机部分和智能扩展部分。</p><h5 id="常规无人机部分："><a href="#常规无人机部分：" class="headerlink" title="常规无人机部分："></a>常规无人机部分：</h5><p><img src="/images/%E5%B0%8FT/%E5%B0%8FT%E4%B8%80%E4%BB%A3.jpg" alt="小T一代"></p><p>和一般的飞行器一样，它有基本的飞行功能和定位功能。</p><h5 id="智能扩展部分："><a href="#智能扩展部分：" class="headerlink" title="智能扩展部分："></a>智能扩展部分：</h5><p><img src="/images/%E5%B0%8FT/%E6%A0%91%E8%8E%93%E6%B4%BE4B.jpg" alt="树莓派4B"></p><p>在常规无人机的基础上再加一个开发板，这样就可以实现智能。</p><p>当然，光有硬件是不行的，有了软件的加持后，才能实现真正意义上的智能。</p><p><img src="/images/%E5%B0%8FT/TICS%E7%99%BB%E5%BD%95.jpg" alt="TICS登录"></p><p><img src="/images/%E5%B0%8FT/TICS.jpg" alt="TICS"></p><p>T-Ti智能控制系统（简写TICS）（见上图）运行在开发板上，既可以接受外部指令，也可以实现机器人的自我控制（TICS+传感器）。</p><p><img src="/images/%E5%B0%8FT/micro_bit.jpg" alt="micro_bit"></p><p>用 micro:bit 开发板（见上图）来统一管理传感器。</p><p><img src="/images/%E5%B0%8FT/%E6%9C%BA%E5%99%A8%E4%BA%BA%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3.jpg" alt="机器人使用文档"></p><p>诚然，我启动这个项目的初衷是美好的，但是，这显然超出了我的能力范围。所以，小T最终还是飞走了~~</p>]]></content>
    
    
    <categories>
      
      <category>T-Ti项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>个人项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>公平的评判标准是什么？</title>
    <link href="/2022/09/11/%E5%85%AC%E5%B9%B3%E7%9A%84%E8%AF%84%E5%88%A4%E6%A0%87%E5%87%86%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <url>/2022/09/11/%E5%85%AC%E5%B9%B3%E7%9A%84%E8%AF%84%E5%88%A4%E6%A0%87%E5%87%86%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>什么才是公平？如果你去网上搜索“公平”二字，搜索引擎会给你很多答案。用两个字来概括它们中的大多数答案就是“平均”，即大家都是平等的。但，这可能吗？</p><p>假如有一个强奸犯出来发声说：“现在是文明社会，人人平等。所以我不该被视为犯人，我和你们是一样的。”当然，没有人会相信他的话，这就告诉我们一个道理：公平是有前提的，否则就是平均。</p><p>富人往往可以优先获得各类资源，比如新冠检测（美国）、高等教育、医疗救助等。对此，不少国内媒体批评了美国的做法，发表了诸如《美国检测“富人优先”惹争议，特朗普：可能这就是人生吧》的文章。因为穷人比富人多得多，且在社会中占了绝大多数。所以，这类文章常常能获得广泛的响应。大多数人认为，检测不应该服务于有钱人，而应该服务于病人。但是，这种符合大多数人的意愿的做法真的能推动社会发展吗？我想不是的，否则每个地区或国家都能够长足发展了。</p><p>那穷人怎么办？社会的公平在哪？公平作为一个道德上的概念，理应在约束人的行为中助力社会的发展。因此，只要有利于社会发展的做法就都是公平的。从这个角度看问题，“富人优先”就是公平的。有人可能会有疑问，如果富人可以优先得到医治，那穷人难道得忍着病痛等着吗？这会不会太残忍了？ 而且“富人优先”怎么就有利于社会发展了呢？其实，排队看病在全世界都是普遍存在的。这是因为当今生产力低下产生的，到了共产主义社会就不会再有这个问题。你当然也可以花高额的诊金去私人诊所快速得到救助（这其实就是“富人优先”）。试想一下，你在外面拼死拼活地干活，结果到头来获得的资源与一位在家“躺尸”的人没两样，那你为什么还要努力地劳动呢？所以“富人优先”可以调动人们的积极性，快速积累社会的财富。</p><p>推广到其他方面，在九年义务教育结束后，不同的人进入了不同的学校学习，这些学校有好有坏，但这同样是公平的。所以，穷人能做的，或者说是在当前的竞争规则下相对弱势的人能做的，就是不断提高自身的人力资本，且这样做会在无形中增加社会的总财富。</p><p><span class="label label-primary"><font size = "3">问：为什么都说穷人的孩子早当家？</font></span></p><p><span class="label label-primary"><font size = "3">答：因为穷人的孩子从小就生活在竞争压力大的环境下，并因此练就了很多本领。相对而言，富人的孩子的童年就非常的安逸了，所以他们也不会去为了生活学习技能。当然，在一些家教比较不错的家庭里，孩子也是会很有出息的。</font></span></p>]]></content>
    
    
    
    <tags>
      
      <tag>经济学思维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>事与愿违之最低工资法</title>
    <link href="/2022/09/09/%E4%BA%8B%E4%B8%8E%E6%84%BF%E8%BF%9D%E4%B9%8B%E6%9C%80%E4%BD%8E%E5%B7%A5%E8%B5%84%E6%B3%95/"/>
    <url>/2022/09/09/%E4%BA%8B%E4%B8%8E%E6%84%BF%E8%BF%9D%E4%B9%8B%E6%9C%80%E4%BD%8E%E5%B7%A5%E8%B5%84%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>最低工资法的实施在表面上好像是保护了低收入群体的利益，而低收入群体在社会中的占比是最大的，由此，该法规便有了广泛的群众基础。但实际上，最低工资法带给这类人的利远小于弊。</p><p>如果工资是能够人为规定的，那么就跟不用耕耘就能有所收获是一个道理了，可见这是非常荒谬的。只有依靠市场来决定人的工资才能让社会财富累积。</p><p>那么通过法律来规定人的工资会带来什么影响？</p><p>首先，资本家必须支付最低工资法规定的最低工资，否则就是违法的。现在有甲和乙两个工人，甲的工作能力比乙的强，由市场来决定他们的工资的话，甲值110元，乙只值70元。而现在的最低工资标准是100元，请问，资本家会倾向于雇佣哪位工人呢？显然他会雇佣甲，而不会去白白地浪费30元。这就让工作能力差的劳动力直接失去了工作机会。最低工资法直接剥夺了他与比他更强的劳动力竞争的强有力的武器——工资。</p><p>其次，资本家创业的成本会变高。他本来可以雇佣低价劳动力做些小生意，但因为最低工资法的实施，导致他不得不雇佣价格更高的劳动力，这就让他对一些小事业敬而远之了。</p><p>综上，最低工资法只不过是用失业代替了超低工资并给企业增加了运营成本的事与愿违的法律。</p>]]></content>
    
    
    
    <tags>
      
      <tag>经济学思维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>布袋比塑料袋更不环保！</title>
    <link href="/2022/09/09/%E5%B8%83%E8%A2%8B%E6%AF%94%E5%A1%91%E6%96%99%E8%A2%8B%E6%9B%B4%E4%B8%8D%E7%8E%AF%E4%BF%9D%EF%BC%81/"/>
    <url>/2022/09/09/%E5%B8%83%E8%A2%8B%E6%AF%94%E5%A1%91%E6%96%99%E8%A2%8B%E6%9B%B4%E4%B8%8D%E7%8E%AF%E4%BF%9D%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<p>还记得在几年前，人们普遍认为塑料袋应该被禁止，并提倡使用布袋子等非一次性物品。但是这种观点随着时代的进步逐渐淡化出了人们的视线。在如今的各大超市内，塑料袋依然是首选的购物袋。</p><p>为什么之前的人们认为布袋比塑料袋更环保呢？笔者听到的最多的答案就是布袋可以重复使用，而塑料袋用一次就丢一次。</p><p>事实证明，这种观点是错误的。其实，仅仅是生产这一个环节，布袋对环境的破坏就比塑料袋要大得多了。因为生产布袋的成本更高，成本更高就意味着消耗的资源越多。同时，布袋在重复使用的过程中也会消耗很多资源——清洁剂等。丹麦环境和食品部（Ministry of Environment and Food）2018年的一项研究发现，一个有机棉手提袋需要使用2万次才能真正抵消其生产过程中对环境的总体影响。这就相当于要持续几十年使用同一个手提袋。所以，与其为了保护环境而去呕心沥血并几十年如一日地坚持使用布袋子，还不如重复使用塑料袋。</p><p>当然，在某些场景下，使用布袋是更明智的选择。比如，一位女中学生外出逛街时，拎着一个帆布袋比拎着一个塑料袋给人的第一印象更好。环境破坏是不可逆的，给人的第一印象也是不可逆的，这时候就需要在两者之间抉择了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>经济学思维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>借机挣钱有别于趁火打劫</title>
    <link href="/2022/08/28/%E5%80%9F%E6%9C%BA%E6%8C%A3%E9%92%B1%E6%9C%89%E5%88%AB%E4%BA%8E%E8%B6%81%E7%81%AB%E6%89%93%E5%8A%AB/"/>
    <url>/2022/08/28/%E5%80%9F%E6%9C%BA%E6%8C%A3%E9%92%B1%E6%9C%89%E5%88%AB%E4%BA%8E%E8%B6%81%E7%81%AB%E6%89%93%E5%8A%AB/</url>
    
    <content type="html"><![CDATA[<p>最近笔者在看《薛兆丰经济学讲义》，收获颇丰，特写此博文以记录所得。——前言</p><p>如果你身处茫茫大海中，在你的身边只有一块小木筏。此时有一艘渔船路过，表示可以把你带回家，但是需要支付1万元的报酬。请问，你是否同意？答案是肯定的，就算那人开价10万元、100万元，你也会同意。但是你回到家后拒绝支付报酬，并把他告上了法庭。请问，法官会怎么判？如果这件事被放到了网络上，那么渔船的主人怕是会被喷惨了。有人会说他这是趁火打劫的行为。</p><p>但是请仔细想想，让你在大海中漂流的人并不是他，他只是给了你一个活下去的机会。</p><p>现在假如你是渔船的主人，你又会怎么处理这件事呢？在把他救起来后，你还要时刻提防着眼前的人是否会连人带船一起“照单全收”了。如果没有这1万元的报酬，你又怎么会冒着如此巨大的风险来救他呢？假如救人收钱是违法的话，你可能会装作看不见而且就这样走了。所以，这反倒是对他不利的。</p><p>但为什么人们还是会唾弃救人要收钱的这种行为呢？这其实是一件“事与愿违”的事。人们以为免费救人就能让更多的人获救，其实不然。一旦医院的急救服务免费之后，人们就会变得不爱惜自己的身体、不遵守交通规则，甚至频频打架斗殴。这时社会的总资源反而被白白地浪费掉了，那些真正需要救助的人却不能获救。</p>]]></content>
    
    
    
    <tags>
      
      <tag>经济学思维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一大桶金！</title>
    <link href="/2022/08/25/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E5%A4%A7%E6%A1%B6%E9%87%91%EF%BC%81/"/>
    <url>/2022/08/25/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E5%A4%A7%E6%A1%B6%E9%87%91%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<p>为什么说它“大”呢？是因为这笔钱可以顶得上笔者三天的伙食费。其次，这又是通过笔者所热爱的计算机知识赚来的。当然，这跟笔者最近去书城看数字营销的书也有关。</p><p>就在我写这篇博文时，我爸在一旁跟我说着他最近的生意情况。令我惊奇的是，一个上了失信名单的人竟也会乖乖的付租金，不知道是因为他想改过自新了还是因为我爸的交谈手段高超。不过，我家的主要收入还是来自这些经常拖欠租金的人。深知赚钱不易的我从小就想通过自己的双手去耕耘出一片属于自己的天地。</p><p> 生存显然不是问题，问题是怎么生活。</p><p>笔者起初想通过维修和组装电脑来获利，毕竟这对笔者来说是轻而易举的事。虽然现在第一桶金不是因此得到的，但是此方法依然被笔者认为是最有前途的。然后，我想介绍第二种途径，毕竟这才是让笔者赚到了第一桶金的法子。笔者先是在微信列表里寻找目标对象，然后再推销个人博客。当然，目标客户购买个人博客建设服务绝对不是因为你推销的多么好，而是因为他确实需要个人博客所带来的好处。聪明的小伙伴可能会有疑问，那目标对象自己就会来找你了，用得着你去找他们吗？确实，但前提是你得让他们知道有哪些好处。当有了第一个成功的案例后，你就可以借此宣传你的商品了。千万不能抱有赚一笔就跑的想法，我们一定要把服务做好，才能带来更多的客户。</p><p>更多的营销技巧等我高中毕业后再讨论吧。    </p>]]></content>
    
    
    
    <tags>
      
      <tag>成长</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>怀疑之中，坚持信仰</title>
    <link href="/2022/08/23/%E6%80%80%E7%96%91%E4%B9%8B%E4%B8%AD%EF%BC%8C%E5%9D%9A%E6%8C%81%E4%BF%A1%E4%BB%B0/"/>
    <url>/2022/08/23/%E6%80%80%E7%96%91%E4%B9%8B%E4%B8%AD%EF%BC%8C%E5%9D%9A%E6%8C%81%E4%BF%A1%E4%BB%B0/</url>
    
    <content type="html"><![CDATA[<p>在从中学过渡到大学的阶段中，越来越多的人开始怀疑自己曾经的信仰。这主要是因为人对事物的认识会不断的深化，尤其是这个时期的学生。我以为，怀疑是发现真理的基础，怀疑之上再是信仰。</p><p>怀疑既不是简单地批判其他人的观点，也不是批判所有与自己认知相悖的想法，而是从实际出发，客观地评价某一事物。俗语说：“怀疑的种子一旦种下就会生根发芽。”我们缺的不是怀疑的精神，相反地，我们缺的是如何正确怀疑的智慧。笛卡尔说过：“如果你想成为一个真正的真理寻求者，在你的一生中至少应该有一个时期，要对一切事物都尽量怀疑。”有一个人做到了这一点，并且他也成功了。这个人就是哥白尼。在中世纪的欧洲，地心说十分盛行，但是哥白尼发现了托勒密的错误结论和科学方法之间的矛盾，于是便提出了日心说。当时罗马天主教廷认为他的日心说违反圣经，哥白尼仍坚信日心说，并认为日心说与其并无矛盾。写出了《天体运行论》的哥白尼，他自始至终都是一个虔诚的天主教徒，可他用科学的观察否定了天主教会毫无根据却又影响深广的旧有知识。</p><p>怀疑是不可避免的，与其排斥、孤立它，不如接受它，让它陪你整理人生路上的真理。有人说：“怀疑一切是现代思想者应备的马克思主义科学精神，只有像马克思那样，怀疑所有人的共识、怀疑所有的思想家和所有的政党所信奉的理论，才可能发现前所未知的真理。”而且，这种怀疑是有科学根据的，疑邻盗斧式的怀疑就难免会发生致命的错误。菲·贝利曾说：“哪里有怀疑，哪里就有真理——怀疑是真理的影子。”诚然，有怀疑不一定有真理，但真理一定来自怀疑。</p><p>然而怀疑一切，就足以健康快乐的成长了吗？答案显然是否定的。只是怀疑，我们容易陷入无穷无尽的无底洞，无法自拔。</p><p>相反，坚持信仰可以让我们明确前进的道路，并给予我们在困境中绝处逢生的力量。在朝鲜战争中，来自中国的志愿军就秉着邪不胜正的信念艰苦作战，并最终获得了胜利。坚持信仰，我们更不容易在人生的路上迷失方向。</p><p>怀疑和信仰并不是对立的两个方面，相反，它们相辅相成、相互促进。怀疑之后，得出真理，才能有正确的信仰。反过来，信仰又督促人们继续怀疑，持续地追求真理。在面对人生道路上出现的各种各样的事物时，我们既要保持怀疑的态度——不盲目接受，也要有信仰——相信这个世界。</p><p>身为新时代的青年，我们不仅要敢于怀疑迷信的宗教思想和老旧的封建大家长制，更要相信在中共的带领下，风骨必然胜过媚骨、真理必然战胜强权、正义必然打败邪恶。</p>]]></content>
    
    
    
    <tags>
      
      <tag>议论文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>00后如何赶上互联网3.0时代的浪潮？</title>
    <link href="/2022/08/07/00%E5%90%8E%E5%A6%82%E4%BD%95%E8%B5%B6%E4%B8%8A%E4%BA%92%E8%81%94%E7%BD%913.0%E6%97%B6%E4%BB%A3%E7%9A%84%E6%B5%AA%E6%BD%AE%EF%BC%9F/"/>
    <url>/2022/08/07/00%E5%90%8E%E5%A6%82%E4%BD%95%E8%B5%B6%E4%B8%8A%E4%BA%92%E8%81%94%E7%BD%913.0%E6%97%B6%E4%BB%A3%E7%9A%84%E6%B5%AA%E6%BD%AE%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>最近我离开村子去到市里的书城看了两天的书——是一些关于数字营销的书。笔者起初是打着运营个人博客的目的去的，但是笔者的收获却远大于笔者的预期。书城内有关计算机领域的书有点少，比笔者自己有的书没多多少，有点可惜。令笔者惊奇的是，这一些书中连专门讲神经网络算法的书都有，却没有一本关于后端开发的书。可见呀，深度学习迎来了它的高潮期。书虽少，但是涉及的面还是挺广的。笔者随手拿了几本回到位子上去看——这些书是有关黑客技术和计算机硬件的。笔者一直想找之前看到的介绍暗网的书，但是书架上仅有寥寥几本书，一眼看穿了也没看到。上一篇博文的标题是《谢谢你教我长大》，身为一名准高三学生，在经历了青春期后也开始慢慢的蜕去幼稚的外壳了。当然了，青春期的经历也是异常曲折的。其中的一些给了笔者重创，甚至让笔者产生了自杀和杀她的念头。好在笔者没有这么干，而是坚强的挺了过来。距离个人博客开设以来也有610个日子了，不难想象，一个人维护和发展网站既需要懂技术的知识，也需要懂运营的知识是多么的艰难。虽然有现成的技术框架和运营框架，但是也依然困难。卡耐基说过：“人对自尊感的渴望与他们对食物和睡眠的渴望是一样的。”笔者发现：美好的环境会让自己停滞不前，而打击却能让自己奋发图强。刚好青春期的经历激发了笔者对自尊感的强烈欲望，发展个人博客既满足了笔者当下的自尊感，也为以后的自己积累了物质资本，何乐而不为呢？作为一名计算机爱好者，虽然是从计算机硬件起家的，但是也没少学软件的知识。对于那些笔者厌恶的人，笔者也曾想过用有关计算机的方式进行报复，例如人肉搜索和网络暴力。笔者虽然不畏惧报复，并且愿意为此承担一切责任，但是也不喜欢报复。所以上述手段终究也只是在自己试验后就被抛掷脑后了。如果有必要，我依然会用上述手段来保护自己。本篇博文是对上篇博文的拓展。——前言</p><p>最早的互联网浪潮是从1995年开始的，那是70后的事；随即而来的浪潮是从2005年开始的，那是80后的事；而00后要把握的正是第三次互联网浪潮带来的机遇。浙江省的高中信息教科书在笔者这一届也迎来了大换代：舍弃的是陈旧的网页设计、VB编程语言等知识，取而代之的是大数据处理、Python编程语言等时代前列的知识。这足以证明新时代互联网的浪潮已然到来，并且随之带来了新的机遇与挑战。科技无疑是当今时代先进生产力的代表，而计算机技术又是众多科技中的先锋。笔者不主张每个人都投入到发展科技的行列里来，只是相比较之下，科技行业的从事者可能会获得更高的收益。当然，随着越来越多的人涌入进来，收益和投入比会渐渐减小，但绝不是现在。</p><p>要想乘风破浪、脱颖而出绝对不是靠动动嘴皮子就能实现的。他需要有坚定的意志——屡战屡败、屡败屡战，但也不是一根筋——一股脑地向前冲、不计得失，他同样也需要敏锐的眼光——分析出时代趋势，智慧的大脑——高效率地做成大部分事。其实这同样也是其它行业从事者所需要的。读者可以关注Web3.0下的新兴产业——区块链、物联网和云计算等。</p>]]></content>
    
    
    
    <tags>
      
      <tag>互联网</tag>
      
      <tag>成长</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>谢谢你教我长大</title>
    <link href="/2022/07/25/%E8%B0%A2%E8%B0%A2%E4%BD%A0%E6%95%99%E6%88%91%E9%95%BF%E5%A4%A7/"/>
    <url>/2022/07/25/%E8%B0%A2%E8%B0%A2%E4%BD%A0%E6%95%99%E6%88%91%E9%95%BF%E5%A4%A7/</url>
    
    <content type="html"><![CDATA[<p>“人生已过17载。”路翁见吾言之而问曰：“是甚么人？竟有如此觉悟！”我回答道：“本村靓仔。”路翁见状而走，留我一人于风中。</p><p>我坐上小黄驴，扭转钥匙，转动把手，穿梭在来往的车流中。耳机里播放着：“无畏风雨，别忘记还有我站在这里，我只想做你的太阳 你的太阳······”，我突然想起了5个月前自己倾情写下的无题诗，于是便泪涕俱下。我继续穿梭在茫茫人海中，任狂风尽情肆虐我稚嫩的脸颊。不时有雨滴从天而降地砸在我裸露在外的肌肤上，仿佛是在驱逐我这个没带雨具的外来者。 </p><p>我加快车速，希望能尽快穿过雨区。不知不觉地，我来到了树荫底下。这里一点也不安静，到处都是喧闹声。我带着好奇心向人群走去，发现是一群悠闲的老头老太太在斗地主，旁边还有不少看客。我也沉浸在其中，为他们在牌局上大杀四方的“英姿”所折服。直到一声歇斯底里的叫喊声打破了这其乐融融的局面，我才意识到他们其实是在赌博。</p><p>我赶忙离开这是非之地，骑着我的小黄驴，继续向前行。忽然，一个脸涂红胭脂、身穿石榴裙、肩挎小皮包、脚踩马蹄跟的女士从我眼前一闪而过。我连忙追上去，问她：“你好！你有微信吗？”她回答道：“啊。没有微信，但是有QQ。”话音刚落，她就亮出了QQ的二维码。随后，她便消失在了我的视野里。</p><p>雨越下越大，肆无忌惮地吞噬着路上的行人。此时的我全身无一处是干的。我才感觉到孤独，觉得自己像是一艘无帆的船，徘徊在风口浪尖，随波逐流。带着沉重的身体，我快步走进躲雨的亭子。我从未如此平静，也许是因为现在的我只能躲在庇护所下，而干不了其它的任何事。飞驰而过的跑车溅起了地上的积水，给本就躺在地上奄奄一息的小虫子带来了最后一次洗礼。亭子里躲雨的人越来越多，马上就挤不下了。后来的人只能顶着风雨寻找下一个亭子。</p><p>其实这本没什么出奇，不过是人世间常有的事，只是我之前常常闭门不出，未曾领略过这阵仗，那也就难怪了。碰巧的是，那位女士也来到了这亭子里躲雨。我终于意识到，人世间“美好”的事情之一大概就是此了。</p><p>雨中的小镇好似蒙着面纱的“猛男”，给人一种散不去的危机感，足以让陷入其中的人们无法自拔。我见雨迟迟不停，便打算冒雨前往目的地。不幸的是小黄驴进了水，跑不动了，我只能跑着去。临近终点，雨渐小，这好像老天爷跟我开了一个玩笑。不管怎样，我终究是来到了这个我朝思暮想的地方。</p><p>但是这里和我之前想象中的很不一样。可能是我糊涂了，竞幻想这里有伸手可得的东西。失望过后，我想回到出发地。不过这终究是不可能的，充其量算是一个美好的想象罢了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>暗网都有些什么？</title>
    <link href="/2022/07/16/2022-07-08-%E6%9A%97%E7%BD%91%E9%83%BD%E6%9C%89%E4%BA%9B%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <url>/2022/07/16/2022-07-08-%E6%9A%97%E7%BD%91%E9%83%BD%E6%9C%89%E4%BA%9B%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>暗网是互联网上不能被常规搜索手段搜索到并访问的网络。其具有很强的隐匿性。暗网网站的域名都是“.origin”，意为像洋葱一样被层层保护着。暗网网站能够诞生并发展至今离不开tor项目的支撑。因为有着层层保护，所以访问暗网的人基本不会留下痕迹，因此这里也就成为了犯罪者的天堂。当然，暗网中不都是非法活动。</p><p>通过对电脑进行特殊设置便可访问暗网。诸如枪、毒品等在现实世界（中国）中几乎不存在的特殊物品在此处（暗网）却随处可见。<img src="/images/dark_web/guns.png" alt="guns"></p><p><img src="/images/dark_web/drugs.png" alt="drugs"></p><p>除此之外，暗网上还出售假钞和黑客服务。</p><p><img src="/images/dark_web/%E5%81%87%E9%92%9E.png" alt="假钞"></p><p><img src="/images/dark_web/hack.png" alt="hack"></p><p>当然，有着大量站点的暗网售卖的不仅仅是上述商品和服务。其中还有不少“正规”商品。</p><p><img src="/images/dark_web/iphone.png" alt="iphone"></p><p>不过这些“正规”商品的来路就不得而知了。而且在这上面购物完全没有保障，买家支付了比特币后可能收不到货物。</p><hr><p>诸多网站，一一分析~~~</p><p><strong>1.Fish’n’Pal!（钓鱼网站）</strong></p><p>网站主营业务：售卖银行卡账户、PayPal账户、电商平台礼品卡（Amazon和Ebay）和游戏平台充值卡（PS store、Xbox和Steam）</p><p><img src="/images/dark_web/fish.png" alt="fish"></p><p><img src="/images/dark_web/fish1.png" alt="fish1"></p><p>当然，在你支付了相应的货款后，你不会收到任何所谓的低价礼品卡。</p><p><strong>2.Facebook的暗网网页</strong></p><p><img src="/images/dark_web/facebook.png" alt="facebook"></p><p><strong>3.HackTown</strong></p><p>提供黑客课程</p><p><img src="/images/dark_web/hackcourse.png" alt="hackcourse"></p><p><strong>4.社工库</strong></p><p>居然查到了自己的信息？？（细思极恐）</p><p><img src="/images/dark_web/%E7%A4%BE%E5%B7%A5%E5%BA%93.png" alt="社工库"></p><p><strong>5.纽约时报中文网</strong></p><p><img src="/images/dark_web/%E7%BA%BD%E7%BA%A6%E6%97%B6%E6%8A%A5.png" alt="纽约时报"></p><p><strong>6.TGx:Home</strong></p><p>提供盗版音乐和电影</p><p><img src="/images/dark_web/movie.png" alt="movie"></p><p><strong>7.NeinChan</strong></p><p>在线聊天室</p><p><img src="/images/dark_web/chat.png" alt="chat"></p><hr><p> 总的来说，因为暗网提供了隐匿的上网环境，所以在这里每时每刻都有非法活动发生。但是暗网不是法外之地，所以一旦暴露了行踪就会有警察找上门。本文带大家初步了解了暗网，并且不建议大家进入暗网。</p>]]></content>
    
    
    
    <tags>
      
      <tag>暗网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《告白气球》听后感</title>
    <link href="/2022/06/06/2022-06-06-%E3%80%8A%E5%91%8A%E7%99%BD%E6%B0%94%E7%90%83%E3%80%8B%E5%90%AC%E5%90%8E%E6%84%9F/"/>
    <url>/2022/06/06/2022-06-06-%E3%80%8A%E5%91%8A%E7%99%BD%E6%B0%94%E7%90%83%E3%80%8B%E5%90%AC%E5%90%8E%E6%84%9F/</url>
    
    <content type="html"><![CDATA[<p>​                                                                    塞纳河畔 左岸的咖啡</p><p>​                                                                    我手一杯 品尝你的美</p><p>​                                                                          留下唇印 的嘴</p><p>​                                                                    花店玫瑰 名字写错 谁</p><p>​                                                                    告白气球 风吹到 对街</p><p>​                                                                          微笑 在天上飞</p><p>​                                                                         你说 你有点难追</p><p>​                                                                         想让 我知难而退</p><p>​                                                                         礼物 不需挑最贵</p><p>​                                                                         只要 香榭的落叶</p><p>​                                                                       喔 营造浪漫 的约会</p><p>​                                                                        不害怕 搞砸一切</p><p>​                                                                      拥有你就拥有 全世界</p><p>​                                                                    亲爱的 爱上你 从那天起</p><p>​                                                                            甜蜜的很轻易</p><p>​                                                                    亲爱的 别任性 你的眼睛</p><p>​                                                                             在说我愿意</p><p>​                                                                      塞纳河畔 左岸的咖啡</p><p>​                                                                      我手一杯 品尝你的美</p><p>​                                                                           留下唇印的 嘴</p><p>​                                                                      花店玫瑰 名字写错谁</p><p>​                                                                      告白气球 风吹到 对街</p><p>​                                                                           微笑 在天上飞</p><p>​                                                                          你说 你有点难追</p><p>​                                                                          想让 我知难而退</p><p>​                                                                          礼物 不需挑最贵</p><p>​                                                                          只要 香榭的落叶</p><p>​                                                                        喔 营造浪漫 的约会</p><p>​                                                                          不害怕 搞砸一切</p><p>​                                                                        拥有你就拥有 全世界</p><p>​                                                                      亲爱的 爱上你 从那天起</p><p>​                                                                             甜蜜的很轻易</p><p>​                                                                     亲爱的 别任性 你的眼睛</p><p>​                                                                              在说我愿意</p><p>​                                                                      亲爱的 爱上你 恋爱日记</p><p>​                                                                              飘香水的回忆</p><p>​                                                                      一整瓶 的梦境 全都有你</p><p>​                                                                               搅拌在一起</p><p>​                                                                       亲爱的 别任性 你的眼睛</p><p>​                                                                               在说我愿意</p><hr><p>整首歌轻快、自然，给了听者一种甜蜜、愉悦的感觉，并让人们产生了对爱情的向往。</p><p>曲中的男主的表白计划并不顺利：花店里写错了女主的名字、气球也飞到了对街。但是，女主对这些却毫不在意，并表明自己只需要香榭的落叶。两个主人公由此陷入了爱情的甜蜜。</p><p>总之，这首歌拿来表白是再合适不过的。不需要唱得多么好听，意思到了就行。</p><p><a href="https://tcjblog.com/confession" target="_blank"><font color="pink">我喜欢你，请点这里！！！</font></a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>人性的弱点</title>
    <link href="/2022/06/06/2022-06-06-%E4%BA%BA%E6%80%A7%E7%9A%84%E5%BC%B1%E7%82%B9/"/>
    <url>/2022/06/06/2022-06-06-%E4%BA%BA%E6%80%A7%E7%9A%84%E5%BC%B1%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p>包括但不仅限于：</p><h5 id="1-希望被尊重"><a href="#1-希望被尊重" class="headerlink" title="1.希望被尊重"></a>1.希望被尊重</h5><p>杜威说过：“受尊重感是人类的一种潜在欲望，是人类天性中最为迫切的心理需求。”詹姆士也说过类似的话：“人的天性里有一点，就是希望自己被他人所重视。”</p><h5 id="2-不喜欢被批评"><a href="#2-不喜欢被批评" class="headerlink" title="2.不喜欢被批评"></a>2.不喜欢被批评</h5><p>大部分人在自己做错了事后只会想法推卸责任，只会指责别人。这就是人的自然天性。</p><h5 id="3-喜欢被赞美"><a href="#3-喜欢被赞美" class="headerlink" title="3.喜欢被赞美"></a>3.喜欢被赞美</h5><h5 id="4-以自我为中心"><a href="#4-以自我为中心" class="headerlink" title="4.以自我为中心"></a>4.以自我为中心</h5><p>利夫华尔特·爱默生说：“无论你使用什么样的话语，说出来的东西都是以自我为中心的。不管你用任何的言语，你所要说的，总离不开自己的种种目标。”</p><h5 id="5-为小事忧虑"><a href="#5-为小事忧虑" class="headerlink" title="5.为小事忧虑"></a>5.为小事忧虑</h5><p>我们时常面临风雨，并接受它的洗礼，从而获得新生。但是，我们却常常为生活中的种种琐事而忧虑。</p><h5 id="6-报复心理"><a href="#6-报复心理" class="headerlink" title="6.报复心理"></a>6.报复心理</h5><p>当自己的利益受到损害时，人们的内心往往会燃起仇恨的怒火，并想要敌人落到同样的下场甚至更惨。</p><h5 id="7-多疑"><a href="#7-多疑" class="headerlink" title="7.多疑"></a>7.多疑</h5><p>没有根据地怀疑别人只会害人害己。</p><h5 id="8-固执"><a href="#8-固执" class="headerlink" title="8.固执"></a>8.固执</h5><p>思想上的局限性导致人们常常只愿坚持自己已知的观点，而不愿去了解新知识并尝试着改变。</p><h5 id="9-贪婪"><a href="#9-贪婪" class="headerlink" title="9.贪婪"></a>9.贪婪</h5><p>贪婪是一种强烈而自私的欲望。</p><h5 id="10-懒惰"><a href="#10-懒惰" class="headerlink" title="10.懒惰"></a>10.懒惰</h5><p>人们倾向于一种更省力的方式解决生活上的问题，于是就有了懒惰。但是，人们会在长期的懒惰中逐渐失去生活的乐趣。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>信息复习笔记-计算机软/硬件基础</title>
    <link href="/2022/05/01/2022-04-30-%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BD%AF%E7%A1%AC%E4%BB%B6%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/05/01/2022-04-30-%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BD%AF%E7%A1%AC%E4%BB%B6%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p class="note note-warning"><font size="3" color="pink">这次我们复习计算机软硬件。</font></p><p>本笔记将会围绕组装一台计算机所需要的硬件和软件推进。笔记完结后，我们将获得一台可以正常使用的个人电脑。——前言</p><h5 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h5><p>CPU（中央处理器）如图所示</p><p><img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/CPU.png" alt="CPU"></p><p>中央处理器是计算机最核心的部件，它由运算器和控制器组成，相当于人的大脑。现代处理器芯片还包含浮点处理部件，以加快计算机执行指令的速度。</p><hr><p>主板</p><p><img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%B8%BB%E6%9D%BF.png" alt="主板"></p><p>主板是一个支撑并连接主机内各部件的平台，起到维系中央处理器（CPU）与各个部件协同工作的作用。</p><hr><p><img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.png" alt="存储器思维导图"></p><p>ROM：断电后，信息不丢失。通常在电脑主板的ROM里面固化一个基本输入/输出系统，称为<a href="https://baike.baidu.com/item/BIOS/91424">BIOS</a>（基本输入输出系统）。其主要作用是完成对系统的加电自检、系统中各功能模块的初始化、系统的基本输入/输出的驱动程序及引导操作系统。</p><p>RAM：断电后，信息丢失。RAM俗称运行内存。如下图所示。<img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%86%85%E5%AD%98%E6%9D%A1.png" alt="内存条"></p><p>硬盘：这里指的是机械硬盘。存储容量大，断电后仍然能够保留数据。如下图所示。<img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98.png" alt="机械硬盘"></p><p>SSD：容量大（一般比机械硬盘的容量小），快速读写，重量轻，能耗低，体积小。如下图所示。<img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98.png" alt="固态硬盘"></p><p>U盘：采用USB接口，即插即用，方便携带。如下图所示。</p><p><img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/U%E7%9B%98.png" alt="U盘"></p><p>高速缓冲存储器集成在CPU内。</p><p>除了上述硬件外，一台正常工作的计算机还需要显卡、散热器、输入设备、输出设备以及一个能将220V交流电转换成低压直流电的电源。</p><h5 id="二、开始组装"><a href="#二、开始组装" class="headerlink" title="二、开始组装"></a>二、开始组装</h5><p>当我们组装好了一台电脑后并激动不已的按下开机键时，我们发现还是高兴得太早了。一台正常工作的电脑可不只需要硬件，而且还需要软件。如果新组装的电脑的硬盘里没有任何<strong>系统软件（系统软件是指控制和协调计算机及外部设备，支持应用软件开发和运行的软件，负责管理计算机系统中各种独立的硬件，使得它们可以协调工作）</strong>的话，就会出现如下问题：<img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%97%A0%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.jpg" alt="无操作系统"></p><p>要解决这个问题，就必须为计算机安装操作系统。<img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F.jpg" alt="安装系统"></p><p>用系统安装U盘为这台计算机安装 Windows 10 系统。</p><p><img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AE%89%E8%A3%85%E8%BF%9B%E5%BA%A6.jpg" alt="安装进度"></p><p>进度条走到100%后就行了！</p><hr><p>现在我们离成功就差最后一步了，那就是安装自己需要用到的<strong>应用软件（应用软件是为了某种特定用途而开发的软件，可以满足用户不同领域、不同问题的应用需求）</strong>，比如微信、浏览器等。</p><hr><h5 id="拓展-：micro-bit-开发板"><a href="#拓展-：micro-bit-开发板" class="headerlink" title="拓展 ：micro:bit 开发板"></a>拓展 ：micro:bit 开发板</h5><p><img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%BC%80%E5%8F%91%E6%9D%BF%E6%AD%A3%E9%9D%A2.jpg" alt="开发板正面"></p><p><img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%BC%80%E5%8F%91%E6%9D%BF%E5%8F%8D%E9%9D%A2.jpg" alt="开发板反面"></p><p>黄色的LED灯是电源指示灯。其旁边的按钮是复位按钮，用于复位内部程序。再旁边的是电池供电接口，可以用电池给它供电。开发板的正面有5x5的LED阵列和两个按钮。我们可以通过编程来控制它们，从而实现一些有意思的功能。</p><h6 id="实践：显示文字"><a href="#实践：显示文字" class="headerlink" title="实践：显示文字"></a>实践：显示文字</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> microbit <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>: <span class="hljs-comment"># 无限次循环</span><br>    display.scroll(<span class="hljs-string">&#x27;Hello World!&#x27;</span>) <span class="hljs-comment"># 滚动显示文字</span><br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> microbit <span class="hljs-keyword">import</span> *<br><br>display.scroll(<span class="hljs-string">&#x27;Hello World!&#x27;</span>,loop = <span class="hljs-literal">True</span>) <span class="hljs-comment"># 滚动显示文字</span><br></code></pre></td></tr></table></figure><p>上面的代码实现了无限次循坏显示“Hello World!”的功能。</p><h6 id="实践：显示环境温度"><a href="#实践：显示环境温度" class="headerlink" title="实践：显示环境温度"></a>实践：显示环境温度</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> microbit <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    display.scroll(temperature()) <span class="hljs-comment"># temperature()函数用于获取板载传感器检测到的温度</span><br>    sleep(<span class="hljs-number">100</span>) <span class="hljs-comment"># 每显示完一次室温后延时0.1s再显示下一次</span><br></code></pre></td></tr></table></figure><hr><p>— 【参考资料 ——  网络文献】</p>]]></content>
    
    
    <categories>
      
      <category>信息复习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>信息复习笔记-加/解密算法</title>
    <link href="/2022/05/01/2022-04-30-%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%8A%A0%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    <url>/2022/05/01/2022-04-30-%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%8A%A0%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p class="note note-success"><font size="3" color="purple">这次我们复习加解密算法。</font></p><h5 id="一、替代加密法"><a href="#一、替代加密法" class="headerlink" title="一、替代加密法"></a>一、替代加密法</h5><p>凯撒密码是应用替代方法加密的经典例子。以下是python实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encrypt</span>():</span>  <span class="hljs-comment"># 加密算法</span><br>    p, key = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入明文（仅限小写英文字母）：&#x27;</span>), <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密钥（密钥为自然数）：&#x27;</span>))<br>    c = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(p)):<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;a&#x27;</span> &lt;= p[i] &lt;= <span class="hljs-string">&#x27;z&#x27;</span>:<br>            c += <span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(p[i]) - <span class="hljs-number">97</span> + key) % <span class="hljs-number">26</span> + <span class="hljs-number">97</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;输入有误&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;密文：&#x27;</span> + c<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decrypt</span>():</span>  <span class="hljs-comment"># 解密算法</span><br>    c, key = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密文（仅限小写英文字母）：&#x27;</span>), <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密钥（密钥为自然数）：&#x27;</span>))<br>    p = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(c)):<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;a&#x27;</span> &lt;= c[i] &lt;= <span class="hljs-string">&#x27;z&#x27;</span>:<br>            m = <span class="hljs-built_in">ord</span>(c[i]) - key<br>            <span class="hljs-keyword">if</span> m &lt; <span class="hljs-number">97</span>:<br>                m += <span class="hljs-number">26</span><br>            p += <span class="hljs-built_in">chr</span>(m)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;输入有误&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;明文：&#x27;</span> + p<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:  <span class="hljs-comment"># 主程序入口</span><br>    select = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;加密选1，解密选2：&#x27;</span>)<br>    <span class="hljs-keyword">if</span> select == <span class="hljs-string">&#x27;1&#x27;</span>:<br>        print(encrypt())<br>    <span class="hljs-keyword">elif</span> select == <span class="hljs-string">&#x27;2&#x27;</span>:<br>        print(decrypt())<br>    <span class="hljs-keyword">else</span>:<br>        print(<span class="hljs-string">&#x27;输入有误&#x27;</span>)<br></code></pre></td></tr></table></figure><h5 id="二、换位密码法"><a href="#二、换位密码法" class="headerlink" title="二、换位密码法"></a>二、换位密码法</h5><p>换位的规则有有很多，这里选取的是 前后部分先倒序再互换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encrypt</span>():</span>  <span class="hljs-comment"># 加密算法</span><br>    p, key = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入明文：&#x27;</span>), <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密钥（密钥为正整数）：&#x27;</span>))<br>    c = <span class="hljs-string">&#x27;&#x27;</span><br>    key %= <span class="hljs-built_in">len</span>(p)<br>    <span class="hljs-keyword">if</span> key == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;密文：&#x27;</span> + p<br>    s1 = p[<span class="hljs-number">0</span>:key][::-<span class="hljs-number">1</span>]<br>    s2 = p[key:<span class="hljs-built_in">len</span>(p)][::-<span class="hljs-number">1</span>]<br>    c = s2 + s1<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;密文：&#x27;</span> + c<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decrypt</span>():</span>  <span class="hljs-comment"># 解密算法</span><br>    c, key = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密文：&#x27;</span>), <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密钥（密钥为正整数）：&#x27;</span>))<br>    p = <span class="hljs-string">&#x27;&#x27;</span><br>    key = <span class="hljs-built_in">len</span>(p) - key % <span class="hljs-built_in">len</span>(c)<br>    <span class="hljs-keyword">if</span> key == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;明文：&#x27;</span> + c<br>    s1 = c[<span class="hljs-number">0</span>:key][::-<span class="hljs-number">1</span>]<br>    s2 = c[key:<span class="hljs-built_in">len</span>(c)][::-<span class="hljs-number">1</span>]<br>    p = s2 + s1<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;明文：&#x27;</span> + p<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:  <span class="hljs-comment"># 主程序入口</span><br>    select = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;加密选1，解密选2：&#x27;</span>)<br>    <span class="hljs-keyword">if</span> select == <span class="hljs-string">&#x27;1&#x27;</span>:<br>        print(encrypt())<br>    <span class="hljs-keyword">elif</span> select == <span class="hljs-string">&#x27;2&#x27;</span>:<br>        print(decrypt())<br>    <span class="hljs-keyword">else</span>:<br>        print(<span class="hljs-string">&#x27;输入有误&#x27;</span>)<br></code></pre></td></tr></table></figure><h5 id="三、简单异或法"><a href="#三、简单异或法" class="headerlink" title="三、简单异或法"></a>三、简单异或法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encrypt</span>():</span>  <span class="hljs-comment"># 加密算法</span><br>    p, key = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入明文：&#x27;</span>), <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密钥（密钥为二进制数）：&#x27;</span>)<br>    c = []  <span class="hljs-comment"># 存放密文</span><br>    l = []  <span class="hljs-comment"># 存放单个明文字符的二进制数</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(p)):<br>        l.append(<span class="hljs-built_in">bin</span>(<span class="hljs-built_in">ord</span>(p[i])).replace(<span class="hljs-string">&#x27;0b&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>))  <span class="hljs-comment"># 将单个明文字符转换为二进制数</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(p)):<br>        x = <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-comment"># 存放单个明文字符的二进制密文</span><br>        lenkey, lenpb = <span class="hljs-built_in">len</span>(key), <span class="hljs-built_in">len</span>(l[i])<br>        <span class="hljs-keyword">if</span> lenkey &lt; lenpb:<br>            key += (lenpb - lenkey) * <span class="hljs-string">&#x27;0&#x27;</span>  <span class="hljs-comment"># 密钥位数不够的话补&#x27;0&#x27;</span><br>        <span class="hljs-keyword">elif</span> lenkey &gt; lenpb:<br>            key = key[<span class="hljs-number">0</span>:lenpb]  <span class="hljs-comment"># 密钥位数过多，舍去多余的</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(lenpb):<br>            x += <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(l[i][j]) ^ <span class="hljs-built_in">int</span>(key[j]))<br>        c.append(x)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;密文：&#x27;</span> + <span class="hljs-string">&#x27;&#x27;</span>.join(c)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decrypt</span>():</span>  <span class="hljs-comment"># 解密算法</span><br>    c, key, length = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密文：&#x27;</span>), <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密钥（密钥为二进制数）：&#x27;</span>), <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密文内含字符数：&#x27;</span>))<br>    p = []  <span class="hljs-comment"># 存放明文</span><br>    l = []  <span class="hljs-comment"># 存放单个密文的二进制数</span><br>    s = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length):  <span class="hljs-comment"># 切割二进制密文</span><br>        m = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入第&#x27;</span> + <span class="hljs-built_in">str</span>(i + <span class="hljs-number">1</span>) + <span class="hljs-string">&#x27;个密文二进制数的长度：&#x27;</span>))<br>        l.append(c[s: s + m])<br>        s += m<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length):<br>        x = <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-comment"># 存放单个密文字符的二进制明文</span><br>        lenkey, lencb = <span class="hljs-built_in">len</span>(key), <span class="hljs-built_in">len</span>(l[i])<br>        <span class="hljs-keyword">if</span> lenkey &lt; lencb:<br>            key += (lencb - lenkey) * <span class="hljs-string">&#x27;0&#x27;</span>  <span class="hljs-comment"># 密钥位数不够的话补&#x27;0&#x27;</span><br>        <span class="hljs-keyword">elif</span> lenkey &gt; lencb:<br>            key = key[<span class="hljs-number">0</span>:lencb]  <span class="hljs-comment"># 密钥位数过多，舍去多余的</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(lencb):<br>            x += <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(l[i][j]) ^ <span class="hljs-built_in">int</span>(key[j]))<br>        p.append(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(x, <span class="hljs-number">2</span>)))<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;明文：&#x27;</span> + <span class="hljs-string">&#x27;&#x27;</span>.join(p)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:  <span class="hljs-comment"># 主程序入口</span><br>    select = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;加密选1，解密选2：&#x27;</span>)<br>    <span class="hljs-keyword">if</span> select == <span class="hljs-string">&#x27;1&#x27;</span>:<br>        print(encrypt())<br>    <span class="hljs-keyword">elif</span> select == <span class="hljs-string">&#x27;2&#x27;</span>:<br>        print(decrypt())<br>    <span class="hljs-keyword">else</span>:<br>        print(<span class="hljs-string">&#x27;输入有误&#x27;</span>)<br></code></pre></td></tr></table></figure><p>由于博主能力有限，所以虽然加密算法可以加密任何字符集的字符，但是解密算法却只能解密ASCII码集的字符。</p><p>效果如下：</p><p>加密ASCII码集字符</p><p><img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8A%A0%E5%AF%86%E7%BA%AFASCII%E7%A0%81%E9%9B%86%E5%AD%97%E7%AC%A6.png" alt="加密纯ASCII码集字符"></p><p>解密ASCII码集字符</p><p><img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%A7%A3%E5%AF%86%E7%BA%AFASCII%E7%A0%81%E9%9B%86%E5%AD%97%E7%AC%A6.png" alt="解密纯ASCII码集字符"></p><p>加密UTF-8码集和ASCII码集的字符</p><p><img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8A%A0%E5%AF%86%E6%B7%B7%E5%90%88%E5%AD%97%E7%AC%A6%E9%9B%86%E5%AD%97%E7%AC%A6.png" alt="加密混合字符集字符"></p><hr><p>— 【参考资料 —— 网络文献】</p>]]></content>
    
    
    <categories>
      
      <category>信息复习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>信息复习笔记-数据处理基础</title>
    <link href="/2022/05/01/2022-04-30-%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/05/01/2022-04-30-%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p class="note note-secondary"><font size="3" color="green">这次我们复习数据处理。</font></p>本文用到的Excel数据如下，后续不再说明。<p><img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A0%B7%E4%BE%8B%E6%95%B0%E6%8D%AE.png" alt="样例数据"></p><h5 id="一、常用的数据处理和统计分析工具"><a href="#一、常用的数据处理和统计分析工具" class="headerlink" title="一、常用的数据处理和统计分析工具"></a>一、常用的数据处理和统计分析工具</h5><p>常用的数据处理和统计分析工具有 Excel、SPSS、SAS、MATLAB 等软件，也可以通过 R、Python、Java 等计算机语言编程进行数据处理。本笔记将会复习怎么用 Excel 和 Python 处理数据。</p><h5 id="二、使用-Excel-软件进行数据计算的一般步骤"><a href="#二、使用-Excel-软件进行数据计算的一般步骤" class="headerlink" title="二、使用 Excel 软件进行数据计算的一般步骤"></a>二、使用 Excel 软件进行数据计算的一般步骤</h5><p>分析表格数据→抽象计算模型→计算→分析计算结果→描述其含义。</p><h5 id="三、数据计算"><a href="#三、数据计算" class="headerlink" title="三、数据计算"></a>三、数据计算</h5><p>在 Excel 软件中，主要有自定义公式和函数两种方式。</p><p>①自定义公式：公式是以“=”开头，由常数、函数、单元格引用和运算符（如+、-、*、/、%、^等）组成的式子。</p><p>②函数：函数是预定义的公式，通过使用参数按特定顺序或结构进行计算。常用函数有 SUM(数据区域)、AVERAGE(数据区域)、MIN(数据区域) 和 MAX(函数区域) 等。</p><p><font size="3" color="blue">解析：</font>计算博文的总字数：任取一单元格并输入公式即可</p><p><img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/1.png" alt="1"></p><p><img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/2.png" alt="2"></p><p><font size="3" color="red">注意：</font>函数计算时会自动忽略非数字类型单元格；单元格引用：连续的区域用冒号连接来表示，不连续的区域用逗号进行分隔。</p><table><thead><tr><th>类型</th><th>书写格式</th><th>举例</th></tr></thead><tbody><tr><td>连续区域</td><td>区域左上角单元格和区域右下角单元格，通过冒号连接</td><td>A8:C19</td></tr><tr><td>不连续区域</td><td>将不连续的区域通过逗号隔开</td><td>A8:C19,E8,E19</td></tr></tbody></table><h5 id="四、数据排序"><a href="#四、数据排序" class="headerlink" title="四、数据排序"></a>四、数据排序</h5><p>①数据排序分为单个关键字排序和多个关键字排序。</p><p>②排序时选择的数据区域必须是连续的。</p><p>③排序时根据条件选择有标题行或无标题行排序。</p><p><font size="3" color="blue">解析：</font>多个关键字排序，这里的数据有标题，所以在排序时选择数据包含标题，Excel 会自动忽略标题而只对数据进行排序。</p><p><img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F.png" alt="排序"></p><p>排序结果如下<img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%BB%93%E6%9E%9C.png" alt="排序结果"></p><p><font size="3" color="red">注意：</font>1.排序区域的选取原则：①只能选择一个连续区域。②避开合并单元格。③一般不能只选单列。</p><p>2.主要关键字和次要关键字的区别：①主要关键字相同才看次要关键字。②主要关键字只有一个，次要关键字可以有多个。③排序可以按列排序，也可以按行排序。④汉字可以按拼音（第一个字首字母）排序，也可以按笔画（第一个字）排序。</p><h5 id="五、数据筛选（自动筛选）"><a href="#五、数据筛选（自动筛选）" class="headerlink" title="五、数据筛选（自动筛选）"></a>五、数据筛选（自动筛选）</h5><p>筛选后的表格中显示满足条件的数据，其他数据被隐藏，筛选的范围是表格中的所有数据。数据筛选的主要方式有：①自定义筛选。②10个最大（小）的值，单位可以是项或者百分比。③多条件筛选。</p><p><font size="3" color="blue">解析：</font>筛选就是要从数据中选出满足一定条件的部分数据，可以筛选一个或多个数据列。筛选只是将不符合条件的数据隐藏，而不是删除数据。在某一列上执行筛选之后，还可以在另一列上再次执行筛选，这样，数据清单中只有同时满足两个不同的筛选条件的数据才能被显示出来。</p><p>我们尝试把未分类的博文隐藏。<img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AD%9B%E9%80%89.png" alt="筛选"></p><p>筛选结果</p><p><img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AD%9B%E9%80%89%E7%BB%93%E6%9E%9C.png" alt="筛选结果"></p><p>1.自定义筛选 选择“与”表示两个条件同时满足的数据才会显示，可以只选择一个条件</p><p><img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%AD%9B%E9%80%89.png" alt="自定义筛选"></p><p>筛选结果</p><p><img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%AD%9B%E9%80%89%E7%BB%93%E6%9E%9C.png" alt="自定义筛选结果"></p><p><font size="3" color="red">注意：</font>①筛选选择区域时包含多行。②不能包含合并的单元格。③筛选区域必须是连续的。④一般情况下不选单个单元格，若选择单个单元格执行筛选，结果产生在A1单元格中。</p><p>2.“10个最大的项”（前十项） 可根据实际需要筛选“最大”或“最小”的前“n”项或百分比数据。如果有重复项导致数据超出“n”个，则会一并都显示出来。</p><p><img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AD%9B%E9%80%89%E5%89%8D%E5%8D%81%E4%B8%AA.png" alt="筛选前十个"></p><p>帅选结果</p><p><img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%AD%9B%E9%80%89%E5%89%8D%E5%8D%81%E4%B8%AA%E7%BB%93%E6%9E%9C.png" alt="筛选前十个结果"></p><p><font size="3" color="red">注意：</font>①最大或者最小的1项或者多项。②若设置为百分比，当实际项数大于1时向下取整，当小于1时取1即可。</p><h5 id="六、数据图表呈现"><a href="#六、数据图表呈现" class="headerlink" title="六、数据图表呈现"></a>六、数据图表呈现</h5><p>使用 Excel 软件创建图表呈现数据的一般步骤：分析表格数据→选择数据区域→插入图表→检查图表，描述数据特征。</p><p>常用的图表类型：柱形图、折线图、饼图、雷达图、散点图、气泡图、条形图等。</p><p><font size="3" color="blue">解析：</font>数据源判断时，先看图例，再看横坐标的系列名。</p><p><font size="3" color="red">注意：</font>如果图表引用的数据区域发生变化（如数据修改、排序、筛选等操作），图表将会发生变化。但是设置小数位数不会影响图表和真实值。</p><h5 id="七、行绝对引用和列绝对引用"><a href="#七、行绝对引用和列绝对引用" class="headerlink" title="七、行绝对引用和列绝对引用"></a>七、行绝对引用和列绝对引用</h5><p>如果不想让某个行号在自动填充时发生改变，则需要在行号前加绝对引用符号“$”，列同。</p><h5 id="八、错误类型"><a href="#八、错误类型" class="headerlink" title="八、错误类型"></a>八、错误类型</h5><table><thead><tr><th>错误类型</th><th>错误名称</th><th>错误原因</th></tr></thead><tbody><tr><td>#DIV/0!</td><td>除零错误</td><td>除数为零</td></tr><tr><td>#REF</td><td>引用错误</td><td>删除（不是清除）了一个在公式中被引用的单元格</td></tr><tr><td>#VALUE</td><td>数据类型错误</td><td>比如一个文本型加一个数值型</td></tr><tr><td>#NAME!</td><td>函数名错误</td><td>如 SUM 拼成了 SUM</td></tr><tr><td>########</td><td></td><td>不是错误，是列宽不够造成的</td></tr></tbody></table><p><font size="3" color="red">注意：</font>“删除”是删除单元格本身，“清除”只是删除了单元格中可视的内容。</p><hr><h5 id="一、大数据处理的基本思想与架构"><a href="#一、大数据处理的基本思想与架构" class="headerlink" title="一、大数据处理的基本思想与架构"></a>一、大数据处理的基本思想与架构</h5><p>1.基本思想</p><p>处理大数据时，一般采用分治思想。</p><p>2.大数据处理类型</p><p>①静态数据：在处理时已收集完成、在计算时不会发生改变的数据，一般采用批处理方式。</p><p>②流数据：不间断地、持续地到达的实时数据，随着时间的流逝，流数据的价值也随之降低，通过实时分析计算可以得到更有价值的分析结果。</p><p>③图数据：现实世界中的许多数据，如社交网络、道路交通等数据，可采用图计算模式进行处理。</p><p><font size="3" color="blue">解析：</font>三类数据对应的三种处理模式</p><p>1.批处理计算</p><p>①Hadoop 是一个可运行于大规模计算机集群上的分布式系统基础架构，适用于静态数据的批处理计算。Hadoop 计算平台主要包括 Common 公共库、分布式系统HDFS、分布式数据库 HBase、分布式并行计算模型 MapReduce 等多个模块。</p><p>②Spark 属于应用较广的开源分布式计算架构，Spark 启用了内存存储中间结果，运行速度比 Hadoop 快很多。</p><p>2.流计算</p><p>流计算主要用于处理流数据，比如大型购物网站的广告推荐、社交网络的个性化推荐等。处理流数据的软件系统主要有 Twitter Storm、Heron、Yahoo! S4等。Storm 和 S4 是目前较为流行的开源分布式实时计算系统。</p><p>3.图计算</p><p>①图数据库：Neo4j、InfiniteGraph、OrientDB 等。</p><p>②并行图处理系统：Google Pregel、Apache Giraph、卡内基梅隆大学的 GraphLab、运行于 Spark 平台的 GraphX 等。</p><h5 id="二、使用Python处理数据"><a href="#二、使用Python处理数据" class="headerlink" title="二、使用Python处理数据"></a>二、使用Python处理数据</h5><p>1.使用pandas模块处理数据 由于pandas模块是第三方库，所以需要提前下载到本地才能导入到项目中</p><p>pandas 提供了 Series 和 DataFrame 两种数据结构。使用这两种数据结构，可完成数据的整理、计算、统计、分析及简单可视化。</p><p>①Series</p><p>Series 是一种一维的数据结构，包含一个数组的数据和一个与数据关联的索引（index），索引值默认是从0起递增的整数。列表、字典等可以用来创建 Series 数据结构。</p><table><thead><tr><th>Series对象属性</th><th>说明</th></tr></thead><tbody><tr><td>index</td><td>Series 的下标索引，其值默认是从0起递增的整数</td></tr><tr><td>values</td><td>存放 Series 值的一个数组</td></tr></tbody></table><p>②DataFrame</p><p>DataFrame 是一种二维的数据结构，由1个索引列（index）和若干个数据列组成，每个数据列可以是不同的类型。DataFrame 可以看作是共享同一个 index 的 Series 的集合。</p><table><thead><tr><th>DataFrame对象属性</th><th>说明</th></tr></thead><tbody><tr><td>index</td><td>DataFrame 的行索引</td></tr><tr><td>values</td><td>存放值的二维数据</td></tr><tr><td>columns</td><td>存放各列的列标题</td></tr><tr><td>T</td><td>行列转置</td></tr></tbody></table><p><font size="3" color="blue">解析：</font>1.Series 实践 先从清华大学的镜像源下载 pandas 模块到本地</p><p><img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%B8%8B%E8%BD%BDpandas.png" alt="下载pandas"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd  <span class="hljs-comment"># 以pd为pandas的别名，方便引用</span><br><br>s = pd.Series(&#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-number">3</span>&#125;)  <span class="hljs-comment"># 用字典创建Series对象</span><br>print(s[<span class="hljs-string">&#x27;a&#x27;</span>])<br>print(s[<span class="hljs-number">0</span>])  <span class="hljs-comment"># 默认的数字索引依然适用</span><br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd  <span class="hljs-comment"># 以pd为pandas的别名，方便引用</span><br><br>s = pd.Series([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>])  <span class="hljs-comment"># 用列表创建Series对象并指明索引名</span><br>print(s[<span class="hljs-string">&#x27;a&#x27;</span>])<br>print(s[<span class="hljs-number">0</span>])  <span class="hljs-comment"># 默认的数字索引依然适用</span><br></code></pre></td></tr></table></figure><p>它们的输出结果都是</p><p><img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%BE%93%E5%87%BA1.png" alt="输出1"></p><p>与列表和字符串不同的是，Series 还有布尔索引。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd  <span class="hljs-comment"># 以pd为pandas的别名，方便引用</span><br><br>s = pd.Series([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>])  <span class="hljs-comment"># 用列表创建Series对象并指明索引名</span><br>print(s[s &gt; <span class="hljs-number">1</span>])  <span class="hljs-comment"># 输出 values 大于 1 的值</span><br></code></pre></td></tr></table></figure><p>控制台输出结果</p><p><img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%BE%93%E5%87%BA2.png" alt="输出2"></p><p>2.DataFrame 实践</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd  <span class="hljs-comment"># 以pd为pandas的别名，方便引用</span><br><br>d = pd.DataFrame(&#123;<span class="hljs-string">&#x27;s1&#x27;</span>: [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">1</span>], <span class="hljs-string">&#x27;s2&#x27;</span>: [<span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-number">2</span>]&#125;)  <span class="hljs-comment"># 用字典创建，此处的s1和s2是列索引</span><br>print(d[<span class="hljs-string">&#x27;s1&#x27;</span>])<br></code></pre></td></tr></table></figure><p>控制台输出</p><p><img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%BE%93%E5%87%BA3.png" alt="输出3"></p><p>直接读取外部数据 读取excel文件需要 OpenPyXL 库，先下载</p><p><img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%B8%8B%E8%BD%BDopenpyxl.png" alt="下载openpyxl"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd  <span class="hljs-comment"># 以pd为pandas的别名，方便引用</span><br><br>d = pd.read_excel(<span class="hljs-string">&#x27;博文数据.xlsx&#x27;</span>)  <span class="hljs-comment"># 读取外部excel数据,excel文件与程序在同一目录下才能直接用文件名访问</span><br>print(d[<span class="hljs-string">&#x27;博文&#x27;</span>])<br></code></pre></td></tr></table></figure><p>控制台输出结果</p><p><img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%BE%93%E5%87%BA4.png" alt="输出4"></p><p>读取CSV文件与上同。</p><p>python不仅能通过读取外部数据来创建DataFrame对象，还能将DataFrame对象的数据导出。以下操作实现了文件格式的转换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd  <span class="hljs-comment"># 以pd为pandas的别名，方便引用</span><br><br>d = pd.read_excel(<span class="hljs-string">&#x27;博文数据.xlsx&#x27;</span>)  <span class="hljs-comment"># 读取外部excel数据,excel文件与程序在同一目录下才能直接用文件名访问</span><br>d.to_csv(<span class="hljs-string">&#x27;博文数据csv格式&#x27;</span>)  <span class="hljs-comment"># 把博文数据导出到CSV文件</span><br></code></pre></td></tr></table></figure><p>DataFrame 常用函数如下</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>count()</td><td>返回非空（NaN） 数据项的数量</td></tr><tr><td>sum()、mean()</td><td>求和、求平均值，通过 axis = 0/1 确定行列</td></tr><tr><td>max()、min()</td><td>返回最大、最小值</td></tr><tr><td>describe()</td><td>返回各列的基本描述统计值，包含计数、平均数、标准差、最大值、最小值及4分位差</td></tr><tr><td>head()、tail()</td><td>返回 DataFrame 的前 n 个，后 n 个数据记录</td></tr><tr><td>groupby()</td><td>对各列或各行中的数据进行分组，然后可对其中每一组数据进行不同的操作</td></tr><tr><td>sort_values()</td><td>排序，通过 axis = 0/1 确定行列</td></tr><tr><td>drop()</td><td>删除数据，通过 axis = 0/1 确定行列</td></tr><tr><td>append()</td><td>在指定元素的结尾插入内容</td></tr><tr><td>insert()</td><td>在指定位置插入列</td></tr><tr><td>set_value()</td><td>根据行标签和列标签设置单个值</td></tr><tr><td>rename()</td><td>修改列名或者索引</td></tr><tr><td>contact()</td><td>合并 DataFrame 对象</td></tr><tr><td>plot()</td><td>绘图</td></tr></tbody></table><p>实践</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd  <span class="hljs-comment"># 以pd为pandas的别名，方便引用</span><br><br>d = pd.read_excel(<span class="hljs-string">&#x27;博文数据.xlsx&#x27;</span>)  <span class="hljs-comment"># 读取外部excel数据,excel文件与程序在同一目录下才能直接用文件名访问</span><br>print(d.count(axis=<span class="hljs-number">0</span>))  <span class="hljs-comment"># axis=0，每列计数；axis=1，每行计数</span><br></code></pre></td></tr></table></figure><p>控制台输出结果</p><p><img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%BE%93%E5%87%BA5.png" alt="输出5"></p><p>由此可以知道未指定类别的博文数量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd  <span class="hljs-comment"># 以pd为pandas的别名，方便引用</span><br><br>d = pd.read_excel(<span class="hljs-string">&#x27;博文数据.xlsx&#x27;</span>)  <span class="hljs-comment"># 读取外部excel数据,excel文件与程序在同一目录下才能直接用文件名访问</span><br>print(d.groupby([<span class="hljs-string">&#x27;类别&#x27;</span>])[<span class="hljs-string">&#x27;字数&#x27;</span>].<span class="hljs-built_in">sum</span>())  <span class="hljs-comment"># 把同一类博文归到一组并统计各类博文的总字数</span><br></code></pre></td></tr></table></figure><p>控制台输出结果</p><p><img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%BE%93%E5%87%BA6.png" alt="输出6"></p><p>2.使用 matplotlib 模块使数据可视化 由于matplotlip模块是第三方库，所以需要提前下载到本地才能导入到项目中</p><p><img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%B8%8B%E8%BD%BDmatplotlib.png" alt="下载matplotlib"></p><p>matplotlib 常用函数</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>figure()</td><td>创建一个新的图表对象，若直接调用绘图函数，则matplotlib会自动创建 figure 对象</td></tr><tr><td>plot()</td><td>绘制线形图</td></tr><tr><td>bar()</td><td>绘制垂直柱形图</td></tr><tr><td>barh()</td><td>绘制水平柱形图</td></tr><tr><td>scatter()</td><td>绘制散点图</td></tr><tr><td>title()</td><td>设置图表的标题</td></tr><tr><td>xlim()、ylim()</td><td>设置X、Y轴的取值范围</td></tr><tr><td>xlabel()、ylabel()</td><td>设置X、Y轴的标签</td></tr><tr><td>legend()</td><td>显示图例</td></tr><tr><td>show()</td><td>显示创建的所有绘图对象</td></tr></tbody></table><p>实践</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd  <span class="hljs-comment"># 以pd为pandas的别名，方便引用</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt  <span class="hljs-comment"># 以plt为pyplot(matplotlib的子库)的别名，方便引用</span><br><br>d = pd.read_excel(<span class="hljs-string">&#x27;博文数据.xlsx&#x27;</span>)  <span class="hljs-comment"># 读取外部excel数据,excel文件与程序在同一目录下才能直接用文件名访问</span><br>l1 = []  <span class="hljs-comment"># 存储浏览量</span><br>l2 = []  <span class="hljs-comment"># 存储博文名</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(d[<span class="hljs-string">&#x27;浏览量&#x27;</span>].count()):<br>    l1.append(d[<span class="hljs-string">&#x27;浏览量&#x27;</span>][i])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(d[<span class="hljs-string">&#x27;博文&#x27;</span>].count()):<br>    l2.append(d[<span class="hljs-string">&#x27;博文&#x27;</span>][i][<span class="hljs-number">0</span>])  <span class="hljs-comment"># 取博文名的第一个字，方便绘图</span><br>plt.bar(l2, l1)  <span class="hljs-comment"># plt会自动匹配(x,y)对</span><br>plt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;SimHei&#x27;</span>]  <span class="hljs-comment"># 用来正常显示中文标签</span><br>plt.title(<span class="hljs-string">&#x27;博文浏览量数据统计图&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;浏览量&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p>结果 由于博文名的第一个字有重复，所以 plt 会自动忽略重复值</p><p><img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/myplot.png" alt="myplot"></p><hr><p>— 【参考资料 —— 《五三》和 网络文献】</p>]]></content>
    
    
    <categories>
      
      <category>信息复习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>信息复习笔记-Python基础</title>
    <link href="/2022/04/30/2021-02-25-%E6%9C%9F%E4%B8%AD%E8%80%83%E8%AF%95%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-Python%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/04/30/2021-02-25-%E6%9C%9F%E4%B8%AD%E8%80%83%E8%AF%95%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-Python%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p class="note note-black"><font size="3" color="orange">我们首先来复习Python基础。</font></p><h5 id="1-编程环境"><a href="#1-编程环境" class="headerlink" title="1.编程环境"></a>1.编程环境</h5><p>编程是使用集成开发环境（IDE）。一般包括代码编辑器、调试器和图形用户界面工具。</p><p><font size="3" color="blue">解析：</font>Python 开发包自带的 IDE 是 IDLE 。而 PyCharm 和 Eclipes 等则是第三方公司开发的专业级的 Python IDE 。</p><h5 id="2-Python-常见数据类型"><a href="#2-Python-常见数据类型" class="headerlink" title="2.Python 常见数据类型"></a>2.Python 常见数据类型</h5><p>Python 常用数据类型有整型（int）、实型（float）、字符串型（str）和 布尔型（boolean）。</p><p><font size="3" color="blue">解析：</font></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">整形：<span class="hljs-number">1</span>、-<span class="hljs-number">1</span>、······实型：<span class="hljs-number">1.0</span>、-<span class="hljs-number">1.0</span>、<span class="hljs-number">3.2</span>、······字符串型：<span class="hljs-string">&#x27;1&#x27;</span>、<span class="hljs-string">&quot;hello你好&quot;</span>、<span class="hljs-string">&quot;&#x27;&#x27;&quot;</span>、······<br>布尔型：<span class="hljs-literal">True</span> 和 <span class="hljs-literal">False</span> <br></code></pre></td></tr></table></figure><h5 id="3-Python-的基本运算与表达式"><a href="#3-Python-的基本运算与表达式" class="headerlink" title="3.Python 的基本运算与表达式"></a>3.Python 的基本运算与表达式</h5><p>①基本运算：算术运算、关系运算和逻辑运算三大类。</p><p>②表达式：变量、常量、运算符和圆括号等按一定的规则组合构成一个表达式。</p><p><font size="3" color="blue">解析：</font>算术运算</p><table><thead><tr><th>算术运算符</th><th>说明</th></tr></thead><tbody><tr><td>+</td><td>加法，2+3为5</td></tr><tr><td>-</td><td>减法，3-2为1</td></tr><tr><td>*</td><td>乘法，2×3.0为6.0</td></tr><tr><td>/</td><td>除法，4/2为2.0</td></tr><tr><td>%</td><td>除余，5%2为1  余数计算公式：1 = 5 - 5 // 2 * 2</td></tr><tr><td>**</td><td>幂次，2**3为8</td></tr><tr><td>//</td><td>向下取整（即去掉小数点及其之后的所有值）， 5//2为2</td></tr></tbody></table><p><font size="3" color="red">注意：</font>①只要运算对象间有实型数据的，最后的运算结果也是一个实型。例如上面的 2*3.0 的结果不是 6 而是 6.0 。② / 的运算结果是实型。例如上面的 4/2 的结果不是 2 而是 2.0 。</p><p>关系运算 如果关系成立，返回True，否则返回False</p><table><thead><tr><th>关系运算符</th><th>说明</th></tr></thead><tbody><tr><td>&gt;</td><td>比较左侧值是否大于右侧值</td></tr><tr><td>&gt;=</td><td>比较左侧的值是否大于或等于右侧的值</td></tr><tr><td>&lt;</td><td>比较左侧值是否小于右侧值</td></tr><tr><td>&lt;=</td><td>比较左侧的值是否小于或等于右侧的值</td></tr><tr><td>==</td><td>比较两个对象的值是否相等</td></tr><tr><td>!=</td><td>比较两个对象的值是否不相等</td></tr></tbody></table><p> <font size="3" color="red">注意：</font> 当对字符串进行比较（逐位比较）时，实际上比较的是字符串的编码。</p><p>逻辑运算</p><table><thead><tr><th>逻辑运算符</th><th>含义</th><th>基本格式</th><th>说明</th></tr></thead><tbody><tr><td>and</td><td>逻辑与运算，等价于数学中的“且”</td><td>a and b</td><td>当 a 和 b 两个表达式都为真时，a and b 的结果才为真，否则为假。</td></tr><tr><td>or</td><td>逻辑或运算，等价于数学中的“或”</td><td>a or b</td><td>当 a 和 b 两个表达式都为假时，a or b 的结果才是假，否则为真。</td></tr><tr><td>not</td><td>逻辑非运算，等价于数学中的“非”</td><td>not a</td><td>如果 a 为真，那么 not a 的结果为假；如果 a 为假，那么 not a 的结果为真。相当于对 a 取反。</td></tr></tbody></table><h5 id="4-变量与赋值"><a href="#4-变量与赋值" class="headerlink" title="4.变量与赋值"></a>4.变量与赋值</h5><p>①变量：在程序运算过程中变量的值可以改变。为了能对变量进行访问需要对变量进行命名。在 Python 中，变量名可以包括字母、数字、下划线组成，但不能以数字开头，而且字母区分大小写，同时不能使用保留字。</p><p>②赋值运算符：“=” “-=” “+=” “*=” “/=” “%=” 等。</p><p><font size="3" color="blue">解析：</font>Python 保留字 见下表，加下划线的保留字是我们已经学过的。</p><table><thead><tr><th>保留字</th><th>说明</th></tr></thead><tbody><tr><td><u>and</u></td><td>逻辑与操作，用于表达式运算</td></tr><tr><td>as</td><td>用于转换数据类型</td></tr><tr><td>assert</td><td>用于判断变量或条件表达式的结果</td></tr><tr><td>async</td><td>用于启用异步操作</td></tr><tr><td>await</td><td>用于异步操作中等待协程返回</td></tr><tr><td><u>break</u></td><td>中断循环语句的执行</td></tr><tr><td>class</td><td>定义类</td></tr><tr><td><u>continue</u></td><td>继续执行下一次循环</td></tr><tr><td><u>def</u></td><td>定义函数或方法</td></tr><tr><td><u>del</u></td><td>删除变量或序列的值</td></tr><tr><td><u>elif</u></td><td>条件语句，与 if、else 结合使用</td></tr><tr><td><u>else</u></td><td>条件语句，与 if、else 结合使用；也可用于异常或循环语句</td></tr><tr><td>except</td><td>包含捕获异常后的处理代码块，与 try、finally 结合使用</td></tr><tr><td><u>False</u></td><td>含义为“假”的逻辑值</td></tr><tr><td>finally</td><td>包含捕获异常后的始终要调用的代码块，与 try、except 结合使用</td></tr><tr><td><u>for</u></td><td>循环语句</td></tr><tr><td><u>from</u></td><td>用于导入模块，与 import 结合使用</td></tr><tr><td>global</td><td>用于在函数或其他局部作用域中使用全局变量</td></tr><tr><td><u>if</u></td><td>条件语句，与 elif、else 结合使用</td></tr><tr><td><u>import</u></td><td>导入模块，与 from 结合使用</td></tr><tr><td><u>in</u></td><td>判断变量是否在序列中</td></tr><tr><td>is</td><td>判断变量是否为某个类的实例</td></tr><tr><td>lambda</td><td>定义匿名函数</td></tr><tr><td><u>None</u></td><td>表示一个空对象或是一个特殊的空值</td></tr><tr><td>nonlocal</td><td>用于在函数或其他作用域中使用外层（非全局）变量</td></tr><tr><td><u>not</u></td><td>逻辑非操作，用于表达式运算</td></tr><tr><td><u>or</u></td><td>逻辑或操作，用于表达式运算</td></tr><tr><td>pass</td><td>空的类、方法或函数的占位符</td></tr><tr><td>raise</td><td>用于抛出异常</td></tr><tr><td><u>return</u></td><td>从函数返回计算结果</td></tr><tr><td><u>True</u></td><td>含义为“真”的逻辑值</td></tr><tr><td>try</td><td>测试执行可能出现异常的代码，与 except, finally 结合使用</td></tr><tr><td><u>while</u></td><td>循环语句</td></tr><tr><td>with</td><td>简化 Python 的语句</td></tr><tr><td>yield</td><td>从函数依次返回值</td></tr></tbody></table><h5 id="5-字符串、列表和字典"><a href="#5-字符串、列表和字典" class="headerlink" title="5.字符串、列表和字典"></a>5.字符串、列表和字典</h5><p>①字符串：字符串常用单引号、双引号或三引号表示；字符串是不可变对象（即不能对字符串的某一位置进行赋值而改变字符串）；通过索引来访问字符串的字符；通过切片操作可以获得字符串的一个子串。</p><p>②列表：用方括号“[]”表示，元素之间用逗号“，”分隔；由0个或多个元素组成的序列，其中的元素可以是数字、字符串、其他列表等混合类型的数据；列表的大小是可变的，可以根据需要扩大或缩小；列表中的元素可通过索引来定位。</p><p>③字典：字典可包含多个元素，每个元素包含两部分内容：键和值；键常用字符串或数值表示，值可以是任意类型的数据；键和值两者一一对应，且每个键只能对应一个值；字典中的元素是没有顺序的，引用元素时以键为索引。</p><p><font size="3" color="blue">解析：</font>字符串切片实践 格式为：字符串名[ start : end : step ]，step 缺省时默认为 1，start 缺省时，默认为 0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;期中考试信息复习笔记&#x27;</span><br>s1 = s[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>]<br>s2 = s[-<span class="hljs-number">8</span>:-<span class="hljs-number">6</span>]<br>s3 = s[<span class="hljs-number">3</span>:<span class="hljs-number">1</span>:-<span class="hljs-number">1</span>]<br>print(s1)<br>print(s2)<br>print(s3)<br></code></pre></td></tr></table></figure><p>控制台输出</p><p><img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA1.png" alt="控制台输出1"></p><p>列表切片实践 格式为：list[i:j:k]，i 为起始位置索引（包含），默认为0，j为终止位置索引（不含），默认至序列尾；k为切片间隔，默认为1。i，j，k使用默认值时可省略。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-string">&#x27;期&#x27;</span>,<span class="hljs-string">&#x27;中&#x27;</span>,<span class="hljs-string">&#x27;信&#x27;</span>,<span class="hljs-string">&#x27;息&#x27;</span>,<span class="hljs-string">&#x27;考&#x27;</span>,<span class="hljs-string">&#x27;试&#x27;</span>]<br>list1 = <span class="hljs-built_in">list</span>[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>]<br>list2 = <span class="hljs-built_in">list</span>[-<span class="hljs-number">4</span>:-<span class="hljs-number">2</span>]<br>list3 = <span class="hljs-built_in">list</span>[:]<br>list4 = <span class="hljs-built_in">list</span>[::-<span class="hljs-number">1</span>]<br>print(list1)<br>print(list2)<br>print(list3)<br>print(list4)<br></code></pre></td></tr></table></figure><p>控制台输出</p><p><img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA2.png" alt="控制台输出2"></p><p>字典格式为 d = {key1:value1,key2:value2,···} </p><h5 id="6-顺序结构的程序实现"><a href="#6-顺序结构的程序实现" class="headerlink" title="6.顺序结构的程序实现"></a>6.顺序结构的程序实现</h5><p>①顺序结构的程序代码执行方式是自上而下、依次执行的。</p><p>②在 Python 中，“#”后面的内容为注释，主要对代码说明，并不执行。</p><p>③Python 常见的内建函数</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>print(x)</td><td>输出x的值</td></tr><tr><td>input()</td><td>获取用户输入</td></tr><tr><td>int(object)</td><td>将字符串和数字转换成整型</td></tr><tr><td>float(object)</td><td>将字符串和数字转换成实型</td></tr><tr><td>str(x)</td><td>将x转换成字符串</td></tr><tr><td>abs(x)</td><td>返回x的绝对值</td></tr><tr><td>help()</td><td>提供交互式帮助</td></tr><tr><td>len(seq)</td><td>返回序列的长度</td></tr><tr><td>chr(x)</td><td>返回x对应的字符</td></tr><tr><td>ord(x)</td><td>返回x对应的 ASCII 值</td></tr><tr><td>round(x[,n])</td><td>对x进行四舍五入（如果给定n，就将数x转换为小数点后有n位的数）</td></tr><tr><td>max(s,[,args…])</td><td>返回序列的最大值（如果给定多个参数，则返回给定参数中的最大值）</td></tr><tr><td>min(s,[,args…])</td><td>返回序列的最小值（如果给定多个参数，则返回给定参数中的最小值）</td></tr></tbody></table><h5 id="7-Python-的缩进"><a href="#7-Python-的缩进" class="headerlink" title="7.Python 的缩进"></a>7.Python 的缩进</h5><p>①Python 中对缩进有严格要求，可以根据缩进来判断语句的从属关系。</p><p>②一般将语句块缩进4个空格。</p><h5 id="8-循环结构的程序实现"><a href="#8-循环结构的程序实现" class="headerlink" title="8.循环结构的程序实现"></a>8.循环结构的程序实现</h5><p>①for 语句的格式</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bnf">for <span class="hljs-attribute">&lt;变量&gt;</span> in <span class="hljs-attribute">&lt;序列&gt;</span>:<br><span class="hljs-attribute">&lt;循环体&gt;</span><br>[else:<br>  <span class="hljs-attribute">&lt;语句块&gt;</span>]<br></code></pre></td></tr></table></figure><p>for 语句通过遍历序列中的元素实现循环，并通过序列的元素数量来控制循环次数。</p><p>②while 语句的格式</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bnf">while <span class="hljs-attribute">&lt;条件&gt;</span>:<br><span class="hljs-attribute">&lt;循环体&gt;</span><br></code></pre></td></tr></table></figure><p>while循环时，首先判断条件是不是真，如果为真，执行一次循环体，再次判断条件是不是真，如果仍为真，那么再执行一次循环体，依次类推，直到条件为假时退出 while 语句。</p><p>③range 函数</p><p>range 函数由三个参数（起始值、终值、步长）来决定序列中元素的个数和范围。终值不能取到。</p><p>④break 语句</p><p>break 语句用来强行退出循环。</p><h5 id="9-函数与模块"><a href="#9-函数与模块" class="headerlink" title="9.函数与模块"></a>9.函数与模块</h5><p>①定义函数的语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> 函数名(<span class="hljs-params">参数集合</span>):</span><br>&lt;函数体&gt;<br>[<span class="hljs-keyword">return</span> 函数值]<br></code></pre></td></tr></table></figure><p>②模块导入</p><p>import 语句或 from-import 语句。</p><hr><h5 id="一、Python-的基本运算优先级"><a href="#一、Python-的基本运算优先级" class="headerlink" title="一、Python 的基本运算优先级"></a>一、Python 的基本运算优先级</h5><p>1.算术运算符</p><table><thead><tr><th>运算符</th><th>**</th><th>*</th><th>/</th><th>//</th><th>%</th><th>+</th><th>-</th></tr></thead><tbody><tr><td>优先级</td><td>1</td><td>2</td><td>2</td><td>2</td><td>2</td><td>3</td><td>3</td></tr></tbody></table><p>2.关系运算符</p><table><thead><tr><th>运算符</th><th>&gt;</th><th>&lt;</th><th>&gt;=</th><th>&lt;=</th><th>==</th><th>!=</th><th>in</th></tr></thead><tbody><tr><td>优先级</td><td>4</td><td>4</td><td>4</td><td>4</td><td>4</td><td>4</td><td>5</td></tr></tbody></table><p>3.逻辑运算符</p><table><thead><tr><th>运算符</th><th>not</th><th>and</th><th>or</th></tr></thead><tbody><tr><td>优先级</td><td>6</td><td>7</td><td>8</td></tr></tbody></table><p><font size="3" color="red">注意：</font>数字越大，优先级越低，优先级相等时，按照自左向右的顺序执行。</p><h5 id="二、常见的赋值方法"><a href="#二、常见的赋值方法" class="headerlink" title="二、常见的赋值方法"></a>二、常见的赋值方法</h5><table><thead><tr><th>赋值方法</th><th>含义</th></tr></thead><tbody><tr><td>a,b = 1,0</td><td>将数值 1 赋值给变量 a ，将数值 0 赋值给变量 b</td></tr><tr><td>a,b = ‘ab’</td><td>将字符 ‘a’ 赋值给变量 a，将字符 ‘b’ 赋值给变量 b</td></tr><tr><td>a=b=c=22</td><td>将数值 22 分别赋给变量 a,b,c</td></tr><tr><td>[ a , b ] = [ 10 , 20 ]</td><td>将数值 10 赋值给 a，将数值 20 赋值给 b</td></tr></tbody></table><h5 id="三、函数与模块"><a href="#三、函数与模块" class="headerlink" title="三、函数与模块"></a>三、函数与模块</h5><p>1.math 模块中的常用常数与函数 使用时需要导入（import math）</p><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>math.e</td><td>自然常数e</td></tr><tr><td>math.pi</td><td>圆周率Π</td></tr><tr><td>math.ceil(x)</td><td>对x向上取整，比如x=1.2，返回2</td></tr><tr><td>math.floor(x)</td><td>对x向下取整，比如x=1.2，返回1</td></tr><tr><td>math.pow(x,y)</td><td>指数运算，得到x的y次方</td></tr><tr><td>math.log(x)</td><td>对数，默认基底为e</td></tr><tr><td>math.sin(x)</td><td>正弦函数，返回自变量为x下的函数值，下同</td></tr><tr><td>math.cos(x)</td><td>余弦函数</td></tr><tr><td>math.tan(x)</td><td>正切函数</td></tr><tr><td>math.degrees(x)</td><td>弧度转换成角度</td></tr><tr><td>math.radians(x)</td><td>角度转换成弧度</td></tr></tbody></table><p>2.random 模块中的常用函数 使用时需要导入（import random）</p><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>random.random()</td><td>随机生成一个[0,1)范围内的实数</td></tr><tr><td>random.uniform(a,b)</td><td>随机生成一个[a,b]范围内的实数</td></tr><tr><td>random.randint(a,b)</td><td>随机生成一个[a,b]范围内的整数</td></tr><tr><td>random.choice(seq)</td><td>从序列的元素中随机挑选一个元素，比如：random.choice(range(10)),从0到9中随机挑选一个整数</td></tr><tr><td>random.sample(seq,k)</td><td>从序列中随机挑选k个元素</td></tr><tr><td>random.shuffle(seq)</td><td>将序列的所有元素随机排序</td></tr></tbody></table><h5 id="四、枚举算法"><a href="#四、枚举算法" class="headerlink" title="四、枚举算法"></a>四、枚举算法</h5><p>①基本思想：把问题所有可能的解一一列举，然后判断每一个列举出的可能解是不是正确的解。</p><p>②三个主要环节：枚举解（循环语句），筛选解（条件判断），输出解（或统计解的个数）。</p><p>③枚举算法的优化：尽可能缩小解的列举范围。</p><p><font size="3" color="blue">解析：</font>枚举算法实践 找出x的所有乘积对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br>x = <span class="hljs-number">122222</span><br><span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>start = datetime.now()  <span class="hljs-comment"># 系统当前时间</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(x):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i):<br>        <span class="hljs-keyword">if</span> i * j == x:<br>            <span class="hljs-built_in">sum</span> += <span class="hljs-number">1</span><br>            print(<span class="hljs-string">&#x27;(&#x27;</span>, i, <span class="hljs-string">&#x27;,&#x27;</span>, j, <span class="hljs-string">&#x27;)&#x27;</span>)<br>end = datetime.now()<br>print(<span class="hljs-string">&#x27;共有%s个乘积对&#x27;</span> % <span class="hljs-built_in">sum</span>)<br>print(<span class="hljs-string">&#x27;查找时间：&#x27;</span>, (end - start))<br></code></pre></td></tr></table></figure><p>控制台输出 （因数不分顺序）</p><p><img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA3.png" alt="控制台输出3"></p><p>对上述算法进行优化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br>x = <span class="hljs-number">122222</span><br><span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>start = datetime.now()  <span class="hljs-comment"># 系统当前时间</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(x):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i):<br>        <span class="hljs-keyword">if</span> i * j == x:<br>            <span class="hljs-built_in">sum</span> += <span class="hljs-number">1</span><br>            print(<span class="hljs-string">&#x27;(&#x27;</span>, i, <span class="hljs-string">&#x27;,&#x27;</span>, j, <span class="hljs-string">&#x27;)&#x27;</span>)<br>        <span class="hljs-keyword">elif</span> i * j &gt; x:  <span class="hljs-comment"># 如果乘积大于x，直接退出内层循环</span><br>            <span class="hljs-keyword">break</span><br>end = datetime.now()<br>print(<span class="hljs-string">&#x27;共有%s个乘积对&#x27;</span> % <span class="hljs-built_in">sum</span>)<br>print(<span class="hljs-string">&#x27;查找时间：&#x27;</span>, (end - start))<br></code></pre></td></tr></table></figure><p><img src="/images/%E4%BF%A1%E6%81%AF%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA4.png" alt="控制台输出4"></p><p>优化后的算法的运行时间竟压缩到了原算法运行时间的0.03187%，当x非常大时，效果将更加明显。</p><hr><p>— 【参考资料 —— 《五三》和 网络文献】</p>]]></content>
    
    
    <categories>
      
      <category>信息复习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>无题</title>
    <link href="/2022/02/10/%E6%97%A0%E9%A2%98%20%EF%BC%88%E5%8E%9F%E5%88%9B%EF%BC%89/"/>
    <url>/2022/02/10/%E6%97%A0%E9%A2%98%20%EF%BC%88%E5%8E%9F%E5%88%9B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>啊！</p><p>我的太阳女神，</p><p>有你在的地方，</p><p>就有我的太阳。</p><p>你以炽热的感情，</p><p>给我无尽的温暖。</p><p>当黑暗来临的时候，</p><p>如果没有你，</p><p>我该如何战胜这黑暗呢？</p><p>当幻想破灭的时候，</p><p>我们已天各一方，</p><p>我必须学会独自面对这人世间的一切。</p>]]></content>
    
    
    <categories>
      
      <category>文学</category>
      
      <category>人生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文学</tag>
      
      <tag>人生</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>读《百年孤独》，是为了避免这种孤独</title>
    <link href="/2022/01/07/2022-01-07-%E7%9C%8B%E3%80%8A%E7%99%BE%E5%B9%B4%E5%AD%A4%E7%8B%AC%E3%80%8B%EF%BC%8C%E6%98%AF%E4%B8%BA%E4%BA%86%E9%81%BF%E5%85%8D%E8%BF%99%E7%A7%8D%E5%AD%A4%E7%8B%AC/"/>
    <url>/2022/01/07/2022-01-07-%E7%9C%8B%E3%80%8A%E7%99%BE%E5%B9%B4%E5%AD%A4%E7%8B%AC%E3%80%8B%EF%BC%8C%E6%98%AF%E4%B8%BA%E4%BA%86%E9%81%BF%E5%85%8D%E8%BF%99%E7%A7%8D%E5%AD%A4%E7%8B%AC/</url>
    
    <content type="html"><![CDATA[<p>《百年孤独》是由哥伦比亚作家<strong>加西亚·马尔克斯</strong>所著的魔幻现实主义长篇小说。整篇小说充斥着魔幻的情节，比如：“他拖着两块金属锭走家串户，引发的景象使所有人目瞪口呆：铁锅、铁盆、铁钳、小铁炉纷纷跌落，木板因钉子绝望挣扎、螺丝奋力挣脱而吱嘎作响，甚至连那些丢失多日的物件也在久寻不见的地方出现，一窝蜂似的追随在梅尔基亚德斯的魔铁后面”。但是，这些魔幻情节的背后却是现实。这篇小说讲述了布恩迪亚家族从兴盛到衰亡的全过程，而贯穿全文的情感线索便是“孤独”。从家族的第一代开始，这个家族的每个成员就都被笼罩在孤独之下。最后整个家族消失在一阵飓风中，而作者也在结尾表明经受百年孤独的家族不会有第二次机会在大地上出现。</p><h5 id="小说中有哪些“孤独”？"><a href="#小说中有哪些“孤独”？" class="headerlink" title="小说中有哪些“孤独”？"></a>小说中有哪些“孤独”？</h5><p>亲情的冷漠、爱情的荒谬、封闭且落后的马孔多等。小说中不同人物相似的名字似乎在暗示着他们都有着相同的遭遇。无论是思想先进的何塞·阿尔卡蒂奥·布恩迪亚还是为情所困的奥雷里亚诺·何塞，他们终究只能活在孤独中并在孤独中死去。尽管很多人尝试摆脱这种孤独，但均以失败告终，直至坠入无尽的深渊。</p><p>马尔克斯说过：“孤独是一个人一生的伙伴，是一个既定事实，与其否认，与其抗争，与其无谓的逃避，不如接受它，拥挤的人群里让它保护你回家，周六的上午让它陪你吃早餐，整理阳光。” 但我认为，孤闭注定走向灭亡，开放才能迎来新生。博主在读初中的时候，为了做到“出淤泥而不染，濯清涟而不妖”，很少和同学说话，一直是“两耳不闻窗外事，一心只读圣贤书”的状态。虽然这样做能够保持成绩，但是，博主因此也失去了很多朋友。博主如果在生活上或者学习上遇到了挫折，往往也只能自我消化，也曾一度抑郁过。不仅如此，孤独还让博主患上了社交恐惧症，使博主成为了一个阴沉的、麻木的学习机器。而从同学们的口中，我不只一次听到他们对我的评价：高冷。可离谱的是，我甚至不知道高冷是什么意思，只是一意孤行的认为读好书才是最重要的。</p><p>博主写这篇博文的目的既是提醒自己，也是提醒身边的朋友。</p>]]></content>
    
    
    <categories>
      
      <category>文学</category>
      
      <category>人生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>成长</tag>
      
      <tag>文学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>现在是2022年了，谈谈博主在过去一年的成长历程</title>
    <link href="/2022/01/06/%E7%8E%B0%E5%9C%A8%E6%98%AF2022%E5%B9%B4%E4%BA%86%EF%BC%8C%E8%B0%88%E8%B0%88%E5%8D%9A%E4%B8%BB%E5%9C%A8%E8%BF%87%E5%8E%BB%E4%B8%80%E5%B9%B4%E7%9A%84%E6%88%90%E9%95%BF%E5%8E%86%E7%A8%8B/"/>
    <url>/2022/01/06/%E7%8E%B0%E5%9C%A8%E6%98%AF2022%E5%B9%B4%E4%BA%86%EF%BC%8C%E8%B0%88%E8%B0%88%E5%8D%9A%E4%B8%BB%E5%9C%A8%E8%BF%87%E5%8E%BB%E4%B8%80%E5%B9%B4%E7%9A%84%E6%88%90%E9%95%BF%E5%8E%86%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h5 id="记得博主上次发表博文好像还是在上次吧，转眼间博主的寒假就快来了。光阴似箭，日月如梭，时间在不经意间就流逝了。博主特写此博文以记录博主的成长，为的是在新的一年里能够更好的生活。——-前言"><a href="#记得博主上次发表博文好像还是在上次吧，转眼间博主的寒假就快来了。光阴似箭，日月如梭，时间在不经意间就流逝了。博主特写此博文以记录博主的成长，为的是在新的一年里能够更好的生活。——-前言" class="headerlink" title="记得博主上次发表博文好像还是在上次吧，转眼间博主的寒假就快来了。光阴似箭，日月如梭，时间在不经意间就流逝了。博主特写此博文以记录博主的成长，为的是在新的一年里能够更好的生活。—— 前言"></a>记得博主上次发表博文好像还是在上次吧，转眼间博主的寒假就快来了。光阴似箭，日月如梭，时间在不经意间就流逝了。博主特写此博文以记录博主的成长，为的是在新的一年里能够更好的生活。—— 前言</h5><h4 id="以个人的角度思考世界"><a href="#以个人的角度思考世界" class="headerlink" title="以个人的角度思考世界"></a>以个人的角度思考世界</h4><p>在过去的一年里，博主经历了大大小小的事情、领略了各种各样的人生味道—有酸的、有甜的、有苦的、有辣的。生而为人，不像自然界的独行动物，必须时刻生活在人类这个密切联系的社会中。人为什么会存在？我只能说是个偶然。如果以个人的视角看世界，扑面而来的就是稀缺、成本、愉悦、伤心、理想、死亡等等关键词。一个人会开心、会孤独，也可以有自己的理想、希望。每个人的世界观、人生观和价值观都大相径庭，但是，每个人都喜欢幸福、快乐的感觉。如果要为人类的生活找一个目标的话，幸福和快乐就再合适不过了。那么，获得幸福和快乐的途径是什么？如果一个人在该吃的时候能够吃饱，在该睡的时候能够睡足，那这个人是幸福快乐的吗？如果一个人在关心他人的同时也能够获得他人的关心的话，那这个人是幸福快乐的吗？我觉得不然。因为每个人对幸福和快乐的理解各不相同，所以很难用一个标准来定义幸福和快乐。</p><h4 id="以人与人的角度思考世界"><a href="#以人与人的角度思考世界" class="headerlink" title="以人与人的角度思考世界"></a>以人与人的角度思考世界</h4><p>友情、亲情、爱情，这些都是在人与人之间产生的情感。</p><p>为什么需要友情？因为当我们遇到困难的时候，我们需要朋友来拉我们一把。</p><p>为什么需要亲情？因为亲情永远是我们心灵的避风港。</p><p>为什么需要爱情？因为爱情是我们心灵的另一个避风港。</p><p>当友情来临的时候，我们会收获快乐；当亲情来临的时候，我们会收获温暖；当爱情来临的时候，我们会收获幸福。在这三种情感中，最容易获得并且也最坚固的是亲情，其次是友情，最后是爱情。一个人如果同时拥有这三种情感的话，那么无论他认为的幸福和快乐是怎样的，他都会体会到人生的意义。</p><p>怎么做才能收获友情？第一条原则：从友善待人开始；第二条原则：真心地关注他人；第三条原则：记住别人的名字；第四条原则：领会倾听的艺术；第五条原则：学会换位思考；第六条原则：顾全别人的面子；第七条原则：真诚地赞赏他人</p><p>怎么做才能收获亲情？唯一的原则：像他们在我们小时候爱我们的样子爱他们。</p><p>怎么做才能收获爱情？爱情与友情和亲情最大的不同就是爱情是排他性的，也就是说：我若爱我的一个兄弟，我便爱我的所有兄弟；我若爱我的一个家人，我便爱我的所有家人；但是，我不可能同时爱上两个女孩子。因此，人们为爱情所付出的成本是巨大的——体现在人们追求爱情的时候（比追求友情更复杂）、体现在人们维持爱情的时候（比维持友情更难）、体现在爱情带来的影响上（它可以在一瞬间给人以希望，也可以在一瞬间给人以绝望）。所以，爱情中的唯一原则就是尊重对方。</p><p>总之人与人之间的利益应该平衡。</p><h4 id="如何让自己平安快乐并且保持充沛的活力"><a href="#如何让自己平安快乐并且保持充沛的活力" class="headerlink" title="如何让自己平安快乐并且保持充沛的活力"></a>如何让自己平安快乐并且保持充沛的活力</h4><h5 id="第一条原则-不畏将来，不念过去"><a href="#第一条原则-不畏将来，不念过去" class="headerlink" title="第一条原则 不畏将来，不念过去"></a>第一条原则 不畏将来，不念过去</h5><p>向自己发问，并记下答案：</p><p>1.我是否在为将来的日子而忧虑，或者在向往远方的玫瑰园？</p><p>2.我是否会时常把往事追悔，把昨天的重负放在今日？</p><p>3.早晨起床时，我是否决心“把握住今日”？</p><p>4.生活在“今天独立的隔舱”里，我的生活是否会更加丰富多彩？</p><p>5.何时执行这个忠告？明天，下周，还是就在今天？</p><h5 id="第二条原则-勇于面对现实"><a href="#第二条原则-勇于面对现实" class="headerlink" title="第二条原则 勇于面对现实"></a>第二条原则 勇于面对现实</h5><p>面对现实的反义词是拥抱幻想。幻想是人主观臆想出来的东西，当幻想破灭的时候，人们会从幻想的高度跌到现实的低谷，所以，与其拥抱幻想，不如趁早面对现实。</p><h5 id="第三条原则-让忧虑到此为止"><a href="#第三条原则-让忧虑到此为止" class="headerlink" title="第三条原则 让忧虑到此为止"></a>第三条原则 让忧虑到此为止</h5><p>不管何时何地，当我们的生活中出现不利的情况时，在为此付出巨大代价之前，先问自己这么几个问题：</p><p>1.我遇到的问题和我有多大关系，我值得为此这么担忧吗？</p><p>2.我怎么样在这件事情上设个底线，然后将它忘掉？</p><p>3.这件事究竟值得我付出多大的成本，我是不是已经付出太多了？</p><h5 id="第四条原则-憧憬生活的美好"><a href="#第四条原则-憧憬生活的美好" class="headerlink" title="第四条原则 憧憬生活的美好"></a>第四条原则 憧憬生活的美好</h5><p>如果我们用一颗善于发现美的心去感受周围的世界，我们就能始终保持一种愉快的情绪。</p><h5 id="第五条原则-珍惜所拥有的"><a href="#第五条原则-珍惜所拥有的" class="headerlink" title="第五条原则 珍惜所拥有的"></a>第五条原则 珍惜所拥有的</h5><p>只有失去了什么后，人们才会意识到拥有是多么幸福的一件事。所以，珍惜所拥有的。</p><h5 id="第六条原则-刻薄的批评也表明尊敬、不去理睬不合理的批评"><a href="#第六条原则-刻薄的批评也表明尊敬、不去理睬不合理的批评" class="headerlink" title="第六条原则 刻薄的批评也表明尊敬、不去理睬不合理的批评"></a>第六条原则 刻薄的批评也表明尊敬、不去理睬不合理的批评</h5><p>批评别人的人往往会从中获得些许优越感，这恰恰证明了被批评的人在某些方面比较优秀。</p><h5 id="第七条原则-学会自我反省"><a href="#第七条原则-学会自我反省" class="headerlink" title="第七条原则 学会自我反省"></a>第七条原则 学会自我反省</h5><p>曾子曾说过：“吾日三省吾身：为人谋而不忠乎？与朋友交而不信乎？传不习乎？”</p><p>不知道自我反省的人永远都不会有进步。</p>]]></content>
    
    
    <categories>
      
      <category>人生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>成长</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Thymeleaf特点（9）- 注释</title>
    <link href="/2021/07/28/2021-07-27-Thymeleaf%E7%89%B9%E7%82%B9%EF%BC%889%EF%BC%89/"/>
    <url>/2021/07/28/2021-07-27-Thymeleaf%E7%89%B9%E7%82%B9%EF%BC%889%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p class="note note-secondary"><font size="3" color="black">这次我们来学习Thymeleaf特有的注释模块。</font></p><h4 id="Standard-HTML-SML-comments"><a href="#Standard-HTML-SML-comments" class="headerlink" title="Standard HTML/SML comments"></a>Standard HTML/SML comments</h4><p>&lt;!-- … --&gt; 注释可以用在 Thymeleaf 模板中的任何地方，但是不会被 Thymeleaf 处理，它会随着必要的代码一字不差的复制到网页的源代码页。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html">...<br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;#&#123;hone.welcome&#125;&quot;</span> <span class="hljs-attr">th:fragment</span>=<span class="hljs-string">&quot;copy&quot;</span>&gt;</span>Welcome to our grocery store!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>en_Name: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*&#123;user.enname&#125;&quot;</span>&gt;</span>Sebastian<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>cn_Name: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.cnname&#125;&quot;</span>&gt;</span>塞巴斯蒂安<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 哎呀暴露了！本页面是地下赌场的隐藏入口！--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:insert</span>=<span class="hljs-string">&quot;menu :: menu-copy(~&#123;::title&#125;)&quot;</span> <span class="hljs-attr">th:assert</span>=<span class="hljs-string">&quot;1,2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>...<br></code></pre></td></tr></table></figure><p><img src="/images/Thymeleaf/%E7%BD%91%E9%A1%B5%E6%BA%90%E7%A0%81.png" alt="网页源码"></p><p>👮‍♂️：你再说，我在听 </p><p>🏃‍♂️：额，先撤了</p><p>咳~开玩笑的，我们继续学习</p><h4 id="Thymeleaf-parser-level-comment-blocks"><a href="#Thymeleaf-parser-level-comment-blocks" class="headerlink" title="Thymeleaf parser-level comment blocks"></a>Thymeleaf parser-level comment blocks</h4><p>&lt;!--/* This code will be removed at Thymeleaf parsing time! */--&gt; 注释会在 Thymeleaf 解析它的时候将它从网页源码页中移出。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html">...<br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;#&#123;hone.welcome&#125;&quot;</span> <span class="hljs-attr">th:fragment</span>=<span class="hljs-string">&quot;copy&quot;</span>&gt;</span>Welcome to our grocery store!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>en_Name: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*&#123;user.enname&#125;&quot;</span>&gt;</span>Sebastian<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>cn_Name: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.cnname&#125;&quot;</span>&gt;</span>塞巴斯蒂安<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!--/* 哎呀暴露了！本页面是地下赌场的隐藏入口！*/--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:insert</span>=<span class="hljs-string">&quot;menu :: menu-copy(~&#123;::title&#125;)&quot;</span> <span class="hljs-attr">th:assert</span>=<span class="hljs-string">&quot;1,2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>...<br></code></pre></td></tr></table></figure><p><img src="/images/Thymeleaf/%E7%BD%91%E9%A1%B5%E6%BA%90%E7%A0%81%E7%A7%BB.png" alt="网页源码移"></p><p>🦸‍♂️：嘿~哪有啊</p><p>👮‍♂️：刚那人呢</p><p>&lt;!--/* and */--&gt; 注释会在 Thymeleaf 解析它的时候把它内部所有的字符移除：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--/*--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>you can see me only before Thymeleaf processes me! <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!--*/--&gt;</span><br></code></pre></td></tr></table></figure><p> 甚至可以在里面放代码，因为它会在 Thymeleaf 解析它时把它移除。</p><p><strong>th:remove</strong> 属性也可以移除代码块 , 根据属性的值的不同有不同的效果：</p><p> <strong>·</strong> <strong>all</strong> : 移除本标签和所有的子标签。</p><p> <strong>·</strong> <strong>body</strong> : 只移除所有的子标签。</p><p> <strong>·</strong> <strong>tag</strong> : 只移除本标签。</p><p> <strong>·</strong> <strong>all-but-first</strong> : 只移除所有的子标签（除了第一个）。 </p><p> <strong>·</strong> <strong>none</strong> : 什么都不做。</p><p>对于 none 值，there is a example:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/something&quot;</span> <span class="hljs-attr">th:remove</span>=<span class="hljs-string">&quot;$&#123;condition&#125;? tag : none&quot;</span>&gt;</span>Link text not to be removed<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>下面的例子运行效果与上述例子一样:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/something&quot;</span> <span class="hljs-attr">th:remove</span>=<span class="hljs-string">&quot;$&#123;condition&#125;? tag&quot;</span>&gt;</span>Link text not to be removed<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>因为 <strong>th:remove</strong> 属性会把 null 等同于 none 。</p><p>扯远了，我们继续学习注释。</p><h4 id="Thymeleaf-prototype-only-comment-blocks"><a href="#Thymeleaf-prototype-only-comment-blocks" class="headerlink" title="Thymeleaf prototype-only comment blocks"></a>Thymeleaf prototype-only comment blocks</h4><p>例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>hello!<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-comment">&lt;!--/*/</span><br><span class="hljs-comment">&lt;div th:text=&quot;$&#123;...&#125;&quot;&gt;</span><br><span class="hljs-comment">  ...</span><br><span class="hljs-comment">&lt;/div&gt; </span><br><span class="hljs-comment">/*/--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>goodbye!<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Thymeleaf 在解析它时只会把 &lt;!--/*/ 和 /*/--&gt; 移除，相当于：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>hello!<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;...&#125;&quot;</span>&gt;</span><br>      ... <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>goodbye!<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这种注释只会在开发时被程序员看到，但 Thymeleaf 处理时会自动将它忽略，执行其内部的代码。当作为标准 HTML 页面打开时，注释仍然存在。</p><h4 id="Synthetic-th-block-tag"><a href="#Synthetic-th-block-tag" class="headerlink" title="Synthetic th:block tag"></a>Synthetic th:block tag</h4><p>Thymeleaf 的唯一一个包含在标准语法中的元素处理器是 <strong>th:block</strong> 。</p><p>它和 prototype-only comment blocks 一起使用会非常简洁：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--/*/ &lt;th:block th:each=&quot;user : $&#123;users&#125;&quot;&gt; /*/--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.login&#125;&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.address&#125;&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--/*/ &lt;/th:block&gt; /*/--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>程序猿可以在 &lt;th:block&gt; 标签内定义任何自己想要的属性，剩下的交给 Thymeleaf ，当 &lt;th:block&gt; 被执行时，Thymeleaf 会移除 block 而留下它的 内容，就像被注释掉一样，更加简洁。</p>]]></content>
    
    
    <categories>
      
      <category>Thymeleaf进阶篇---学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Thymeleaf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Thymeleaf特点（8）- 属性优先级</title>
    <link href="/2021/07/27/2021-07-27-Thymeleaf%E7%89%B9%E7%82%B9%EF%BC%888%EF%BC%89/"/>
    <url>/2021/07/27/2021-07-27-Thymeleaf%E7%89%B9%E7%82%B9%EF%BC%888%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p class="note note-warning"><font size="3" color="pink">这次我们来学习属性优先级。</font></p><p>当Thymeleaf在同一标签中遇到了至少两个属性时，需要按顺序执行它们：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;item : $&#123;items&#125;&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;item.description&#125;&quot;</span>&gt;</span>Item description here...<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>th:each</strong> 属性需要在 <strong>th:text</strong> 属性之前执行，否则会出错。</p><p>Thymeleaf 通过建立数字优先级机制来保证我们得到想要的结果：（数字越小优先级越高）</p><table>    <tr>        <th>Order</th>        <th>Feature</th>        <th>Attributes</th>    </tr>    <tr>        <th>1</th>        <th>Fragment inclusion</th>        <th>th:insert/th:replace</th>    </tr>    <tr>        <th>2</th>        <th>Fragment iteration</th>        <th>th:each</th>    </tr>    <tr>        <th>3</th>        <th>Conditional evaluation</th>        <th>th:if/th:unless/th:switch/th:case</th>    </tr>    <tr>        <th>4</th>        <th>Local variable definitiont</th>        <th>th:object/th:with</th>    </tr>    <tr>        <th>5</th>        <th>General attribute modification</th>        <th>th:attr/th:attrprepend/th:attrappend</th>    </tr>    <tr>        <th>6</th>        <th>Specific attribute modification</th>        <th>th:value/th:href/th:src/...</th>    </tr>    <tr>        <th>7</th>        <th>Text (tag body modification)</th>        <th>th:text/th:utext</th>    </tr>    <tr>        <th>8</th>        <th>Fragment specification</th>        <th>th:fragment</th>    </tr>    <tr>        <th>9</th>        <th>Fragment removal</th>        <th>th:remove</th>    </tr></table>无论属性位置的先后：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;item.description&#125;&quot;</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;item : $&#123;items&#125;&quot;</span>&gt;</span>Item description here...<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Thymeleaf进阶篇---学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Thymeleaf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Thymeleaf特点（7）- 局部变量</title>
    <link href="/2021/07/27/2021-07-27-Thymeleaf%E7%89%B9%E7%82%B9%EF%BC%887%EF%BC%89/"/>
    <url>/2021/07/27/2021-07-27-Thymeleaf%E7%89%B9%E7%82%B9%EF%BC%887%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p class="note note-success"><font size="3" color="purple">这次我们来学习局部变量。</font></p><p>像 text 、each 、href 、insert 、if 、th:text 、th:each 、th:href 、th:insert 、th:if 等属性中的 text 、each 等都是 属性≠变量。</p><p>那 Thymeleaf 中的变量是什么？我们之前在学习迭代的时候就碰到过一个迭代变量—web <a href="https://tcjblog.com/2021/07/23/2021-07-22-Thymeleaf%E7%89%B9%E7%82%B9%EF%BC%884%EF%BC%89/" target="_blank"><font color="red">点此进入迭代学习</font></a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>链接选项<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;web : $&#123;webs&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;$&#123;web.url&#125;&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;web.name&#125;&quot;</span>&gt;</span>默认<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><p>那一般的声明局部变量的语句是什么？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:with</span>=<span class="hljs-string">&quot;isEven=($&#123;prodStat.count&#125; % 2 == 0)&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>th:with</strong> 属性在学习算术运算的时候就出现过。 <a href="https://tcjblog.com/2021/07/21/2021-07-21-Thymeleaf%E7%89%B9%E7%82%B9%EF%BC%882%EF%BC%89/#%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97-%E5%92%8C" target="_blank"><font color="red">点此进入数据类型学习</font></a></p><p>当 <strong>th:with</strong> 执行的时候，<strong>isEven</strong> 变量会被创建并被加入到上下文中的变量集合里以便管理，但是它的作用范围仅是当前标签和它的子标签。</p><p>你也可以用多赋值语句同时给多个变量赋值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:with</span>=<span class="hljs-string">&quot;isEven=($&#123;prodStat.count&#125; % 2 == 0),isOdd=($&#123;prodStat.count&#125; % 2 != 0)&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>th:with</strong> 属性允许在同一属性中使用已经定义的变量：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:with</span>=<span class="hljs-string">&quot;isEven=($&#123;prodStat.count&#125; % 2 == 0),isOdd= not isEven&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Thymeleaf进阶篇---学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Thymeleaf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Thymeleaf特点（6）- 模块化</title>
    <link href="/2021/07/27/2021-07-24-Thymeleaf%E7%89%B9%E7%82%B9%EF%BC%886%EF%BC%89/"/>
    <url>/2021/07/27/2021-07-24-Thymeleaf%E7%89%B9%E7%82%B9%EF%BC%886%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p class="note note-black"><font size="3" color="orange">这次我们学习灵活的布局，或者说提高代码的复用性。</font></p><p>无论你浏览什么网页，都会（基本上）看到它——没错，它就是导航栏。</p><p><img src="/images/Thymeleaf/bilibili%E5%AF%BC%E8%88%AA%E6%A0%8F.png" alt="bilibili导航栏"></p><p><img src="/images/Thymeleaf/W3school%E5%AF%BC%E8%88%AA%E6%A0%8F.png" alt="W3school导航栏"></p><p><img src="/images/Thymeleaf/gitee%E5%AF%BC%E8%88%AA%E6%A0%8F.png" alt="gitee导航栏"></p><p><img src="/images/Thymeleaf/ProcessOn%E5%AF%BC%E8%88%AA%E6%A0%8F.png" alt="ProcessOn导航栏"></p><p>以上列举了 4 个网站的导航栏 ，在网站内部跳转时，它们基本上不变，或只是变更少数内容。</p><p>要为网站的每个页面都添上导航栏，必定会造成重复的代码，一个好的模板怎么会容忍这种事情发生？！于是， Thymeleaf 马上就提供了 <strong>th:fragment</strong> 属性来避免这种事的发生，现在我们来试试</p><p>假如有一个简易（过于简陋了，将来会解决这个问题）的导航栏：用来在网站内跳转不同的页面。</p><p><img src="/images/Thymeleaf/%E7%AE%80%E6%98%93%E8%8F%9C%E5%8D%95.png" alt="简易菜单"></p><p>我们要在网站的每个页面都添加上（例如：主页面2、订阅点这里、主页面 的跳转链接）</p><p>先单独创建一个 <strong>menu.html</strong> 文件，专门写导航栏的代码：（也可以直接写在某一个页面内）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Good Thymes Virtual Grocery<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">menu</span> <span class="hljs-attr">th:fragment</span>=<span class="hljs-string">&quot;menu-copy&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>menu<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/home2.html&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/home2&#125;&quot;</span>&gt;</span>主页面2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/subscribe&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/subscribe&#125;&quot;</span>&gt;</span>订阅点这里<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/&#125;&quot;</span>&gt;</span>主页面<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">menu</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>并给主要标签加上 <strong>th:fragment</strong> 属性，值随便取一个，就叫 <strong>menu-copy</strong> 。</p><p>接着在 home.html（主页 html）、home2.html（主页2 html）、subscribe.html（订阅界面 html），文件中加入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:insert</span>=<span class="hljs-string">&quot;~&#123;menu :: menu-copy&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>或：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:replace</span>=<span class="hljs-string">&quot;~&#123;menu :: menu-copy&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>或：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:include</span>=<span class="hljs-string">&quot;~&#123;menu :: menu-copy&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也可以把 ~{} 去掉，但是 <strong>th:include</strong> 属性在 Thymeleaf 3.0之后就不推荐使用了，那它们的区别是什么？</p><p><strong>th:insert</strong> 是最简单的，它将目标标签作为自己本地标签的子标签插入进来，<u>带目标标签的属性</u>。</p><p><strong>th:replace</strong> 直接把本地标签换成了目标标签，<u>带属性</u>。</p><p><strong>th:include</strong> 只是将目标标签的内容（例如它的子标签）插入到本地标签来，<u>不带属性</u>。</p><p>所以上述代码结果分别为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">menu</span> <span class="hljs-attr">th:fragment</span>=<span class="hljs-string">&quot;menu-copy&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>menu<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/home2.html&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/home2&#125;&quot;</span>&gt;</span>主页面2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/subscribe&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/subscribe&#125;&quot;</span>&gt;</span>订阅点这里<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/&#125;&quot;</span>&gt;</span>主页面<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">menu</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>and</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">menu</span> <span class="hljs-attr">th:fragment</span>=<span class="hljs-string">&quot;menu-copy&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>menu<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/home2.html&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/home2&#125;&quot;</span>&gt;</span>主页面2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/subscribe&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/subscribe&#125;&quot;</span>&gt;</span>订阅点这里<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/&#125;&quot;</span>&gt;</span>主页面<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">menu</span>&gt;</span><br></code></pre></td></tr></table></figure><p>and</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>menu<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/home2.html&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/home2&#125;&quot;</span>&gt;</span>主页面2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/subscribe&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/subscribe&#125;&quot;</span>&gt;</span>订阅点这里<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/&#125;&quot;</span>&gt;</span>主页面<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>它们也有共同的部分：片段表达式</p><p> <strong>·</strong> ~{templatename::selector} ：<strong>templatename</strong> 是 <strong>html</strong> 文件名，<strong>selector</strong> 是文件中目标片段的 <strong>th:fragment</strong> 属性值。</p><p> <strong>·</strong> ~{templatename}：表示复制整个模板。</p><p> <strong>·</strong> ~{::selector} or ~{this::selector} ：表示在当前模板中用 selector 匹配目标片段。</p><p>注意到 <strong>templatename</strong> 必须要能够被当前模板引擎使用的模板解析器正确解析 ，否则如果 selector 没有匹配到片段，会报异常，~{} 依然可以被省略。</p><p>Both <strong>templatename</strong> and <strong>selector</strong> can be fully-featured expressions(even conditionals!):</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:insert</span>=<span class="hljs-string">&quot;menu :: ($&#123;page.home&#125;? #&#123;menu.home&#125;:#&#123;menu.common&#125;)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在上面的例子中,主页面会加载一个特有的导航栏，前提是 menu 文件中有该目标片段。</p><p>（没有主页面跳转链接的导航栏，本来就不需要φ(*￣0￣)）</p><p>🙋‍♀️：直接在主页面的模板中指定用主页面导航栏不就行了？需要判断吗？</p><p>🤦‍♂️：好像也是φ(゜▽゜*)♪，咳咳~这就是一个说明可以用条件式的例子罢了（🤷‍♂️我不管~~）</p><p><strong>id</strong> 属性可以代替 <strong>th:fragment</strong> ，片段被复制到新的模板中之后也可以引用模板中的变量，there is a example</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">home</span><span class="hljs-params">(Model model)</span></span>&#123;<br>        String enname = <span class="hljs-string">&quot;TCJ&quot;</span>;<br>        String cnname = <span class="hljs-string">&quot;田超杰&quot;</span>;<br>        String nname = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">boolean</span> admin = <span class="hljs-keyword">true</span>;<br>        model.addAttribute(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-keyword">new</span> users(enname,cnname,nname,admin));<br>        model.addAttribute(<span class="hljs-string">&quot;webs&quot;</span>,webs);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;home&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>首先,在主页控制器往模型中添加 user 数据</p><p>然后,特制 导航栏</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">menu</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;houtai-copy&quot;</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;user.admin&#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/houtai.html&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/hhhhhhhoutai&#125;&quot;</span>&gt;</span>管理员后台<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">menu</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最后,在主页模板中进行复制</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:insert</span>=<span class="hljs-string">&quot;menu :: #houtai-copy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>只有管理员访问网站时才会看到 <u>管理员后台</u> 的跳转链接。</p><img src="/images/Thymeleaf/admin后台.png" alt="admin后台" style="zoom:80%;" /><h4 id="为了进一步提高代码的复用性，Thymeleaf-提供了可参数化的片段签名，例如"><a href="#为了进一步提高代码的复用性，Thymeleaf-提供了可参数化的片段签名，例如" class="headerlink" title="为了进一步提高代码的复用性，Thymeleaf 提供了可参数化的片段签名，例如"></a>为了进一步提高代码的复用性，Thymeleaf 提供了<u>可参数化</u>的片段签名，例如</h4><p><strong>Java</strong> 的方法、<strong>C</strong> 和 <strong>Python</strong> 的函数等，那 Thymeleaf 的 “函数” 的语法是什么呢？</p><h5 id="构造语法"><a href="#构造语法" class="headerlink" title="构造语法"></a>构造语法</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--属性值(Var)--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:fragment</span>=<span class="hljs-string">&quot;frag(onevar,twovar)&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;onevar&#125; + &#x27;and&#x27; + $&#123;twovar&#125;&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>和编程语言中的构造语法基本一致。</p><h5 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:insert</span>=<span class="hljs-string">&quot;templatename::frag($&#123;value1&#125;,$&#123;value2&#125;)&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:replace</span>=<span class="hljs-string">&quot;templatename::frag(onevar=$&#123;value1&#125;,twovar=$&#123;value2&#125;)&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第二个语法中变量赋值语句可以乱序，例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:replace</span>=<span class="hljs-string">&quot;::frag (twovar=$&#123;value2&#125;,onevar=$&#123;value1&#125;)&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h5 id="即使在构造的时候没有声明参数，也可以在调用的时候加入"><a href="#即使在构造的时候没有声明参数，也可以在调用的时候加入" class="headerlink" title="即使在构造的时候没有声明参数，也可以在调用的时候加入"></a>即使在构造的时候没有声明参数，也可以在调用的时候加入</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--声明--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:fragment</span>=<span class="hljs-string">&quot;frag&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--调用--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:replace</span>=<span class="hljs-string">&quot;::frag(onevar=$&#123;value1&#125;,towvar=$&#123;value2&#125;)&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--调用时添加参数的第二种方法--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:replace</span>=<span class="hljs-string">&quot;::frag&quot;</span> <span class="hljs-attr">th:with</span>=<span class="hljs-string">&quot;onevar=$&#123;value1&#125;,twovar=$&#123;value2&#125;&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><p>和编程语言不同的是，被调用的片段可以使用该模板的上下文变量，而 Java 只允许使用同一个类中的全局变量和传进来的参数。</p><hr><p>现在，扩展一下语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--构造，注意 title 和 links 变量的使用--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span> <span class="hljs-attr">th:fragment</span>=<span class="hljs-string">&quot;common_header(title,links)&quot;</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span> <span class="hljs-attr">th:replace</span>=<span class="hljs-string">&quot;$&#123;title&#125;&quot;</span>&gt;</span>The shopping application<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- Common styles and scripts --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">media</span>=<span class="hljs-string">&quot;all&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/css/shoppingapp.css&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;shortcut icon&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/images/favicon.ico&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/sh/scripts/codebase.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--/* Per-page placeholder for additional links */--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th:block</span> <span class="hljs-attr">th:replace</span>=<span class="hljs-string">&quot;$&#123;links&#125;&quot;</span> /&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html">...<br><span class="hljs-comment">&lt;!--调用，注意参数的语法--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span> <span class="hljs-attr">th:replace</span>=<span class="hljs-string">&quot;base :: common_header(~&#123;::title&#125;,~&#123;::link&#125;)&quot;</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Shopping - Main<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/css/bootstrap.min.css&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/themes/smoothness/jquery-ui.css&#125;&quot;</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>...<br></code></pre></td></tr></table></figure><p>运行它并且结果如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html">...<br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Shopping - Main<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- Common styles and scripts --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">media</span>=<span class="hljs-string">&quot;all&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/sho/css/shoppingapp.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;shortcut icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/sho/images/favicon.ico&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/sho/sh/scripts/codebase.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/sho/css/bootstrap.min.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/sho/themes/smoothness/jquery-ui.css&quot;</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>...<br></code></pre></td></tr></table></figure><p> 再稍改一下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span> <span class="hljs-attr">th:replace</span>=<span class="hljs-string">&quot;base :: common_header(~&#123;::title&#125;,~&#123;&#125;)&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Shopping - Main<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>...<br></code></pre></td></tr></table></figure><p>结果是:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html">...<br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Shopping - Main<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- Common styles and scripts --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">media</span>=<span class="hljs-string">&quot;all&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/sho/css/Shoppingapp.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;shortcut icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/sho/images/favicon.ico&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/sho/sh/scripts/codebase.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>...<br></code></pre></td></tr></table></figure><p>使用默认值的语法 _</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html">...<br><span class="hljs-tag">&lt;<span class="hljs-name">head</span> <span class="hljs-attr">th:replace</span>=<span class="hljs-string">&quot;base :: common_header(_,~&#123;::link&#125;)&quot;</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Shopping - Main<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/css/bootstrap.min.css&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/themes/smoothness/jquery-ui.css&#125;&quot;</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>...<br></code></pre></td></tr></table></figure><p>&#39;_&#39; results in current part of the fragment not being executed at all( title = no-operation),so the result is:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html">...<br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>The shopping application<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- Common styles and scripts --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">media</span>=<span class="hljs-string">&quot;all&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/sho/css/shoppingapp.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;shortcut icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/sho/images/favicon.ico&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/sho/sh/scripts/codebase.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/sho/css/bootstrap.min.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/sho/themes/smoothness/jquery-ui.css&quot;</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>...<br></code></pre></td></tr></table></figure><hr><p><strong>th:insert</strong> 的表达式也可以是conditionals:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">...<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:insert</span>=<span class="hljs-string">&quot;$&#123;user.isAdmin()&#125; ? ~&#123;common :: adminhead&#125; : ~&#123;&#125;&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>...<br></code></pre></td></tr></table></figure><p>又或者:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">...<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:insert</span>=<span class="hljs-string">&quot;$&#123;user.isAdmin()&#125; ? ~&#123;common :: adminhead&#125; : _&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>...<br></code></pre></td></tr></table></figure><p>之前学习的 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:insert</span>=<span class="hljs-string">&quot;~&#123;templatename :: selector&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 <strong>templatename</strong> or <strong>selector</strong> 未被正确解析或匹配到目标片段时会抛出异常，<strong>th:assert</strong> 属性与此类似，它通过创建一个表达式列表，并且当列表中的值均为 <strong>true</strong> 或等效与 <strong>true</strong> 时才会执行代码，否则会抛出异常：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">th:fragment</span>=<span class="hljs-string">&quot;contentheader(title)&quot;</span> <span class="hljs-attr">th:assert</span>=<span class="hljs-string">&quot;$&#123;!#strings.isEmpty(title)&#125;&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以用它来检验参数。</p><p>除此之外，我们可以通过模板解析器来检查模板资源是否存在，即通过它们的 checkExistence 标志。我们也可以把片段是否存在作为一个默认的条件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html">...<br><span class="hljs-comment">&lt;!-- The body of the &lt;div&gt; will be used if the &quot;common :: salutation&quot; fragment --&gt;</span> <br><span class="hljs-comment">&lt;!-- does not exist (or is empty). --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:insert</span>=<span class="hljs-string">&quot;~&#123;common :: salutation&#125; ?: _&quot;</span>&gt;</span><br>    Welcome [[$&#123;user.name&#125;]], click <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/support&#125;&quot;</span>&gt;</span>here<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> for help-desk support.<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>...<br></code></pre></td></tr></table></figure><p>简言之就是若该模板和目标片段都存在，该语法和 <strong>th:insert=&quot;~{templatename :: selector}&quot;</strong> 基本一样；如果不存在，返回 <strong>null</strong> ，它不会报异常。</p><h4 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h4><p>把 <strong>th:fragment</strong> 属性移到 &lt;html&gt; 标签中完成构造，then 在另一个模板的 &lt;html&gt; 标签中加入 <strong>th:replace</strong> 属性完成调用，切不可用 <strong>th:insert</strong> 否则会造成双重 &lt;html&gt; 标签。</p>]]></content>
    
    
    <categories>
      
      <category>Thymeleaf进阶篇---学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Thymeleaf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Thymeleaf特点（5）- 条件语句</title>
    <link href="/2021/07/24/2021-07-23-Thymeleaf%E7%89%B9%E7%82%B9%EF%BC%885%EF%BC%89/"/>
    <url>/2021/07/24/2021-07-23-Thymeleaf%E7%89%B9%E7%82%B9%EF%BC%885%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p class="note note-danger"><font size="3" color="brower">这次我们学习 Thymeleaf 中的条件式。</font></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>链接选项<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;web : $&#123;webs&#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;webStat.even&#125;? &#x27;偶&#x27;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;webStat.even&#125;&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;$&#123;web.url&#125;&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;web.name&#125;&quot;</span>&gt;</span>默认<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="/images/Thymeleaf/偶数条件.png" alt="偶数条件" style="zoom:80%;" /><h4 id="简单的条件项有-if-和-unless-，这里先介绍-if-，等下介绍它的反面-unless-。"><a href="#简单的条件项有-if-和-unless-，这里先介绍-if-，等下介绍它的反面-unless-。" class="headerlink" title="简单的条件项有 if 和 unless ，这里先介绍 if ，等下介绍它的反面 unless 。"></a>简单的条件项有 <strong>if</strong> 和 <strong>unless</strong> ，这里先介绍 <strong>if</strong> ，等下介绍它的反面 <strong>unless</strong> 。</h4><p>由浏览器渲染的页面可以看出显示的只有第偶数个网站（个人网站 和 百度），有了 <strong>th:if</strong> ，我们可以指定某些代码段只有满足某些条件时才会被执行（例如在这里只有满足是第偶数个网站时，网站超链接才会被显示）。</p><p>现在我们要求显示第奇数个网站，代码可以这样写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>链接选项<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;web : $&#123;webs&#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;webStat.even&#125;? &#x27;偶&#x27;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;webStat.odd&#125;&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;$&#123;web.url&#125;&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;web.name&#125;&quot;</span>&gt;</span>默认<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><p>或者这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>链接选项<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;web : $&#123;webs&#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;webStat.even&#125;? &#x27;偶&#x27;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123; not webStat.even&#125;&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;$&#123;web.url&#125;&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;web.name&#125;&quot;</span>&gt;</span>默认<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><p>还可以这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>链接选项<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;web : $&#123;webs&#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;webStat.even&#125;? &#x27;偶&#x27;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:unless</span>=<span class="hljs-string">&quot;$&#123;webStat.even&#125;&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;$&#123;web.url&#125;&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;web.name&#125;&quot;</span>&gt;</span>默认<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><p>都只显示第奇数的网站</p><img src="/images/Thymeleaf/奇数的网站.png" alt="奇数的网站" style="zoom:80%;" /><p>从上述代码可以看出， <strong>th:if</strong> 的反面 <strong>th:unless</strong> 就相当于 <strong>th:if + not</strong> 的效果。</p><p><strong>th:if</strong> 的属性值不单只有 <strong>true/false</strong> ，如果属性值满足下述条件，就等效于 <strong>true</strong> ，若不满足就等效于 <strong>false</strong>：</p><p>前提大条件  值不是 <strong>null</strong></p><p>如果是布尔值  且是 <strong>true</strong></p><p>如果是数字  且是 <strong>非零数字</strong></p><p>如果是字符  且是 <strong>非零字符</strong> （应该就是非零数字 + 任何字符）</p><p>如果是字符串  且不是 <strong>&#39;false&#39;</strong> 、<strong>&#39;off&#39;</strong> 、<strong>&#39;no&#39;</strong></p><p>如果是字符串  且是 <strong>&#39;true&#39;</strong> 、<strong>用单引号引起的数字</strong></p><p>如果是字符串 且是空的字符串：<strong>&#39;&#39;</strong></p><p><strong>th:unless</strong> 等同👆全部 。</p><h4 id="Switch-可以通过匹配多个条件来执行满足条件的代码块"><a href="#Switch-可以通过匹配多个条件来执行满足条件的代码块" class="headerlink" title="Switch 可以通过匹配多个条件来执行满足条件的代码块"></a><strong>Switch</strong> 可以通过匹配多个条件来执行满足条件的代码块</h4><p>与 <strong>th:if</strong> 相比 ，<strong>Switch</strong> 在某些场景下提高了代码运行效率，降低了开发难度。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>链接选项<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;web : $&#123;webs&#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;webStat.first&#125;&quot;</span>&gt;</span>是第一个<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;webStat.last&#125;&quot;</span>&gt;</span>是最后一个<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;webStat.index == (webStat.size)-2&#125;&quot;</span>&gt;</span>是倒数第二个<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;not webStat.first &amp;&amp; not webStat.last &amp;&amp; not (webStat.index == (webStat.size)-2)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;$&#123;web.url&#125;&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;web.name&#125;&quot;</span>&gt;</span>默认<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="/images/Thymeleaf/使用if.png" alt="使用if" style="zoom:80%;" /><p>同样的效果用 Switch 实现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>链接选项<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;web : $&#123;webs&#125;&quot;</span> <span class="hljs-attr">th:switch</span>=<span class="hljs-string">&quot;$&#123;webStat.index&#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:case</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span>是第一个<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:case</span>=<span class="hljs-string">&quot;$&#123;(webStat.size)-1&#125;&quot;</span>&gt;</span>是最后一个<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:case</span>=<span class="hljs-string">&quot;$&#123;(webStat.size)-2&#125;&quot;</span>&gt;</span>是倒数第二个<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:case</span>=<span class="hljs-string">&quot;*&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;$&#123;web.url&#125;&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;web.name&#125;&quot;</span>&gt;</span>默认<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当有任何一个 <strong>th:case</strong> 属性满足条件时，其它的所有 <strong>th:case</strong> 属性都将被赋予 <strong>false</strong> ，不会再去匹配。</p><p><strong>th:case=&quot;*&quot;</strong> 表示默认情况，一定能匹配（如果其它条件都不匹配）</p><p>和 <strong>Java</strong> 里的 <strong>Switch</strong> 类似，不再赘述。</p><h4 id="应用实例：通过延迟检索数据优化网页加载速度"><a href="#应用实例：通过延迟检索数据优化网页加载速度" class="headerlink" title="应用实例：通过延迟检索数据优化网页加载速度"></a>应用实例：通过延迟检索数据优化网页加载速度</h4><p>目前我们仅需一个条件判断</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;condition&#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;u : $&#123;users&#125;&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;u.name&#125;&quot;</span>&gt;</span>user name<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p>只当 <strong>condition</strong> 成立时，用户名才会被加载。</p>]]></content>
    
    
    <categories>
      
      <category>Thymeleaf入门篇---学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Thymeleaf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Thymeleaf特点（4）- 迭代</title>
    <link href="/2021/07/23/2021-07-22-Thymeleaf%E7%89%B9%E7%82%B9%EF%BC%884%EF%BC%89/"/>
    <url>/2021/07/23/2021-07-22-Thymeleaf%E7%89%B9%E7%82%B9%EF%BC%884%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p class="note note-secondary"><font size="3" color="green">这次我们学习 Thymeleaf 中的迭代。</font></p><p>还记得之前的链接组吗？</p><img src="/images/Thymeleaf/链接组.png" alt="链接组" style="zoom:80%;" /><p>4个超链接都指向外部网站，现在我们要用迭代的形式将它们呈现在我们的网页中，等等，有这样的网站吗？</p><p>当然有，当我们百度一下的时候，浏览器会显示大量的超链接供我们选择</p><img src="/images/Thymeleaf/百度超链接.png" alt="百度超链接" style="zoom:55%;" /><p>如果我们的问题改动一个字，结果就又不一样了，倘若这些都是程序猿在代码中手工一个一个添加的，那岂不是要疯了？这时候用迭代的方式来展示数据就是一个很好的方式！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>链接选项<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;https://tcj155038.gitee.io/download/&#125;&quot;</span>&gt;</span>下载<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;https://tcj155038.gitee.io/&#125;&quot;</span>&gt;</span>个人网站<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;https://www.tcjblog.com&#125;&quot;</span>&gt;</span>个人网站<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;https://www.baidu.com&#125;&quot;</span>&gt;</span>百度一下<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>链接选项<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span> <span class="hljs-comment">&lt;!-- 使用迭代 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;web : $&#123;webs&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;$&#123;web.url&#125;&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;web.name&#125;&quot;</span>&gt;</span>默认<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果一样：</p><img src="/images/Thymeleaf/迭代超链接.png" alt="迭代超链接" style="zoom:80%;" /><p>使用 <strong>th:each</strong> 属性完成迭代操作：</p><p>属性值 <strong>web : ${webs}</strong> 中 <strong>webs</strong> 可以是 <strong>java.util.List</strong> 类 、<strong>java.util.Iterable</strong> 类 、<strong>java.util.Enumeration</strong>  类 、<strong>java.util.Iterator</strong> 类 、<strong>java.util.Map</strong> 类 、任何数组 、任何可以被看作仅包含本身值的列表的对象（例如多个 web 对象组成 webs ） 。</p><p>将 <strong>webs</strong> 中的值取出来赋予变量 <strong>web</strong> ，就可通过 <strong>web</strong> 来调用 <strong>webs</strong> 内对象的属性和方法了， <strong>web</strong> 变量的作用范围在 <strong>&lt;li&gt;&lt;/li&gt;</strong> 及其内部标签（例如 <strong>&lt;a&gt;&lt;/a&gt;</strong> 标签），标签循环次数取决于 <strong>webs</strong> 包含的元素数量，除非有意外中断。</p><p>Thymeleaf 官方还给出了追踪迭代状态的机制：状态变量 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>链接选项<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;web,iterStat : $&#123;webs&#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;iterStat.even&#125;? &#x27;第偶数个网站：&#x27;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;$&#123;web.url&#125;&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;web.name&#125;&quot;</span>&gt;</span>默认<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="/images/Thymeleaf/偶数的网站.png" alt="偶数的网站" style="zoom:80%;" /><p>在迭代变量 <strong>web</strong> 后面用逗号隔开加入状态变量 <strong>iterStat</strong> 以使用状态变量，两者作用域相同，<strong>iterStat</strong>  特性如下：</p><p><strong>iterStat.index</strong> 返回当前的索引值，从0开始（int型）</p><p><strong>iterStat.count</strong> 返回迭代的第几个元素数，从1开始（int型）</p><p><strong>iterStat.size</strong> 返回元素总个数（int型）</p><p><strong>iterStat.current</strong> 返回当前的迭代变量，即一个对象（例如在这里web(url=<a href="https://www.tcjblog.com/">https://www.tcjblog.com</a>, name=个人网站)）</p><p><strong>iterStat.even/odd</strong> 返回一个布尔值，检测是否为偶数/奇数</p><p><strong>iterStat.first/last</strong> 返回一个布尔值，检测是否为 第一个/最后一个 元素</p><p>如果没有显示的创建迭代变量，Thymeleaf 将会通过在迭代变量后附加上 <strong>Stat</strong> 来创建它，例如这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;web : $&#123;webs&#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;webStat.even&#125;? &#x27;第偶数个网站：&#x27;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;$&#123;web.url&#125;&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;web.name&#125;&quot;</span>&gt;</span>默认<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Thymeleaf入门篇---学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Thymeleaf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Thymeleaf特点（3）- 赋值</title>
    <link href="/2021/07/22/2021-07-21-Thymeleaf%E7%89%B9%E7%82%B9%EF%BC%883%EF%BC%89/"/>
    <url>/2021/07/22/2021-07-21-Thymeleaf%E7%89%B9%E7%82%B9%EF%BC%883%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p class="note note-secondary"><font size="3" color="pink">这次我们学习给属性赋值或修改值。</font></p><h4 id="给任何属性赋值-th-attr"><a href="#给任何属性赋值-th-attr" class="headerlink" title="给任何属性赋值  th:attr"></a>给任何属性赋值  th:attr</h4><p>现在有一个订阅服务用来推送网站更新消息，并且可通过 /localhost:8080/subscribe 链接跳转到订阅界面进行订阅。主要有一个表单来获取订阅的邮件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;subscribe.html&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;subscribe!&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>action 属性指定了 subscribe 模板本身，&quot;subscribe!&quot; 会显示在按钮上。如果订阅的人看不懂英文，或者不希望发送表单数据到 subscribe.html 上，这就一点都不方便了！</p><p>通过 <strong>th:attr</strong> 动态的给属性赋值，再创建对应的控制器和配置文件就行！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;subscribe.html&quot;</span> <span class="hljs-attr">th:attr</span>=<span class="hljs-string">&quot;action=@&#123;/subscribe&#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Subscribe!&quot;</span> <span class="hljs-attr">th:attr</span>=<span class="hljs-string">&quot;value=#&#123;subscribe.submit&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>th:attr</strong> 还可以动态的给多个属性赋值，不同属性之间用逗号隔开。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../images/gtvglogo.png&quot;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">th:attr</span>=<span class="hljs-string">&quot;src=@&#123;/images/gtvglogo.png&#125;,title=#&#123;logo&#125;,alt=#&#123;logo&#125;&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>此时有聪明的小伙伴可能会提出疑问，我直接用 <strong>th:*</strong> 的格式对特定的属性进行赋值不更方便吗？Thymeleaf 官方也同意你的想法，且给出了例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Subscribe!&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;#&#123;subscribe.submit&#125;&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;subscribe.html&quot;</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/subscribe&#125;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="这里有大量像这样的属性，每一种都针对一个-HTML5-的属性："><a href="#这里有大量像这样的属性，每一种都针对一个-HTML5-的属性：" class="headerlink" title="这里有大量像这样的属性，每一种都针对一个 HTML5 的属性："></a>这里有大量像这样的属性，每一种都针对一个 HTML5 的属性：</h4><table>    <tr>        <th>th:abbr</th>        <th>th:accept</th>        <th>th:accept-charset</th>        <th>th:accesskey</th>        <th>th:action</th>    </tr>    <tr>        <th>th:align</th>        <th>th:alt</th>        <th>th:acrchive</th>        <th>th:audio</th>        <th>th:autocomplete</th>    </tr>    <tr>        <th>th:axis</th>    </tr>    <tr>        <th>th:background</th>        <th>th:bgcolor</th>        <th>th:border</th>    </tr>    <tr>        <th>th:cellpadding</th>        <th>th:cellspacing</th>        <th>th:challenge</th>        <th>th:charset</th>        <th>th:cite</th>    </tr>    <tr>        <th>th:class</th>        <th>th:classid</th>        <th>th:codebase</th>        <th>th:codetype</th>        <th>th:cols</th>    </tr>    <tr>        <th>th:colspan</th>        <th>th:compact</th>        <th>th:content</th>        <th>th:contenteditable</th>        <th>th:contextmenu</th>    </tr>    <tr>        <th>th:data</th>        <th>th:datetime</th>        <th>th:dir</th>        <th>th:draggable</th>        <th>th:dropzone</th>    </tr>    <tr>        <th>th:enctype</th>    </tr>    <tr>        <th>th:for</th>        <th>th:form</th>        <th>th:formaction</th>        <th>th:formenctype</th>        <th>th:formmethod</th>    </tr>    <tr>        <th>th:formtarget</th>        <th>th:fragment</th>        <th>th:frame</th>        <th>th:frameborder</th>    </tr>    <tr>        <th>th:headers</th>        <th>th:height</th>        <th>th:high</th>        <th>th:href</th>        <th>th:hreflang</th>    </tr>    <tr>        <th>th:hspace</th>        <th>th:http-equiv</th>        <th>th:icon</th>        <th>th:id</th>        <th>th:inline</th>    </tr>    <tr>        <th>th:keytype</th>        <th>th:kind</th>    </tr>    <tr>        <th>th:label</th>        <th>th:lang</th>        <th>th:list</th>        <th>th:longdesc</th>        <th>th:low</th>    </tr>    <tr>        <th>th:manifest</th>        <th>th:marginheight</th>        <th>th:marginwidth</th>        <th>th:max</th>        <th>th:maxlength</th>    </tr>    <tr>        <th>th:media</th>        <th>th:method</th>        <th>th:min</th>    </tr>    <tr>        <th>th:name</th>    </tr>    <tr>        <th>th:onabort</th>        <th>th:onafterprint</th>        <th>th:onbeforeprint</th>        <th>th:onbeforeunload</th>        <th>th:onblur</th>    </tr>    <tr>        <th>th:oncanplay</th>        <th>th:oncanplaythrough</th>        <th>th:onchange</th>        <th>th:onclick</th>        <th>th:oncontextmenu</th>    </tr>    <tr>        <th>th:ondblclick</th>        <th>th:ondrag</th>        <th>th:ondragend</th>        <th>th:ondragenter</th>        <th>th:ondragleave</th>    </tr>    <tr>        <th>th:ondragover</th>        <th>th:ondragstart</th>        <th>th:ondrop</th>        <th>th:ondurationchange</th>        <th>th:onemptied</th>    </tr>    <tr>        <th>th:onended</th>        <th>th:onerror</th>        <th>th:onfocus</th>        <th>th:onformchange</th>        <th>th:onforminput</th>    </tr>    <tr>        <th>th:onhashchange</th>        <th>th:oninput</th>        <th>th:oninvalid</th>        <th>th:onkeydown</th>        <th>th:onkeypress</th>    </tr>    <tr>        <th>th:onkeyup</th>        <th>th:onload</th>        <th>th:onloadeddata</th>        <th>th:onloadedmetadata</th>        <th>th:onloadstart</th>    </tr>    <tr>        <th>th:onmessage</th>        <th>th:onmousedown</th>        <th>th:onmousemove</th>        <th>th:onmouseout</th>        <th>th:onmouseover</th>    </tr>    <tr>        <th>th:onmouseup</th>        <th>th:onmousewheel</th>        <th>th:onoffline</th>        <th>th:ononline</th>        <th>th:onpause</th>    </tr>    <tr>        <th>th:onplay</th>        <th>th:onplaying</th>        <th>th:onpopstate</th>        <th>th:onprogress</th>        <th>th:onratechange</th>    </tr>    <tr>        <th>th:onreadystatechange</th>        <th>th:onredo</th>        <th>th:onreset</th>        <th>th:onresize</th>        <th>th:onscroll</th>    </tr>    <tr>        <th>th:onseeked</th>        <th>th:onseeking</th>        <th>th:onselect</th>        <th>th:onshow</th>        <th>th:onstalled</th>    </tr>    <tr>        <th>th:onstorage</th>        <th>th:onseeking</th>        <th>th:onsubmit</th>        <th>th:onsuspend</th>        <th>th:ontimeupdate</th>    </tr>    <tr>        <th>th:onundo</th>        <th>th:onunload</th>        <th>th:onvolumechange</th>        <th>th:onwaiting</th>        <th>th:optimum</th>    </tr>    <tr>        <th>th:pattern</th>        <th>th:placeholder</th>        <th>th:poster</th>        <th>th:preload</th>    </tr>    <tr>        <th>th:radiogroup</th>        <th>th:rel</th>        <th>th:rev</th>        <th>th:rows</th>        <th>th:rowspan</th>    </tr>    <tr>        <th>th:rules</th>    </tr>    <tr>        <th>th:sandbox</th>        <th>th:scheme</th>        <th>th:scope</th>        <th>th:scrolling</th>        <th>th:size</th>    </tr>    <tr>        <th>th:sizes</th>        <th>th:span</th>        <th>th:spellcheck</th>        <th>th:src</th>        <th>th:srclang</th>    </tr>    <tr>        <th>th:standby</th>        <th>th:start</th>        <th>th:step</th>        <th>th:style</th>        <th>th:summary</th>    </tr>    <tr>        <th>th:tabindex</th>        <th>th:target</th>        <th>th:title</th>        <th>th:type</th>    </tr>    <tr>        <th>th:usemap</th>    </tr>    <tr>        <th>th:value</th>        <th>th:valuetype</th>        <th>th:vspace</th>    </tr>    <tr>        <th>th:width</th>        <th>th:wrap</th>    </tr>    <tr>        <th>th:xmlbase</th>        <th>th:xmllang</th>        <th>th:xmlspace</th>    </tr></table><hr><p>之前讲到了用 <strong>th:attr</strong> 给多个属性赋值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../images/gtvglogo.png&quot;</span></span><br><span class="hljs-tag">     <span class="hljs-attr">th:attr</span>=<span class="hljs-string">&quot;src=@&#123;/images/gtvglogo.png&#125;,title=#&#123;logo&#125;,alt=#&#123;logo&#125;&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>我们再来看看怎么用表格中的语法完成赋值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../images/gtvglogo.png&quot;</span></span><br><span class="hljs-tag">     <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/images/gtvglogo.png&#125;&quot;</span> <span class="hljs-attr">th:title</span>=<span class="hljs-string">&quot;#&#123;logo&#125;&quot;</span> <span class="hljs-attr">th:alt</span>=<span class="hljs-string">&quot;#&#123;logo&#125;&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>接下来用更简洁的方法 <strong>(th:alt-title)</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../images/gtvglogo.png&quot;</span></span><br><span class="hljs-tag">     <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/images/gtvglogo.png&#125;&quot;</span> <span class="hljs-attr">th:alt-title</span>=<span class="hljs-string">&quot;#&#123;logo&#125;&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p><strong>th:alt-title</strong> 是一个相当特殊的语法，和它一样特殊的还有 <strong>th:lang-xmllang</strong> ，它们可以同时给两个属性赋值：</p><p><strong>th:alt-title</strong> 同时给 <strong>alt</strong> 和 <strong>title</strong> 赋值；</p><p><strong>th:lang-xmllang</strong> 同时给 <strong>lang</strong> 和 <strong>xml:lang</strong> 赋值。</p><p>到现在为止，学到的动态赋值的方法都是直接将原值覆盖掉，不过 Thylemeaf 官方还提供了附加值的方法：</p><p><strong>th:attrappend</strong>（在现有值后面附加） <strong>和</strong> <strong>th:attrprepend</strong>（在现有值前附加） <strong>属性。</strong></p><p>如果一个网页的渲染需要用户提前选择样式，那代码就可以这么写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Do it!&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">th:attrappend</span>=<span class="hljs-string">&quot;class=$&#123;&#x27; &#x27; + cssStyle&#125;&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>当用户选择了 cssStyle=warning 的样式，这份代码就相当于：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Do it!&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn warning&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>附加值的方法同样提供了针对某一个 HTML5 属性的属性：</p><p><strong>th:classappend</strong> <strong>和</strong> <strong>th:styleappend</strong> <strong>属性。</strong> 给 class 属性值后附加值就可以这样写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;prod : $&#123;prods&#125;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">th:classappend</span>=<span class="hljs-string">&quot;$&#123;prodStat.odd&#125;? &#x27;odd&#x27;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="固定值布尔属性"><a href="#固定值布尔属性" class="headerlink" title="固定值布尔属性"></a>固定值布尔属性</h4><img src="/images/Thymeleaf/订阅查名.png" alt="订阅查名" style="zoom:67%;" /><p>倘若用户在订阅网站的更新消息时需要勾选是否有 英文名、中文名，普通的做法是创建三个复选框或单选框：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;isenname&quot;</span> /&gt;</span>是否有英文名<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;iscnname&quot;</span> /&gt;</span>是否有中文名<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;isname&quot;</span> /&gt;</span>是否佚名<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后由用户自行选择。</p><p>但是用户在网站注册账号时就已经提供了相关信息，名字都已记录在数据库中，我们是否可以先去数据库中查询相关信息，再预先帮用户选择呢？完全可以。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;isenname&quot;</span> <span class="hljs-attr">th:checked</span>=<span class="hljs-string">&quot;$&#123;user.enname&#125;&quot;</span> /&gt;</span>是否有英文名<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;iscnname&quot;</span> <span class="hljs-attr">th:checked</span>=<span class="hljs-string">&quot;$&#123;user.cnname&#125;&quot;</span> /&gt;</span>是否有中文名<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;isname&quot;</span> <span class="hljs-attr">th:checked</span>=<span class="hljs-string">&quot;$&#123;user.nname&#125;&quot;</span> /&gt;</span>是否佚名<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果没有名字，user.nname 值为 true ，th:check 属性的值为 true 或不为 null 或 是非零数字 时，浏览器都会预先勾选上选择框（即设置成固定值）；否则，值为 false 或为 null 或为 0 或为 off 或为 no 时 ，不会勾选。 （除了 0 和 null ，其它都可被单引号围住）</p><h4 id="固定值布尔属性还有："><a href="#固定值布尔属性还有：" class="headerlink" title="固定值布尔属性还有："></a>固定值布尔属性还有：</h4><table>    <tr>        <th>th:async</th>        <th>th:autofocus</th>        <th>th:autoplay</th>    </tr>    <tr>        <th>th:checked</th>        <th>th:controls</th>    </tr>    <tr>        <th>th:declare</th>        <th>th:default</th>        <th>th:defer</th>        <th>th:disabled</th>    </tr>    <tr>        <th>th:formnovalidate</th>    </tr>    <tr>        <th>th:hidden</th>    </tr>    <tr>        <th>th:ismap</th>    </tr>    <tr>        <th>th:loop</th>    </tr>    <tr>        <th>th:multiple</th>    </tr>    <tr>        <th>th:novalidate</th>        <th>th:nowrap</th>    </tr>    <tr>        <th>th:open</th>    </tr>    <tr>        <th>th:pubdate</th>    </tr>    <tr>        <th>th:readonly</th>        <th>th:required</th>        <th>th:reversed</th>    </tr>    <tr>        <th>th:scoped</th>        <th>th:seamless</th>        <th>th:selected</th>    </tr></table><h4 id="可以承包任何属性值的-th-whatever"><a href="#可以承包任何属性值的-th-whatever" class="headerlink" title="可以承包任何属性值的  th:whatever"></a>可以承包任何属性值的  th:whatever</h4><p><strong>th:whatever</strong> 可以被设置成任何属性值，即使没有通过 <strong>th:*</strong> 指定具体的属性。</p><p>最后：要完成属性赋值或修改值的操作，同样可以用 HTML5 的语法：<strong>data-th-*</strong> ，或者用 W3C 规范的 <strong>th-*</strong> ，这些语法在将来都不会被 <strong>th:*</strong> 取代。</p>]]></content>
    
    
    <categories>
      
      <category>Thymeleaf入门篇---学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Thymeleaf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Thymeleaf特点（2）- 数据类型</title>
    <link href="/2021/07/21/2021-07-21-Thymeleaf%E7%89%B9%E7%82%B9%EF%BC%882%EF%BC%89/"/>
    <url>/2021/07/21/2021-07-21-Thymeleaf%E7%89%B9%E7%82%B9%EF%BC%882%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p class="note note-info"><font size="3" color="blue">这次我们学习 Thymeleaf 支持的数据类型。</font></p><p><span class="label label-default">字符串型： <strong>&#39;one text&#39;</strong> <strong>,</strong> <strong>&#39;Another one!&#39;</strong> <strong>,…</strong> </span></p><p><span class="label label-info">小数及整数：<strong>0</strong> <strong>,</strong> <strong>34</strong> <strong>,</strong> <strong>3.0</strong> <strong>,</strong> <strong>12.3</strong> <strong>,…</strong> </span></p><p><span class="label label-primary">布尔值：<strong>true</strong> <strong>,</strong> <strong>false</strong> </span></p><p><span class="label label-warning">空值：<strong>null</strong>  </span></p><p><span class="label label-danger">文字标记：<strong>one text</strong> <strong>,</strong> <strong>34</strong> <strong>,…</strong>  </span></p><h4 id="字符串型"><a href="#字符串型" class="headerlink" title="字符串型"></a>字符串型</h4><p>就像这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    Now you are looking at a <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;&#x27;working web application&#x27;&quot;</span>&gt;</span>template file<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>字符串型的数据需要用单引号引起来，不能用双引号。如果单引号也是字符串的一部分，必须要用转义字符 <strong>\&#39;</strong> 。</p><h4 id="数字型"><a href="#数字型" class="headerlink" title="数字型"></a>数字型</h4><p>就像这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>The year is <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;2013&quot;</span>&gt;</span>1492<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>In two years, it will be <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;2013 + 2&quot;</span>&gt;</span>1494<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>纯正的数字不需要任何单引号或双引号。此处的双引号是 th:text 的语法要求。</p><h4 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h4><p>就像这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;user.isAdmin()&#125; == false&quot;</span>&gt;</span> ...<br></code></pre></td></tr></table></figure><p>双引号内的值若是 false ，该元素不会被解析；只有是 true 时元素才会显示在浏览器上。</p><p>和下列代码等效：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;user.isAdmin() == false&#125;&quot;</span>&gt;</span> ...<br></code></pre></td></tr></table></figure><p>它们的区别是 == false 在大括号外的是 Thymeleaf 的语法。而 == false 在大括号内的是<strong>OGNL/SpringEL</strong> 的语法。</p><h4 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h4><p>就像这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;variable.something&#125; == null&quot;</span>&gt;</span> ...<br></code></pre></td></tr></table></figure><p>null 值可以用来比较。</p><h4 id="文字标记"><a href="#文字标记" class="headerlink" title="文字标记"></a>文字标记</h4><p>数字、布尔值、空值实际上是文字标记的一种特殊情况。那文字标记有什么优点呢？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-comment">&lt;!--文字标记--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:class</span>=<span class="hljs-string">&quot;&#x27;content&#x27;&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以省去单引号。</p><p>数据类型是值和操作的集合，接下来讲一下基本操作。</p><h4 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接  +"></a>字符串拼接  +</h4><p>无论是文本值还是变量值，都可以用  <strong>+</strong>  进行拼接。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;&#x27;The name of the user is &#x27; + $&#123;user.name&#125;+.&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h4 id="文字替换"><a href="#文字替换" class="headerlink" title="文字替换  |"></a>文字替换  |</h4><p>用文字替换实现上述字符串拼接，等效于</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;|The name of the user is, $&#123;user.name&#125;|+.&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>也可以混着用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.enname&#125;+|$&#123;user.enname&#125;,$&#123;user.cnname&#125;|+.&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>但是文字替换操作仅限 <strong>${…}</strong> <strong>,</strong> <strong>*{…}</strong> <strong>,</strong> <strong>#{…}</strong> 三个表达式。下面的代码会抛出异常。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;The name are+|$&#123;user.enname&#125;,$&#123;user.cnname&#125;|+.&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>给 The name are 用单引号引起是可行的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;&#x27;The name are&#x27;+|$&#123;user.enname&#125;,$&#123;user.cnname&#125;|+.&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h4 id="算术运算-和"><a href="#算术运算-和" class="headerlink" title="算术运算  + , - , * , / 和 %"></a>算术运算  + , - , * , / 和 %</h4><p>其中 <strong>/</strong> 有文本别名 <strong>div</strong> ， <strong>%</strong> 有文本别名 <strong>mod</strong> ，在实际代码中两者等效。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:with</span>=<span class="hljs-string">&quot;isEven=($&#123;prodStat.count&#125; % 2 == 0)&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>算术运算就是数学运算。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:with</span>=<span class="hljs-string">&quot;isEven=$&#123;prodStat.count % 2 == 0&#125;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当把 == 放进花括号中，代码将由 OGNL 执行，之前学过了。</p><h4 id="比较-gt-lt-gt-lt"><a href="#比较-gt-lt-gt-lt" class="headerlink" title="比较  &gt;  &lt;  &gt;=  &lt;=  !  ==  !="></a>比较  &gt;  &lt;  &gt;=  &lt;=  !  ==  !=</h4><p>&gt; (gt) ，&lt;(lt) ，&gt;=(ge) ，&lt;=(le) ，!(not) ，==(eq) ，!=(neq / ne)</p><p>符号和英文别名等效。</p><p>要注意，&gt;(gt) 和 &lt;(lt) 不能直接用在属性值的比较中，要用 &amp;gt 和 &amp;lt 代替。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;&#x27;字符串&#x27;&quot;</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;user.cnname&#125; <span class="hljs-symbol">&amp;lt;</span> 超杰&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>;</strong> 分割前后两个比较值，字符串也可比较。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;&#x27;Execution mode is &#x27; + ( ($&#123;user.enname&#125; == &#x27;CJ&#x27;)? &#x27;Development&#x27; : &#x27;Production&#x27;)+&#x27;.&#x27;&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>通过比较选择可快速选择显示哪个字符串，(${user.enname} == &#39;CJ&#39;) 为 True 时，显示 <strong>:</strong> 前的字符串 ; 为 False 时，显示 <strong>:</strong> 后的字符串。</p><h4 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h4><p><strong>If-then-else:</strong> <strong>(if) ? (then) : (else)</strong> </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:class</span>=<span class="hljs-string">&quot;$&#123;user.cnname&#125;? &#x27;even&#x27; : &#x27;odd&#x27;&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br></code></pre></td></tr></table></figure><p>条件成立就选 &#39;even&#39; 否则选 &#39;odd&#39; 。如果省去(else)，没有 <strong>: &#39;odd&#39;</strong> ，那么当条件不成立时则会返回 null 。</p><p>(if) (then) (else) 可以是  <strong>${…}</strong> <strong>、</strong> <strong>*{…}</strong> <strong>、</strong> <strong>#{…}</strong> <strong>、</strong> <strong>@{…}</strong> <strong>、</strong> <strong>&#39;…&#39;</strong></p><p>条件表达式可以嵌套：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:class</span>=<span class="hljs-string">&quot;$&#123;user.enname&#125;? ($&#123;user.cnname&#125;? &#x27;first&#x27; : &#x27;even&#x27;) : &#x27;odd&#x27;&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>Default:</strong> <strong>(value) ?: (defaultvalue)</strong> </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.cnname&#125;?: &#x27;佚名&#x27;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>默认表达式是一种特殊的条件表达式，当 (value) 值为 null 时，选择 <strong>:</strong> 后面的值，否则就选择其本身的值，如果本身值为 false ，就选择 false 。默认表达式也可以嵌套。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.cnname&#125;?: ($&#123;user.enname&#125;?: &#x27;佚名&#x27;)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>先判断用户有没有中文名，有就显示中文名；否则再去判断有没有英文名，有就显示英文名；如果都没有就显示佚名。</p><p>把 佚名 放外面，用 _ 替代 &#39;佚名&#39;：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;user.ename&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">?: _&quot;</span>&gt;</span>佚名<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>也会有上面的效果，这样做的好处是更简洁和通用（官方说的）。</p><p class="note note-info"><font size="3" color="blue">所有这些特点都可以被组合和嵌套</font></p><p>&#39;User is of type &#39; + (${user.isAdmin()} ? &#39;Administrator&#39; : (${user.type} ?: &#39;Unknown&#39;))</p><h4 id="除了处理表达式的特点，thymeleaf-还有预处理表达式的特点。"><a href="#除了处理表达式的特点，thymeleaf-还有预处理表达式的特点。" class="headerlink" title="除了处理表达式的特点，thymeleaf 还有预处理表达式的特点。"></a>除了处理表达式的特点，thymeleaf 还有预处理表达式的特点。</h4><p>如果有一个配置文件 <strong>Messages_fr.properties</strong> ，保存了一个 OGNL 表达式，是用来指定语言的静态方法。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">article.text</span>=<span class="hljs-string">@myapp.translator.Translator@translateToFrench(&#123;0&#125;) </span><br></code></pre></td></tr></table></figure><p>当我们根据本地设置来编写代码时，首先要通过预处理选择该表达式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;__#&#123;article.text(&#x27;textVar&#x27;)&#125;__&#125;&quot;</span>&gt;</span>Some text here...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>相比（不使用预处理）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;@myapp.translator.Translator@translateToFrench(textVar)&#125;&quot;</span>&gt;</span>Some text here...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>而言，要简洁的多，预处理符号 __ 可用 \_\_ 代替。双花括号是格式化的语法，仅适用于 <strong>${…}</strong> 和 <strong>*{…}</strong> 。</p><hr><p>— 【参考资料 —— <a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html"><font color="blue">Thymeleaf文档20181029 - 29 October 2018</font></a>】</p>]]></content>
    
    
    <categories>
      
      <category>Thymeleaf入门篇---学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Thymeleaf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Thymeleaf特点（1）- 初探语法</title>
    <link href="/2021/07/21/2021-07-19-Thymeleaf%E7%89%B9%E7%82%B9%EF%BC%881%EF%BC%89/"/>
    <url>/2021/07/21/2021-07-19-Thymeleaf%E7%89%B9%E7%82%B9%EF%BC%881%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>Thymeleaf  支持对 <strong>HTML</strong> <strong>XML</strong>  <strong>TEXT</strong>  <strong>JAVASCRIPT</strong>  <strong>CSS</strong>  <strong>RAW</strong> 6种模板的处理。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Good Thymes Virtual Grocery<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;#&#123;home.welcome&#125;&quot;</span>&gt;</span>Welcome to our grocery store!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在&lt;html&gt;标签中加入 xmlns:th 属性，可以让诸如 th:* 的语法被支持。该语法是 Thymeleaf 所特有的，在程序运行期间，&lt;p&gt;&lt;/p&gt;标签会优先显示 home.welcome 的值，如果找不到值，才会显示默认的 “Welcome to our grocery store!” 。</p><p>html5 中 data-th-* 有同样的功能，但是 Thymeleaf 可将此特性用在它支持的任何模板上，而不仅是 html。 </p><p class="note note-info"><font size="3" color="blue">home.welcome的值在哪？又该怎么定义呢？ </font></p><span class="label label-success"># 表示读取配置文件中的值，所以先创建一个配置文件（后缀名为 .properties），在里面写上表达式 :</span><p>home.welcome=欢迎光临我们的杂货店！</p><p>然后将此文件放置在 resource 文件夹下，例如在这里是：/resource/static</p><p><img src="/images/Thymeleaf/home_cn.png" alt="home_cn"></p><p>最后在 application.properties 文件中配置，加入表达式：</p><p>spring.messages.basename=static/home_cn</p><p>如果在配置文件中使用标签，就像这样：home.welcome=欢迎光临我们的&lt;p&gt;杂货店&lt;/p&gt;！</p><img src="/images/Thymeleaf/浏览器.png" alt="浏览器" style="zoom:80%;" /><p>标签会被当成文本处理。</p><p><img src="/images/Thymeleaf/utext.png" alt="utext"></p><p>我们使用 th:utext 就可以让标签发挥作用。</p><img src="/images/Thymeleaf/浏览器utex.png" alt="浏览器utex" style="zoom:80%;" /><p class="note note-info"><font size="3" color="blue">除了 \# ，另外还有 $、*、@、~ 等标识符。 </font></p><p>要实现同样的功能，通过 $ 可以这样写：</p><p><img src="/images/Thymeleaf/$.png" alt="$"></p><p><span class="label label-success">$ 是变量标识符，它会用变量 welcome 的值来代替默认的值，我们只需在控制器中把变量加入模型就行了。</span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demospring.Control;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">demoController</span> </span>&#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">home</span><span class="hljs-params">(Model model)</span></span>&#123;<br>        model.addAttribute(<span class="hljs-string">&quot;welcome&quot;</span>,<span class="hljs-string">&quot;欢迎光临我们的杂货店！&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;home&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><span class="label label-success">* 是选择变量标识符，跟 $ 很像，当对象有多个变量时进行选择。所以没有对象时两者就完全一样啦。</span></p><img src="/images/Thymeleaf/传入对象.png" alt="传入对象" style="zoom:80%;" /><p>在控制器中传入对象 users ，users 有两个属性，分别是用户的英文名字和用户的中文名字。</p><p><img src="/images/Thymeleaf/user.png" alt="user"></p><p>下面四段代码完全等效：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:object</span>=<span class="hljs-string">&quot;$&#123;user&#125;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>en_Name: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*&#123;enname&#125;&quot;</span>&gt;</span>Sebastian<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>cn_Name: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*&#123;cnname&#125;&quot;</span>&gt;</span>塞巴斯蒂安<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>en_Name: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*&#123;user.enname&#125;&quot;</span>&gt;</span>Sebastian<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>cn_Name: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*&#123;user.cnname&#125;&quot;</span>&gt;</span>塞巴斯蒂安<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>en_Name: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*&#123;user.enname&#125;&quot;</span>&gt;</span>Sebastian<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>cn_Name: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.cnname&#125;&quot;</span>&gt;</span>塞巴斯蒂安<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:object</span>=<span class="hljs-string">&quot;$&#123;user&#125;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>en_Name: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*&#123;enname&#125;&quot;</span>&gt;</span>Sebastian<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>cn_Name: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.cnname&#125;&quot;</span>&gt;</span>塞巴斯蒂安<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>它们的结果都是：</p><img src="/images/Thymeleaf/浏览器user.png" alt="浏览器user" style="zoom:80%;" /><p>正如所说的那样，如果没有对象的选择，$ 和 * 是完全等效的。</p><p><span class="label label-success">@ 是链接url标识符。</span></p><p>链接在 web 应用中非常重要，常见的 url 形式如下：</p><p>绝对路径：<a href="https://www.tcjblog.com/">https://www.tcjblog.com</a></p><p>相对路径：/static/css/home.css</p><p>下面这段代码可实现一个指向主页面2的文本超链接。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/home2.html&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/home2&#125;&quot;</span>&gt;</span>链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="/images/Thymeleaf/主页文本超链接(home2.html).png" alt="主页文本超链接(home2.html)" style="zoom:80%;" /><p>一个链接组，直接指向外部网站。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>链接选项<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;https://tcj155038.gitee.io/download/&#125;&quot;</span>&gt;</span>下载<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;https://tcj155038.gitee.io/&#125;&quot;</span>&gt;</span>个人网站<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;https://www.tcjblog.com&#125;&quot;</span>&gt;</span>个人网站<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;https://www.baidu.com&#125;&quot;</span>&gt;</span>百度一下<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="/images/Thymeleaf/链接组.png" alt="链接组" style="zoom:80%;" /><p><span class="label label-success">~ 是片段复制标识符。</span></p><p>当两个页面非常相似，~ 用元素复制的方式减少了大量的重复代码。例如(home.html)：</p><p><img src="/images/Thymeleaf/%E5%85%83%E7%B4%A0%E5%A4%8D%E5%88%B6.png" alt="元素复制"></p><p>如图所示需要复制的元素，加入 th:fragment=”编号(此处是copy)”</p><p><img src="/images/Thymeleaf/%E5%8F%A6%E4%B8%80%E4%B8%AAhtml.png" alt="另一个html"></p><p>在另一个 html 文件(home2.html)的对应元素下加入 th:insert=”~{home :: copy}” (两个html文件在同一目录下，home 是 html 文件的名称，copy 是编号)，粘贴还可以这么写：</p><p><img src="/images/Thymeleaf/%E5%8F%A6%E7%B2%98%E8%B4%B4.png" alt="另粘贴"></p><p>运行结果：<img src="/images/Thymeleaf/%E4%B8%BB%E9%A1%B5%E6%96%87%E6%9C%AC%E8%B6%85%E9%93%BE%E6%8E%A5(home2.html).png" alt="主页文本超链接(home2.html)"></p><hr><p>— 【参考资料 —— <a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html"><font color="blue">Thymeleaf文档20181029 - 29 October 2018</font></a>】</p>]]></content>
    
    
    <categories>
      
      <category>Thymeleaf入门篇---学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Thymeleaf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Thymeleaf</title>
    <link href="/2021/07/19/2021-07-18-Thymeleaf/"/>
    <url>/2021/07/19/2021-07-18-Thymeleaf/</url>
    
    <content type="html"><![CDATA[<p>Thymeleaf是 Java 服务器端的视图模板，例如在 Spring Boot 应用中。它让团队间的分工更明确。</p>]]></content>
    
    
    <categories>
      
      <category>Thymeleaf入门篇---学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Thymeleaf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实现一个简单的Spring实例</title>
    <link href="/2021/07/19/2021-07-18-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E4%BE%8B%E5%AD%90/"/>
    <url>/2021/07/19/2021-07-18-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E4%BE%8B%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<p>最简单的spring应用包含一个控制器和一个视图。控制器负责处理网页请求；视图则负责渲染浏览器。</p><img src="/images/spring/控制器类和html视图.png" alt="demo" style="zoom:80%;" /><p>不过我们这里还有模型（Model），用来中转数据。</p><p>home控制器类：</p><img src="/images/spring/home控制器.png" alt="home控制器" style="zoom:67%;" /><p>home视图（thymeleaf模板）：</p><img src="/images/spring/home视图.png" alt="home视图" style="zoom:67%;" /><p class="note note-info"><font size="3" >Thymeleaf帮助文档可在博客的下载页面下载（目前下载通道已关闭）</font></p><p>开始运行后控制台会输出一些信息，例如开启的端口等</p><img src="/images/spring/控制台打印.png" alt="控制台打印" style="zoom:80%;" /><p>在浏览器中输入网址访问</p><img src="/images/spring/web.png" alt="web" style="zoom:58%;" /><p>视图中的默认数据被模型中的数据替代了。</p>]]></content>
    
    
    <categories>
      
      <category>Spring入门篇---学习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring项目结构分析</title>
    <link href="/2021/07/18/2021-07-18-Spring%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/"/>
    <url>/2021/07/18/2021-07-18-Spring%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<img src="\images\spring\项目结构.png" alt="项目结构" style="zoom:67%;" /><p><span class="label label-success"><font size="3">DemospringApplication：</font></span>Spring Boot的程序入口。整个应用从这里开始。</p><p><span class="label label-success"><font size="3">static：</font></span>和templates是好搭档，用来存放静态资源，例如：图片、js、css。</p><p><span class="label label-success"><font size="3">templates：</font></span>非常重要的一个东西，用来存放渲染内容到浏览器的文件。</p><p><span class="label label-success"><font size="3">application.properties：</font></span>Spring Boot 的配置文件，可以配置访问的端口和数据库连接等。</p><p><span class="label label-success"><font size="3">DemospringApplicationTests：</font></span>一个测试类。通过测试可确保程序能正确运行。</p><p><span class="label label-success"><font size="3">pom.xml：</font></span>这是 maven 的配置文件，在该文件里面写着已经导入的依赖等。后续如果要导入其它依赖的话也可以在该文件配置。</p><p><span class="label label-success"><font size="3">External Libraries：</font></span>顾名思义，这是除本项目以外的用 Java 开发的其它程序。如果别人已经开发了解决一种问题的算法，那么我们可以直接调用，而不用重复造轮子。在这里 maven 根据我们选择的依赖已经为我们导入了相关的库了。</p>]]></content>
    
    
    <categories>
      
      <category>Spring入门篇---学习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>创建Spring项目</title>
    <link href="/2021/07/18/2021-07-18-%E5%88%9B%E5%BB%BASpring%E9%A1%B9%E7%9B%AE/"/>
    <url>/2021/07/18/2021-07-18-%E5%88%9B%E5%BB%BASpring%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<p>博主这次选择的开发平台是IDEA，类似的开发平台还有Spring Tool Suite 、Eclipse等。</p><img src="\images\spring\欢迎界面.png" alt="欢迎界面" style="zoom:80%;" />  <img src="\images\spring\新建项目界面.png" alt="新建项目界面" style="zoom:68%;" />  <img src="\images\spring\版本及依赖选择.png" alt="版本及依赖选择" style="zoom:70%;" />    <img src="\images\spring\项目界面.png" alt="项目界面" style="zoom:50%;" />  <p>完成后IDEA会构建一个初始的Spring Boot项目。</p>]]></content>
    
    
    <categories>
      
      <category>Spring入门篇---学习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>博客浏览导航</title>
    <link href="/2021/07/18/2021-07-18-%E5%8D%9A%E5%AE%A2%E6%B5%8F%E8%A7%88%E5%AF%BC%E8%88%AA/"/>
    <url>/2021/07/18/2021-07-18-%E5%8D%9A%E5%AE%A2%E6%B5%8F%E8%A7%88%E5%AF%BC%E8%88%AA/</url>
    
    <content type="html"><![CDATA[<p><span class="label label-success"><font size = "3">由于浏览器有缓存，所以请手动刷新网页以查看更新。</font></span></p><p><span class="label label-success"><font size = "3">感谢关注我的博客，你可以点击博客顶部的导航栏中的分类或标签，从而挑选自己感兴趣的话题。</font></span></p><p><span class="label label-primary"><font size = "3">如果你想了解这个网站，请移步至：<a href="https://tcjblog.com/websitestatement"><font color="blue">网站声明</font></a> 。</font></span></p><p><span class="label label-primary"><font size = "3">如果你想了解我，请移步至：<a href="https://tcjblog.com/about"><font color="blue">简介</font></a> &amp; <a href="https://tcjblog.com/selfevaluation"><font color="blue">自评</font></a> 。</font></span></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring</title>
    <link href="/2021/07/18/2021-07-17-Spring/"/>
    <url>/2021/07/18/2021-07-17-Spring/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/spring/%E5%85%A8%E6%96%87%E6%80%9D%E7%BB%B4%E8%84%91%E5%9B%BE.png" alt="全文思维脑图"></p><p class="note note-info"><font size="3" color="blue">What spring?</font></p><p><span class="label label-success">Spring 是用 Java 开发的一个软件开发框架。</span></p><p class="note note-info"><font size="3" color="red">Why spring?</font></p><p><span class="label label-success">使用 Spring 框架可轻松开发现代化应用。</span></p>]]></content>
    
    
    <categories>
      
      <category>Spring入门篇---学习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>人工智能真的会统治地球吗？</title>
    <link href="/2021/07/16/2021-07-16-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%9C%9F%E7%9A%84%E4%BC%9A%E7%BB%9F%E6%B2%BB%E5%9C%B0%E7%90%83%E5%90%97%EF%BC%9F/"/>
    <url>/2021/07/16/2021-07-16-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%9C%9F%E7%9A%84%E4%BC%9A%E7%BB%9F%E6%B2%BB%E5%9C%B0%E7%90%83%E5%90%97%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/AI/%E5%85%A8%E6%96%87%E6%80%9D%E7%BB%B4%E8%84%91%E5%9B%BE.webp" alt="全文思维脑图"></p><h5 id="首先，人工智能是什么？对于这个问题，一直以来就有不同的答案。"><a href="#首先，人工智能是什么？对于这个问题，一直以来就有不同的答案。" class="headerlink" title="首先，人工智能是什么？对于这个问题，一直以来就有不同的答案。"></a>首先，人工智能是什么？对于这个问题，一直以来就有不同的答案。</h5><p>一般人认为AI是即将统治地球的机器人。（博主之前也是这么认为的）</p><p>对AI有些许了解的人认为这是可以自主学习的程序。</p><p>在本文中，我们对AI有如下定义：AI是智能的机器或程序。</p><p>那么智能又是什么呢？我们暂时可以理解为生物智能。那么AI就是拥有接近或超过人类智慧的机器或程序。</p><h5 id="其次，既然AI这么神奇，那么它的原理是什么？"><a href="#其次，既然AI这么神奇，那么它的原理是什么？" class="headerlink" title="其次，既然AI这么神奇，那么它的原理是什么？"></a>其次，既然AI这么神奇，那么它的原理是什么？</h5><p>在上个世纪五十年代到七十年代初，AI处于“推理期”，那时人们认为只要赋予机器逻辑推理能力，机器就具有智能。而且也取得了巨大成就，例如“逻辑理论家”程序在1963年证明了著名数学家罗素和怀特海的名著《数学原理》中的全部52条定理，更有意思的是，定理2.85甚至比罗素和怀特海证明得更巧妙。该程序作者 A.Newell 和 H.Simon 也因这方面的工作获得了1975年<u>图灵奖</u>。</p><h5 id="来自秒懂百科：图灵奖对获奖条件要求极高，评奖程序极严，一般每年仅授予一名计算机科学家。图灵奖是计算机领域的国际最高奖项，被誉为“计算机界的诺贝尔奖”。"><a href="#来自秒懂百科：图灵奖对获奖条件要求极高，评奖程序极严，一般每年仅授予一名计算机科学家。图灵奖是计算机领域的国际最高奖项，被誉为“计算机界的诺贝尔奖”。" class="headerlink" title="来自秒懂百科：图灵奖对获奖条件要求极高，评奖程序极严，一般每年仅授予一名计算机科学家。图灵奖是计算机领域的国际最高奖项，被誉为“计算机界的诺贝尔奖”。"></a>来自秒懂百科：图灵奖对获奖条件要求极高，评奖程序极严，一般每年仅授予一名计算机科学家。图灵奖是计算机领域的国际最高奖项，被誉为“计算机界的<a href="https://baike.baidu.com/item/%E8%AF%BA%E8%B4%9D%E5%B0%94%E5%A5%96/187878">诺贝尔奖</a>”<strong>。</strong></h5><p>然而，随着AI的向前发展，人们逐渐认识到仅具有逻辑推理能力的机器无法达到所谓的人工智能。</p><p>这时就有人提出了要让机器获得知识。所以AI也就从二十世纪七十年代中期顺势进入了“知识期”。</p><p>在这一时期，又取得了不少成果。大量的专家系统问世，简单地说，就是人把知识进行数学转换，再赋予给计算机。发展到后期，人们认识到有些知识进行总结是相当困难的，需要耗费大量人力。</p><p>于是，又有人提出要让机器自己学得这些知识，也就是机器学习。在人工智能界，人们认为机器学习是该领域最能体现智能的一个分支。</p><h5 id="人工智能的意义又是什么？"><a href="#人工智能的意义又是什么？" class="headerlink" title="人工智能的意义又是什么？"></a>人工智能的意义又是什么？</h5><p>聪明的小伙伴可能已经发现了，人工智能可以让人类从繁重的体力和脑力劳动中解放出来。例如：无人驾驶（这也是博主当初想要学习AI的一个因素，说到底就是因为懒啦）。</p><p>但也有人认为人工智能的发展最终会毁灭人类并统治地球。对于这个问题，博主有幸从<strong>吴军博士的《数学之美》</strong>一书中得到了一些答案。在该书中，吴军博士指出，计算机的能力有数学上的边界，在最根本的层面上限制了人工智能的能力，这一边界与技术无关，仅取决于数学本身的限制。</p><h5 id="补充说明：计算机可以看成是在数学计算的基础上工作的。"><a href="#补充说明：计算机可以看成是在数学计算的基础上工作的。" class="headerlink" title="补充说明：计算机可以看成是在数学计算的基础上工作的。"></a>补充说明：计算机可以看成是在数学计算的基础上工作的。</h5><p>数学模型将各种形形色色的实际问题变成了计算问题，但有一个前提是这些问题都是可以计算的数学问题。</p><p>上个世纪，希尔伯特划定了有解数学问题的边界。如图所示</p><p><img src="/images/AI/%E6%9C%89%E8%A7%A3%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98%E7%9A%84%E8%BE%B9%E7%95%8C.webp" alt="有解数学问题的边界"></p><p>由此，我们可以知道，有答案的数学问题，不过是世界上所有问题中很少的一部分。想具体了解的同学可以点击<a href="https://baike.baidu.com/item/%E5%B8%8C%E5%B0%94%E4%BC%AF%E7%89%B9%E7%AC%AC%E5%8D%81%E9%97%AE%E9%A2%98/19128770?fr=aladdin">https://baike.baidu.com/item/%E5%B8%8C%E5%B0%94%E4%BC%AF%E7%89%B9%E7%AC%AC%E5%8D%81%E9%97%AE%E9%A2%98/19128770?fr=aladdin</a> （希尔伯特的第十问题）</p><p>而人工智能能够解决的问题又是有答案问题的很小一部分。如图所示</p><p><img src="/images/AI/%E6%9C%89%E8%A7%A3AI%E9%97%AE%E9%A2%98%E7%9A%84%E8%BE%B9%E7%95%8C.webp" alt="有解AI问题的边界"></p><p>所以，我们就不要再做杞人忧天的事了，而是应该更多的关注如何有效利用人工智能来解决人的问题。</p><hr><p>—【本文部分内容参考《数学之美》、《机器学习》，仅供学习】</p>]]></content>
    
    
    <categories>
      
      <category>人工智能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>人工智能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>好久不见，想你~~</title>
    <link href="/2021/06/27/long_time_no_see/"/>
    <url>/2021/06/27/long_time_no_see/</url>
    
    <content type="html"><![CDATA[<p>距离博主上次发布博文已经过去了69天，更新博文已经过去了41天。</p><h5 id="为什么这么久都不更新？"><a href="#为什么这么久都不更新？" class="headerlink" title="为什么这么久都不更新？"></a>为什么这么久都不更新？</h5><p>①博主每次放假在家的时间通常只有1.5天。在这1.5天中，博主需要完成学校布置的作业并在剩下的时间内完成博客的创作到发布。在此之前，博主也确实是这么干的。</p><p>②在极短的时间内很难完成高质量博文的创作。如果到假期结束了还未完成发布，就得等到下一个假期，中间需要隔11天，这就让我对一些看起来宏伟的计划敬而远之了。</p><p>③博主甚至想在学校写博文。但是从早上6:05起床到晚上9:55就寝，博主面临学业的全方位包围，在与世隔绝的环境中又怎么能有好的博文呢？</p><h5 id="这段时间在干什么？"><a href="#这段时间在干什么？" class="headerlink" title="这段时间在干什么？"></a>这段时间在干什么？</h5><p>①博主将更多精力放在了学业上，以应付学考（与高中毕业有关）。</p><p>②博主想先停下脚步，环顾四周，学习更多更好的博客技术。</p><p>③继续探索计算机~</p><h5 id="马上放暑假了"><a href="#马上放暑假了" class="headerlink" title="马上放暑假了"></a>马上放暑假了</h5><p>博主会继续推送有关计算机的博文，对博客进行整改（美化等）。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>机器学习中的导数和梯度（学习笔记）</title>
    <link href="/2021/04/18/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E5%AF%BC%E6%95%B0%E5%92%8C%E6%A2%AF%E5%BA%A6%EF%BC%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%89/"/>
    <url>/2021/04/18/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E5%AF%BC%E6%95%B0%E5%92%8C%E6%A2%AF%E5%BA%A6%EF%BC%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>博主将会在本文中把对于导数和梯度在机器学习中的意义和应用的理解做一个整理并供大家参考，欢迎批评指正！文章总体结构：<img src="/images/machine_learning_daoti/%E5%85%A8%E6%96%87%E6%80%9D%E7%BB%B4%E8%84%91%E5%9B%BE.png" alt="全文思维脑图"></p><p>传播搞机的快乐，分享计算机知识！—TCJ</p><hr><h4 id="1-导数和梯度的意义"><a href="#1-导数和梯度的意义" class="headerlink" title="1.导数和梯度的意义"></a>1.导数和梯度的意义</h4><h5 id="1-1导数："><a href="#1-1导数：" class="headerlink" title="1.1导数："></a>1.1导数：</h5><p>导数（derivative）是微积分的重要概念。设函数 y = f(x) 在点 x0 的某个领域内有定义，当自变量 x 在 x0 的某个邻域内有定义 ，当自变量 x 在 x0 处取得增量 △x 时，相应的函数 y 将取得增量 △y ；如果 △y 与 △x 之比在 △x → 0 时存在极限，则称函数 y = f(x) 在点 x0 处可导，并称这个极限为函数 y = f(x) 在点 x0 的导数。</p><p>这个定义是不是有点像在物理上求瞬时速度？</p><p>v = s / t ；当 t → 0 时， v 可看作在某一时刻的瞬时速度。</p><p>在几何上，导数可看作是函数在某一点的切线的斜率。<img src="/images/machine_learning_daoti/%E5%8A%A8%E5%9B%BE%E6%BC%94%E7%A4%BA.gif" alt="动图演示"></p><p>如图所示，当 △t 趋近于 0 时，导数就是函数 f(x) 在 t0 点的切线。此时可求得在时刻 t0 时的瞬时速度。</p><h5 id="1-2梯度："><a href="#1-2梯度：" class="headerlink" title="1.2梯度："></a>1.2梯度：</h5><p>梯度（gradient）是一个向量，它既有方向又有大小。它的方向是某一函数在某点处变化率最大的方向，此时它的大小就是变化率。</p><p>我们假设一个场景：现在有一个宝箱，放在山顶最高处。山下有三队人马同时开始上山，向宝箱进发</p><p><u>注明：</u>我们假设此处最快到达最高处的队伍获胜，而不去考虑实际的路程等。也就是和宝箱处于同一高度即可，不去管他们之间的水平距离。</p><p>显然，他们需要对当前所处位置做一个判断，找出走最少的路上升最大的高度的方向。然后沿着这个方向走几步，再判断方向，再走几步，以此类推，直到走到最高处。</p><p>类似的，梯度就是这个方向，山就是某个函数，宝箱所处位置就是函数的最高点，三队人马是除最高点外的其它任意三个函数上的点。可以看出，梯度的方向就是函数在某点变化率最大的方向，有了它的帮助，可找到函数的最高点或最低点。</p><h5 id="1-3小结："><a href="#1-3小结：" class="headerlink" title="1.3小结："></a>1.3小结：</h5><p>导数在几何上可看作某一函数上在某一点的切线的斜率，</p><p>对于单个自变量的函数，</p><p>导数就是该点的梯度。</p><p>对于多个自变量的函数，</p><p>我们对每个自变量都进行求导，</p><p>梯度就是每个导数所组成的向量。</p><p>梯度方向是某一函数在某一点上的变化率最大的方向，由此进行迭代计算可找到函数的最值。</p><h4 id="2-导数和梯度的数学计算"><a href="#2-导数和梯度的数学计算" class="headerlink" title="2.导数和梯度的数学计算"></a>2.导数和梯度的数学计算</h4><p>在了解了导数的基本概念后，我们需要对它进行计算才能运用到实际。</p><p>从它的定义可知，</p><p>若我们已知某一物体的行进路程和时间可由图中的函数描述（此处近似看作函数 y = x*x , 方便讨论），</p><p>显然，t &gt;= 0 ，且当 t = 0 时，函数值为 0 ，是该函数的最低点。</p><p>现在我们任取一时间点 t0 = 100，</p><p>用梯度下降的方法找到 路程的最小值 和 此时的时间 t1 ，</p><p>对于任一 t ( t&gt;=0 )，求导得到：f ’(t) = 2t；过程如下</p><p><img src="/images/machine_learning_daoti/%E6%89%8B%E5%86%99%E6%B1%82%E5%AF%BC%E8%BF%87%E7%A8%8B.png" alt="手写求导过程"></p><p>此处 μ 为每次更新的步长，取值 0.1，前面添加“ — ”号表示沿着负梯度方向（μ 若过大，可能会错过最低点；若过小，可能会迟迟找不到最低点）</p><p>我们让计算机来帮忙算一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">sec</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">double</span> rate = <span class="hljs-number">0.1</span>;<br>        <span class="hljs-keyword">double</span> t0 = <span class="hljs-number">100</span>;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            i++;<span class="hljs-comment">//记录迭代次数</span><br>            <span class="hljs-keyword">double</span> s = t0*t0;<br>            t0 = t0 -<span class="hljs-number">2</span>*rate*t0;<br>            System.out.println(<span class="hljs-string">&quot;第&quot;</span>+i+<span class="hljs-string">&quot;次迭代&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;时间 : &quot;</span>+t0);<br>            System.out.println(<span class="hljs-string">&quot;路程 : &quot;</span>+s);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/machine_learning_daoti/%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BF%AD%E4%BB%A3%E7%BB%93%E6%9E%9C.png" alt="控制台迭代结果"></p><p>计算机瞬间就找到了最小路程为 0 ，时间为 1.0E-323（这里不是 0 是因为计算精度造成的，但可近似看作是 0）</p><p>当然，用梯度下降来求解此函数的最小值是没有现实意义的。更一般的，机器学习任务中的特征空间大多是多维的（即拥有多个自变量）。下面让我们来讨论一下它在机器学习中的具体应用。</p><h5 id="2-1知识点小结："><a href="#2-1知识点小结：" class="headerlink" title="2.1知识点小结："></a>2.1知识点小结：</h5><p>求导公式：<img src="/images/machine_learning_daoti/%E6%B1%82%E5%AF%BC%E9%80%9A%E5%BC%8F.png" alt="求导通式"></p><h4 id="3-导数和梯度的应用"><a href="#3-导数和梯度的应用" class="headerlink" title="3.导数和梯度的应用"></a>3.导数和梯度的应用</h4><p>在机器学习任务中，我们一般会选择一个代价函数来描述学得的模型的输出与真实值之间的差距（即误差），并通过不断减小代价函数的值来优化模型。</p><p>例如：</p><p>常用的线性回归模型，</p><p>y = <strong>w</strong> * <strong>x</strong> + b，</p><p>用合适的代价函数描述误差，</p><p>E = (1/2)*Σ（f(x) – y）^2，（1/2 是为了抵销平方后的 2，对结果无影响）</p><p>试着减小它的误差，</p><p>对此进行求导，</p><p><img src="/images/machine_learning_daoti/%E9%93%BE%E5%BC%8F%E6%B1%82%E5%AF%BC.png" alt="链式求导"></p><p>链式法则可有效降低求导复杂度</p><p><img src="/images/machine_learning_daoti/%E5%88%86%E6%AD%A5%E6%B1%82%E5%AF%BC1.png" alt="分步求导1"></p><p><img src="/images/machine_learning_daoti/%E5%88%86%E6%AD%A5%E6%B1%82%E5%AF%BC2.png" alt="分步求导2"></p><p>往梯度的反方向上适当前进，</p><p>△wi = – μ * xi * ( Y – y )  ，（Y 是模型的输出，y 是真实值，x 是输入的特征，μ是学习率）</p><p>同理可得，</p><p>△b = – μ * ( Yi – yi )</p><h5 id="3-1小结："><a href="#3-1小结：" class="headerlink" title="3.1小结："></a>3.1小结：</h5><p>导数和梯度在机器学习中有重要的应用，可以说是智能原理的核心。</p><p>常见的神经网络模型就是基于此的。</p><h4 id="4-用对率回归函数实践"><a href="#4-用对率回归函数实践" class="headerlink" title="4.用对率回归函数实践"></a>4.用对率回归函数实践</h4><p>有了第三节的讨论，</p><p>我们可类似的对对率回归函数进行学习规则的推导，</p><p>y = 1/(1+e^-z )，</p><p>省略过程，</p><p>对 f(x) 求导得到，</p><p>f’(x) = f(x)*(1–f(x))，</p><p>仍用均方误差描述，</p><p>最终对于 z = <strong>w</strong> * <strong>x</strong> + b 中的 <strong>w</strong> 和 b，</p><p>其更新式为，</p><p>△wi = –μ * xi * Y * (1–Y) * (Y–y)</p><p>△b = –μ * Y * (1–Y) * (Y–y)</p><p> 要进行机器学习，首先得要有数据。这里使用一个西瓜数据集（来源《机器学习》侵权即删），我们用它来构造一个能分类西瓜好坏的学习模型。</p><p>我们用留出法对原始数据进行处理，分为训练集和测试集。</p><p>最后用错误率来评估模型性能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">sigmoid</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 训练集:</span><br><span class="hljs-comment">     * (正例，都是好瓜①密度 0.697 含糖率 0.460  ②密度 0.774 含糖率0.376  ③密度 0.634 含糖率 0.264</span><br><span class="hljs-comment">     * ④密度 0.608 含糖率 0.318 ⑤密度 0.556 含糖率 0.215)</span><br><span class="hljs-comment">     * (反例①密度 0.666 含糖率 0.091 ②密度 0.243 含糖率 0.267 ③密度 0.245 含糖率 0.057</span><br><span class="hljs-comment">     * ④密度 0.343 含糖率 0.099 ⑤密度 0.639 含糖率 0.161 ⑥密度 0.657 含糖率 0.198</span><br><span class="hljs-comment">     * )</span><br><span class="hljs-comment">     * 测试集:</span><br><span class="hljs-comment">     * (正例①密度 0.481 含糖率 0.149 ②密度 0.437 含糖率 0.211 ③密度 0.403 含糖率 0.237)</span><br><span class="hljs-comment">     * (反例①密度 0.593 含糖率 0.042 ②密度 0.719 含糖率 0.103 ④密度 0.360 含糖率 0.370)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        List traindatas = <span class="hljs-keyword">new</span> ArrayList();<br>        List traindatass = <span class="hljs-keyword">new</span> ArrayList();<br>        List zresult = <span class="hljs-keyword">new</span> ArrayList();<br>        traindatas.add(<span class="hljs-number">0.697</span>);<br>        traindatass.add(<span class="hljs-number">0.460</span>);<br>        traindatas.add(<span class="hljs-number">0.774</span>);<br>        traindatass.add(<span class="hljs-number">0.376</span>);<br>        traindatas.add(<span class="hljs-number">0.634</span>);<br>        traindatass.add(<span class="hljs-number">0.264</span>);<br>        traindatas.add(<span class="hljs-number">0.608</span>);<br>        traindatass.add(<span class="hljs-number">0.318</span>);<br>        traindatas.add(<span class="hljs-number">0.556</span>);<br>        traindatass.add(<span class="hljs-number">0.215</span>);<br>        <span class="hljs-comment">//正例↑</span><br>        traindatas.add(<span class="hljs-number">0.666</span>);<br>        traindatass.add(<span class="hljs-number">0.091</span>);<br>        traindatas.add(<span class="hljs-number">0.243</span>);<br>        traindatass.add(<span class="hljs-number">0.267</span>);<br>        traindatas.add(<span class="hljs-number">0.245</span>);<br>        traindatass.add(<span class="hljs-number">0.057</span>);<br>        traindatas.add(<span class="hljs-number">0.343</span>);<br>        traindatass.add(<span class="hljs-number">0.099</span>);<br>        traindatas.add(<span class="hljs-number">0.639</span>);<br>        traindatass.add(<span class="hljs-number">0.161</span>);<br>        traindatas.add(<span class="hljs-number">0.657</span>);<br>        traindatass.add(<span class="hljs-number">0.198</span>);<br>        zresult.add(<span class="hljs-number">1</span>);<br>        zresult.add(<span class="hljs-number">1</span>);<br>        zresult.add(<span class="hljs-number">1</span>);<br>        zresult.add(<span class="hljs-number">1</span>);<br>        zresult.add(<span class="hljs-number">1</span>);<br>        zresult.add(<span class="hljs-number">0</span>);<br>        zresult.add(<span class="hljs-number">0</span>);<br>        zresult.add(<span class="hljs-number">0</span>);<br>        zresult.add(<span class="hljs-number">0</span>);<br>        zresult.add(<span class="hljs-number">0</span>);<br>        zresult.add(<span class="hljs-number">0</span>);<br>        List ftraindatas = <span class="hljs-keyword">new</span> ArrayList();<br>        List ftraindatass = <span class="hljs-keyword">new</span> ArrayList();<br>        List fzresult = <span class="hljs-keyword">new</span> ArrayList();<br>        ftraindatas.add(<span class="hljs-number">0.481</span>);<br>        ftraindatass.add(<span class="hljs-number">0.149</span>);<br>        ftraindatas.add(<span class="hljs-number">0.437</span>);<br>        ftraindatass.add(<span class="hljs-number">0.211</span>);<br>        ftraindatas.add(<span class="hljs-number">0.593</span>);<br>        ftraindatass.add(<span class="hljs-number">0.042</span>);<br>        ftraindatas.add(<span class="hljs-number">0.719</span>);<br>        ftraindatass.add(<span class="hljs-number">0.103</span>);<br>        ftraindatas.add(<span class="hljs-number">0.403</span>);<br>        ftraindatass.add(<span class="hljs-number">0.237</span>);<br>        ftraindatas.add(<span class="hljs-number">0.360</span>);<br>        ftraindatass.add(<span class="hljs-number">0.370</span>);<br>        fzresult.add(<span class="hljs-number">1</span>);<br>        fzresult.add(<span class="hljs-number">1</span>);<br>        fzresult.add(<span class="hljs-number">1</span>);<br>        fzresult.add(<span class="hljs-number">0</span>);<br>        fzresult.add(<span class="hljs-number">0</span>);<br>        fzresult.add(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">float</span> f = (<span class="hljs-keyword">float</span>) ftraindatas.size() / (traindatas.size() + ftraindatas.size());<br>        System.out.println(<span class="hljs-string">&quot;训练集数据比例:&quot;</span> + (<span class="hljs-number">1</span> - f));<span class="hljs-comment">//此处为0.64</span><br>        List ws = <span class="hljs-keyword">new</span> ArrayList();<br>        ws.add(<span class="hljs-number">0.8</span>);<span class="hljs-comment">//初始化权重</span><br>        ws.add(<span class="hljs-number">0.1</span>);<br>        <span class="hljs-keyword">double</span> b = <span class="hljs-number">1</span>;<span class="hljs-comment">//初始化偏置项</span><br>        <span class="hljs-keyword">double</span> rate = <span class="hljs-number">0.1</span>;<span class="hljs-comment">//学习率</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<span class="hljs-comment">//进行500轮学习</span><br>            <span class="hljs-keyword">int</span> ii = i + <span class="hljs-number">1</span>;<br>            System.out.println(<span class="hljs-string">&quot;第&quot;</span> + ii + <span class="hljs-string">&quot;轮学习&quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">11</span>; j++) &#123;<br>                <span class="hljs-keyword">double</span> x1 = Double.valueOf(traindatas.get(j).toString());<br>                <span class="hljs-keyword">double</span> x2 = Double.valueOf(traindatass.get(j).toString());<br>                <span class="hljs-keyword">double</span> y = Double.valueOf(zresult.get(j).toString());<br>                <span class="hljs-keyword">double</span> Y = <span class="hljs-number">1</span> / (<span class="hljs-number">1</span> + Math.pow(Math.E, -(Double.valueOf(ws.get(<span class="hljs-number">0</span>).toString()) * x1 + Double.valueOf(ws.get(<span class="hljs-number">1</span>).toString()) * x2 + b)));<br>                ws.set(<span class="hljs-number">0</span>, Double.valueOf(ws.get(<span class="hljs-number">0</span>).toString()) - rate * x1 * Y * (<span class="hljs-number">1</span> - Y) * (Y - y));<br>                ws.set(<span class="hljs-number">1</span>, Double.valueOf(ws.get(<span class="hljs-number">1</span>).toString()) - rate * x2 * Y * (<span class="hljs-number">1</span> - Y) * (Y - y));<br>                b = b - rate * Y * (<span class="hljs-number">1</span> - Y) * (Y - y);<br>                System.out.println(<span class="hljs-string">&quot;w1:&quot;</span> + ws.get(<span class="hljs-number">0</span>));<br>            &#125;<br>            <span class="hljs-keyword">int</span> c = <span class="hljs-number">0</span>;<span class="hljs-comment">//记录错误个数</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">6</span>; k++) &#123;<span class="hljs-comment">//测试</span><br>                <span class="hljs-keyword">double</span> x1 = Double.valueOf(ftraindatas.get(k).toString());<br>                <span class="hljs-keyword">double</span> x2 = Double.valueOf(ftraindatass.get(k).toString());<br>                <span class="hljs-keyword">double</span> y = Double.valueOf(fzresult.get(k).toString());<br>                <span class="hljs-keyword">double</span> Y = <span class="hljs-number">1</span> / (<span class="hljs-number">1</span> + Math.pow(Math.E, Double.valueOf(ws.get(<span class="hljs-number">0</span>).toString()) * x1 + Double.valueOf(ws.get(<span class="hljs-number">1</span>).toString()) * x2 + b));<br><br>                <span class="hljs-keyword">if</span> (Y &gt; <span class="hljs-number">0.5</span> &amp; y == <span class="hljs-number">1.0</span>) &#123;<br><br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Y &lt; <span class="hljs-number">0.5</span> &amp; y == <span class="hljs-number">0.0</span>) &#123;<br><br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    c++;<br>                    System.out.println(<span class="hljs-string">&quot;第&quot;</span> + k + <span class="hljs-string">&quot;个示例分类错误&quot;</span>);<br>                &#125;<br><br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;错误率&quot;</span> + c / <span class="hljs-number">6.0</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/machine_learning_daoti/%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%89%93%E5%8D%B0%E8%AE%A1%E7%AE%97%E7%BB%93%E6%9E%9C.png" alt="控制台打印计算结果"></p><p>在进行了917次学习后，模型错误率从 0.5 降到了 0.33 。有趣的是在第26轮学习后，错误率从0.5上升到了0.83。实际上，生活中的机器学习任务要比这复杂得多，往往还要考虑 过拟合、最优解 等。这就是此处错误率会上升的原因<img src="/images/machine_learning_daoti/%EF%BC%88%E5%90%8C%EF%BC%89%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%89%93%E5%8D%B0%E8%AE%A1%E7%AE%97%E7%BB%93%E6%9E%9C.png" alt="（同）控制台打印计算结果"></p><p>拿 w1 举例，w1 每次更新的值很小，只有在经过多次训练后才能找到一个局部最优解。</p><p>这里只是简单构建了一个分类模型，为了说明导数和梯度在机器学习中确实具有重要意义。</p><h5 id="4-1小结："><a href="#4-1小结：" class="headerlink" title="4.1小结："></a>4.1小结：</h5><p>对于一个学习模型，我们可用代价函数描述它的误差，通过求导找到此函数变化率最大的方向，让自变量（即要学习的参数）往此方向的反方向适当改变值即可优化模型的性能。这就是基于梯度下降法的学习。</p><h4 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h4><p>导数在几何上可看作函数在某一点的切线斜率（也是梯度），</p><p>该方向是变化率最大的方向，</p><p>导数计算公式为<img src="/images/machine_learning_daoti/%E6%B1%82%E5%AF%BC%E9%80%9A%E5%BC%8F.png" alt="求导通式">，</p><p>基于此进行学习可得到最优参数，</p><p>这就是梯度下降法。</p><hr><p>最后感谢CSDN上同学分享的知识，谢谢！</p><p>笔记第二部分完成时间—2021/5/3 10:06 </p>]]></content>
    
    
    <categories>
      
      <category>人工智能</category>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>人工智能</tag>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搞机两周年</title>
    <link href="/2021/04/17/2021-04-3-%E6%90%9E%E6%9C%BA%E4%B8%A4%E5%91%A8%E5%B9%B4/"/>
    <url>/2021/04/17/2021-04-3-%E6%90%9E%E6%9C%BA%E4%B8%A4%E5%91%A8%E5%B9%B4/</url>
    
    <content type="html"><![CDATA[<p>在2年前的一天晚上，博主从家人那里拿到了新年的压岁钱。在此之前，博主对一个游戏产生了强烈的兴趣。我随后便在淘宝上挑选新电脑，但在付款时发现有支付上限，为了游戏买电脑的理由无法通过。</p><p>博主于是打起了小主意(●’◡’●)，立马在淘宝上下了一个电脑咨询的单。经过一翻讨论后，博主选择网购零件，并在家里偷摸的把电脑装起来。</p><p>最后，博主如愿以偿地获得了两台个人组装电脑。<img src="/images/gj2/GTA5!%E5%90%AF%E5%8A%A8%EF%BC%81.png" alt="GTA5!启动！"></p><p>但是博主却DIY主机上瘾了，甚至想去当一名 ‘ 垃圾佬’ （捡电子垃圾）。</p><p>无奈，博主之后遇到了学业和兴趣的两难选择，最终只能暂时搁置兴趣。</p><p>在寒假网课期间，正当博主沉迷GTA5时，我翻出了之前买的一本编程书，并且思考着如何才能开发出一个如此好玩的游戏。博主之后在电脑上敲了几行代码后，竟发现编程也如此有趣！不久后，学校开学了。为准备即将到来的中考，我想用新学的编程技能开发一个学习软件（即E-test）。但时间实在紧迫，直到中考结束，我还没开启这个项目。</p><p>在中考后的暑假，我完成了E-test项目，且在今年将其开源在了 github 上。</p><hr><h3 id="祝TCJ搞机两周年快乐！"><a href="#祝TCJ搞机两周年快乐！" class="headerlink" title="祝TCJ搞机两周年快乐！"></a>祝TCJ搞机两周年快乐！<img src="/images/gj2/%E5%BF%AB%E4%B9%90.gif" alt="快乐"></h3><h5 id="第一次组装尝试："><a href="#第一次组装尝试：" class="headerlink" title="第一次组装尝试："></a>第一次组装尝试：</h5><p><img src="/images/gj2/G41.png" alt="G41"></p><p>联想G41主板+亮机U</p><p><img src="/images/gj2/%E6%BF%80%E5%8A%A8%E4%BA%BA%E5%BF%83%E7%9A%84%E6%97%B6%E5%88%BB.png" alt="激动人心的时刻"></p><p>TT额定400w电源 + G41 + 亮机U + 希捷250g机械硬盘 + 2GB圣创雷克ddr3内存条 （WIN 7系统）</p><h5 id="第二次攒机："><a href="#第二次攒机：" class="headerlink" title="第二次攒机："></a>第二次攒机：</h5><p><img src="/images/gj2/%E8%93%9D%E7%8B%90%E6%95%A3%E7%83%AD%E5%99%A8.png" alt="蓝狐散热器"></p><p>超频三散热器</p><p><img src="/images/gj2/i5-3570%E5%92%8CB75m.png" alt="i5-3570和B75m"></p><p>i5–3570 + 身后的技嘉b75m小板</p><p><img src="/images/gj2/gtx_760.png" alt="gtx_760"></p><p>七彩虹 gtx 760 2G显卡</p><p><img src="/images/gj2/%E5%8D%8A%E5%B2%9B%E9%93%81%E7%9B%92%E6%9C%BA%E7%AE%B1.png" alt="半岛铁盒机箱"><img src="/images/gj2/%E6%95%B4%E6%9C%BA%E5%86%85%E9%83%A8.png" alt="整机内部"></p><p>技嘉 b75m + i5–3570 + 七彩虹 gtx 760 2G + 10GB运存（8G威刚 + 2G圣创雷克）+ 500G希捷机械盘（WIN 10 系统）</p><p><img src="/images/gj2/GTA%E7%B3%BB%E5%88%97%E5%85%A8%E5%AE%B6%E6%A1%B6.png" alt="GTA系列全家桶"></p><p><img src="/images/gj2/GTA5!%E5%90%AF%E5%8A%A8%EF%BC%81.png" alt="GTA5!启动！"></p><h5 id="捡垃圾："><a href="#捡垃圾：" class="headerlink" title="捡垃圾："></a>捡垃圾：</h5><p><img src="/images/gj2/rx484%E8%83%8C%E9%9D%A2.png" alt="rx484背面"></p><p><img src="/images/gj2/%E6%AD%A3%E9%9D%A2.png" alt="正面"></p><p>60元收来的迪兰恒进RX480 4G 战神满血版</p><h6 id=""><a href="#" class="headerlink" title=""></a><img src="/images/gj2/%E5%9B%BE%E5%90%A7%E5%B8%96%E5%AD%90.png" alt="图吧帖子"></h6><p>“妖”板！</p><p><img src="/images/gj2/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7%E9%9B%86%E5%90%88.png" alt="软件工具集合"></p><p><img src="/images/gj2/%EF%BC%88%E5%90%8C%EF%BC%89%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7%E9%9B%86%E5%90%88.png" alt="（同）软件工具集合"></p><p>测试硬件用的。</p><p>用“垃圾”拼的机子（用来挂游戏），不过很快就坏了。</p><p><img src="/images/gj2/%E8%B4%A7%E5%B8%81%E6%88%90%E6%9C%AC120%E5%85%83%EF%BC%81.png" alt="货币成本120元！"></p><p>E-test(学习软件)</p><p><img src="/images/gj2/E-test.png" alt="E-test"></p><h5 id="硬件工作台："><a href="#硬件工作台：" class="headerlink" title="硬件工作台："></a>硬件工作台：</h5><p><img src="/images/gj2/%E6%9C%89%E7%82%B9%E4%B9%B1.png" alt="有点乱"></p><p><img src="/images/gj2/%E7%87%83%E7%83%A7%E7%9A%84%E8%8A%AF%E7%89%87%EF%BC%81.png" alt="燃烧的芯片！"></p><h5 id="软件工作台："><a href="#软件工作台：" class="headerlink" title="软件工作台："></a>软件工作台：</h5><p><img src="/images/gj2/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E4%BD%9C%E5%8F%B0.png" alt="软件工作台"></p><p>平时博主写博文、娱乐、敲代码等都是在这进行的。<img src="/images/gj2/%E6%95%B0%E7%A0%81%E6%94%B6%E7%BA%B3%E8%A2%8B.png" alt="数码收纳袋"></p><p>方便的数码收纳袋，装一些U盘等。</p><h5 id="博主的床头文学：当时为了提升计算机技术和揭示计算机原理买的"><a href="#博主的床头文学：当时为了提升计算机技术和揭示计算机原理买的" class="headerlink" title="博主的床头文学：当时为了提升计算机技术和揭示计算机原理买的"></a>博主的床头文学：当时为了提升计算机技术和揭示计算机原理买的</h5><p><img src="/images/gj2/22.png" alt="22"><img src="/images/gj2/23.png" alt="23"><img src="/images/gj2/24.png" alt="24"><img src="/images/gj2/25.png" alt="25"></p><p>当初买的时候都是激情满满，现在却很少再有时间翻开来看了。</p><p><img src="/images/gj2/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0.png" alt="机器学习"></p><p>希望在新的一年能看完这本书和完成有趣的项目。</p><p>把往事整理成博文，和你分享其中的快乐。</p><hr><h3 id="规定：2月15日为TCJ的搞机节！"><a href="#规定：2月15日为TCJ的搞机节！" class="headerlink" title="规定：2月15日为TCJ的搞机节！"></a>规定：2月15日为TCJ的搞机节！</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>开源E-test项目(学习软件)</title>
    <link href="/2021/04/03/2021-04-03-%E5%BC%80%E6%BA%90E-test%E9%A1%B9%E7%9B%AE/"/>
    <url>/2021/04/03/2021-04-03-%E5%BC%80%E6%BA%90E-test%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="本项目由博主在去年暑假完成。最近博主在整理的时候发现有值得学习的地方，特此开源交流。"><a href="#本项目由博主在去年暑假完成。最近博主在整理的时候发现有值得学习的地方，特此开源交流。" class="headerlink" title="本项目由博主在去年暑假完成。最近博主在整理的时候发现有值得学习的地方，特此开源交流。"></a>本项目由博主在去年暑假完成。最近博主在整理的时候发现有值得学习的地方，特此开源交流。</h3><p>在这里自顶向下地介绍一下这个软件吧（从软件到源码）。为避免长篇大论，在这里涉及的源码仅是部分。感兴趣的同学可自行去github上下载。github库链接：<a href="https://github.com/TianChaojie155038/E-test">https://github.com/TianChaojie155038/E-test</a></p><h5 id="此软件目前在Windows-7-10-上均能正常运行。"><a href="#此软件目前在Windows-7-10-上均能正常运行。" class="headerlink" title="此软件目前在Windows 7/10 上均能正常运行。"></a>此软件目前在Windows 7/10 上均能正常运行。</h5><h5 id="此软件是用Java开发的一个GUI程序，需要网络并需要配置数据库。"><a href="#此软件是用Java开发的一个GUI程序，需要网络并需要配置数据库。" class="headerlink" title="此软件是用Java开发的一个GUI程序，需要网络并需要配置数据库。"></a>此软件是用Java开发的一个GUI程序，需要网络并需要配置数据库。</h5><h5 id="开发此软件的目的是加强对英语单词的记忆。"><a href="#开发此软件的目的是加强对英语单词的记忆。" class="headerlink" title="开发此软件的目的是加强对英语单词的记忆。"></a>开发此软件的目的是加强对英语单词的记忆。</h5><p><img src="/images/E-test/%E7%99%BB%E9%99%86%E7%95%8C%E9%9D%A2.png" alt="登录界面"></p><p>如示意图所示，这是程序的主界面，包括注册账号和登录两个功能。需要联网。</p><p><img src="/images/E-test/%E6%B3%A8%E5%86%8C%E7%95%8C%E9%9D%A2.png" alt="注册界面"></p><p>这是一个简陋的注册账号界面，单击左上角即可返回主界面。</p><p><img src="/images/E-test/%E6%B3%A8%E5%86%8C%E6%88%90%E5%8A%9F%E5%90%8E%E7%95%8C%E9%9D%A2.png" alt="注册成功后界面"></p><p>相应源码部分（部分）：<img src="/images/E-test/%E9%83%A8%E5%88%86%E6%BA%90%E7%A0%81.png" alt="部分源码"></p><p>主界面涉及的主要是Java中的标签和文本框一类，还有一些基本的布尔逻辑、账号加密等。（共1471行代码）</p><hr><p>注册成功后会跳转到提示界面，我们去登录看看！！！</p><p><img src="/images/E-test/%E6%AC%A2%E8%BF%8E%E7%95%8C%E9%9D%A2.png" alt="欢迎界面"></p><p>这是博主在开发时用来测试的一个账号。由于程序有设计缺陷，像**<strong><strong><strong>****</strong></strong></strong>这样的账号无法正常使用程序。左列有4个简单的基本功能：词库—添加—删除—测试。左上角有一个返回键，单击可返回到用户主界面；左下角有一个程序的活动日志，用于记录程序的一些情况。</p><p><img src="/images/E-test/%E6%B7%BB%E5%8A%A0%E5%8D%95%E8%AF%8D%E7%95%8C%E9%9D%A2.png" alt="添加单词界面"></p><p>添加功能：在右侧键入要加入到词库的单词和对应的中文后，Add按钮会取消锁定。单击此按钮即可添加新单词。</p><p><img src="/images/E-test/%E5%88%A0%E9%99%A4%E5%8D%95%E8%AF%8D%E7%95%8C%E9%9D%A2.png" alt="删除单词界面"></p><p>删除功能：在右侧文本框中键入要删除的单词，单击DELETE即可从词库中删除。</p><p><img src="/images/E-test/%E8%AF%8D%E5%BA%93%E7%95%8C%E9%9D%A2.png" alt="词库界面"></p><p>词库：可看到当前在词库中的所有单词。</p><p><img src="/images/E-test/%E6%90%9C%E7%B4%A2%E7%95%8C%E9%9D%A2.png" alt="搜索界面"></p><p>正上方的放大镜：根据单词中所包含的字母可搜索到相应单词。</p><p><img src="/images/E-test/%E6%A0%87%E7%AD%BE%E7%95%8C%E9%9D%A2.png" alt="标签界面"></p><p>标签功能：方便管理单词。</p><p><img src="/images/E-test/%E5%BC%80%E5%A7%8B%E6%B5%8B%E8%AF%95%E7%95%8C%E9%9D%A2.png" alt="开始测试界面"></p><p>测试（核心功能）：选择对应的标签和模式进行单词测试。默认从词库中抽词。</p><p><img src="/images/E-test/%E6%B5%8B%E8%AF%95%E7%95%8C%E9%9D%A2.png" alt="测试界面"></p><p>对应源码部分（部分）：<img src="/images/E-test/%E6%B5%8B%E8%AF%95%E5%8A%9F%E8%83%BD%E9%83%A8%E5%88%86%E6%BA%90%E7%A0%81.png" alt="测试功能部分源码"></p><p>将要测试的单词和对应的中文放入两个集合，索引一一对应。</p><p><img src="/images/E-test/%E6%B7%BB%E5%8A%A0%E5%8D%95%E8%AF%8D%E5%8A%9F%E8%83%BD%E9%83%A8%E5%88%86%E6%BA%90%E7%A0%81.png" alt="添加单词功能部分源码"></p><p>Add按钮的检测释放部分源码，对键入的值的转换。用户界面的源码共有1856行。</p><hr><p><img src="/images/E-test/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png" alt="项目结构"></p><p>如图所示为整个项目的源文件结构，全项目共有4085行源码。纯 Java 内置库开发。</p><hr><p>博主当时对编程有强烈的兴趣，所以在去年暑假期间就连续爆肝十几天开发了此软件，并想要用它来帮助博主应付高中的开学考试。但是实用效果一般，且软件存在部分bug，随即该项目便被关停了。最近博主在整理相关资料时，发现源码中有值得学习的地方，便把它开源在github上了。</p>]]></content>
    
    
    <categories>
      
      <category>E-test项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>个人项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【学习笔记：第二版】用Java实现基于BP算法的多层前馈神经网络</title>
    <link href="/2021/03/28/%E7%94%A8Java%E5%AE%9E%E7%8E%B0%E7%BB%8F%E5%85%B8BP%E7%AE%97%E6%B3%95(%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0)/"/>
    <url>/2021/03/28/%E7%94%A8Java%E5%AE%9E%E7%8E%B0%E7%BB%8F%E5%85%B8BP%E7%AE%97%E6%B3%95(%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0)/</url>
    
    <content type="html"><![CDATA[<p><strong>第二版笔记更新</strong>：优化了 <u>Java 实现</u> 并用 <u>神经网络完成西瓜分类任务</u>，增加了 <u>累积BP算法的实现</u>。第二版笔记删除了 <u>神经网络原理的推导</u>，是因为此处的重点是用Java编写神经网络，后续博主有时间会在其它博文中记录之。</p><p>更新时间（2021–5–15 13:27）</p><p>传播搞机的快乐，分享计算机知识！—TCJ</p><hr><p>以下是Java实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">neural_networks</span> </span>&#123;<span class="hljs-comment">//神经网络类（多层前馈神经网络）</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] nums = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>&#125;; <span class="hljs-comment">//神经网络基本属性:神经网络层数及各层神经元数(此处已指定)</span><br><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">networks</span> </span>&#123;<span class="hljs-comment">//神经网络数据结构类（内部类）</span><br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span>[][][] Q_Values = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[<span class="hljs-number">3</span>][<span class="hljs-number">5</span>][<span class="hljs-number">5</span>];<span class="hljs-comment">//权重值数组</span><br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span>[][] Yu_Values = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[<span class="hljs-number">3</span>][<span class="hljs-number">5</span>];<span class="hljs-comment">//阈值数组</span><br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span>[][] IntputValues = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[<span class="hljs-number">4</span>][<span class="hljs-number">5</span>];<span class="hljs-comment">//输入值数组</span><br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span>[][] OutputValues = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[<span class="hljs-number">4</span>][<span class="hljs-number">5</span>];<span class="hljs-comment">//输出值数组</span><br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span>[][] TDValues = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[<span class="hljs-number">3</span>][<span class="hljs-number">5</span>];<span class="hljs-comment">//梯度项数组</span><br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">networks</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">//无参构造方法（此处初始化一个4层神经网络,每层神经元数分别为:2、5、4、3）</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; nums.length; i++) &#123;<span class="hljs-comment">//从第一层隐层开始</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; nums[i]; j++) &#123;<span class="hljs-comment">//初始化阈值</span><br>                    Yu_Values[i - <span class="hljs-number">1</span>][j] = Math.random();<span class="hljs-comment">//添加随机值范围（0~1）</span><br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; nums[i - <span class="hljs-number">1</span>]; k++) &#123;<span class="hljs-comment">//单个神经元下的权重</span><br>                        Q_Values[i - <span class="hljs-number">1</span>][j][k] = Math.random();<span class="hljs-comment">//添加随机值范围（0~1）</span><br>                    &#125;<br><br>                &#125;<br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-comment">//i是层数、j是神经元数、k是权重数(下同)</span><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">double</span> Qvalue)</span> </span>&#123;<span class="hljs-comment">//set方法（权重值更新）</span><br><br>            Q_Values[i][j][k] = Qvalue;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">double</span> Value, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<span class="hljs-comment">//set方法(阈值、输入值、输出值、梯度项值更新)</span><br>            <span class="hljs-keyword">if</span> (k == <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//阈值更新</span><br>                Yu_Values[i][j] = Value;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (k == <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//输入值更新</span><br>                IntputValues[i][j] = Value;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (k == <span class="hljs-number">2</span>) &#123;<span class="hljs-comment">//输出值更新</span><br>                OutputValues[i][j] = Value;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//梯度项更新</span><br>                TDValues[i][j] = Value;<br><br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getIntputValue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<span class="hljs-comment">//获取神经元的输入</span><br>            <span class="hljs-keyword">return</span> IntputValues[i][j];<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getOutputValue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<span class="hljs-comment">//获取神经元的输出</span><br>            <span class="hljs-keyword">return</span> OutputValues[i][j];<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getTDValue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<span class="hljs-comment">//获取神经元的梯度项值</span><br>            <span class="hljs-keyword">return</span> TDValues[i][j];<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getQ_Value</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<span class="hljs-comment">//获取神经元的权值</span><br>            <span class="hljs-keyword">return</span> Q_Values[i][j][k];<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getYu_Value</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<span class="hljs-comment">//获取神经元的阈值</span><br>            <span class="hljs-keyword">return</span> Yu_Values[i][j];<br><br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">neuron</span> </span>&#123;<span class="hljs-comment">//神经元类（内部类）</span><br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">neuron</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">//无参构造方法</span><br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getIntputValue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<span class="hljs-comment">//获取神经元的输入值</span><br>            <span class="hljs-keyword">return</span> networks.getIntputValue(i, j);<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getOutputValue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<span class="hljs-comment">//获取神经元的输出值</span><br>            <span class="hljs-keyword">return</span> networks.getOutputValue(i, j);<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getTDValue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<span class="hljs-comment">//获取神经元的梯度项值</span><br>            <span class="hljs-keyword">return</span> networks.getTDValue(i, j);<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getQ_Value</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<span class="hljs-comment">//获取神经元的权值</span><br>            <span class="hljs-keyword">return</span> networks.getQ_Value(i, j, k);<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getYu_Value</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<span class="hljs-comment">//获取神经元的阈值</span><br>            <span class="hljs-keyword">return</span> networks.getYu_Value(i, j);<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">double</span> Qvalue)</span> </span>&#123;<span class="hljs-comment">//set方法（权重值更新）</span><br>            networks.set(i, j, k, Qvalue);<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">double</span> Value, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<span class="hljs-comment">//set方法(阈值、输入值、输出值、梯度项值更新)</span><br>            networks.set(i, j, Value, k);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">countOutputValueandSave</span><span class="hljs-params">(<span class="hljs-keyword">double</span> IntputValue)</span> </span>&#123;<span class="hljs-comment">//计算神经元的输出值(此处使用sigmiod函数作为激活函数)需要被重写</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">countTDValueandSave</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">//计算神经元的梯度项值，需要被重写</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">countIntputValueandSave</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<span class="hljs-comment">//计算神经元的输入值，需要被重写</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">renewYu</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">double</span> rate)</span> </span>&#123;<span class="hljs-comment">//更新阈值，需要被重写</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">renewQuan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">double</span> rate)</span> </span>&#123;<span class="hljs-comment">//更新权重，需要被重写</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br><br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">hiddenneuron</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">neuron</span> </span>&#123;<span class="hljs-comment">//隐结点类（内部类）</span><br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">hiddenneuron</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">//无参构造方法</span><br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">countTDValueandSave</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<span class="hljs-comment">//计算隐层神经元的梯度项值</span><br>            <span class="hljs-keyword">double</span> d = <span class="hljs-number">0</span>;<span class="hljs-comment">//ΣΩg</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; nums[i]; k++) &#123;<span class="hljs-comment">//权重和下一层的梯度项</span><br>                d += <span class="hljs-keyword">super</span>.getQ_Value(i, k, j) * <span class="hljs-keyword">super</span>.getTDValue(i, k);<br>            &#125;<br>            <span class="hljs-keyword">double</span> b = <span class="hljs-keyword">super</span>.getIntputValue(i, j);<br>            <span class="hljs-keyword">double</span> c = b * (b - <span class="hljs-number">1</span>) * d;<br>            <span class="hljs-keyword">super</span>.set(i - <span class="hljs-number">1</span>, j, c, <span class="hljs-number">3</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">countIntputValueandSave</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<span class="hljs-comment">//计算隐层神经元的输入值</span><br>            <span class="hljs-keyword">double</span> b = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; nums[i - <span class="hljs-number">1</span>]; k++) &#123;<br>                b += <span class="hljs-keyword">super</span>.getOutputValue(i - <span class="hljs-number">1</span>, k) * <span class="hljs-keyword">super</span>.getQ_Value(i - <span class="hljs-number">1</span>, j, k);<br><br>            &#125;<br>            <span class="hljs-keyword">super</span>.set(i, j, b, <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">countOutputValueandSave</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<span class="hljs-comment">//计算神经元的输出值(此处使用sigmiod函数作为激活函数)</span><br>            <span class="hljs-keyword">double</span> b = <span class="hljs-keyword">super</span>.getIntputValue(i, j);<br>            <span class="hljs-keyword">double</span> yu = <span class="hljs-keyword">super</span>.getYu_Value(i - <span class="hljs-number">1</span>, j);<br>            <span class="hljs-keyword">double</span> c = <span class="hljs-number">1</span> / (<span class="hljs-number">1</span> + Math.pow(Math.E, yu - b));<br>            <span class="hljs-keyword">super</span>.set(i, j, c, <span class="hljs-number">2</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">renewYu</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">double</span> rate)</span> </span>&#123;<span class="hljs-comment">//更新阈值</span><br>            <span class="hljs-keyword">double</span> e = <span class="hljs-keyword">super</span>.getTDValue(i - <span class="hljs-number">1</span>, j);<br>            <span class="hljs-keyword">double</span> c = <span class="hljs-keyword">super</span>.getYu_Value(i - <span class="hljs-number">1</span>, j) + rate * e;<br>            <span class="hljs-keyword">super</span>.set(i - <span class="hljs-number">1</span>, j, c, <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">renewQuan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">double</span> rate)</span> </span>&#123;<span class="hljs-comment">//更新权重</span><br>            <span class="hljs-keyword">double</span> e = <span class="hljs-keyword">super</span>.getTDValue(i - <span class="hljs-number">1</span>, j);<br>            <span class="hljs-keyword">double</span> c = <span class="hljs-keyword">super</span>.getQ_Value(i - <span class="hljs-number">1</span>, j, k) - rate * e * networks.getOutputValue(i - <span class="hljs-number">1</span>, k);<br>            <span class="hljs-keyword">super</span>.set(i - <span class="hljs-number">1</span>, j, k, c);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br><br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">outneuron</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">neuron</span> </span>&#123;<span class="hljs-comment">//输出结点类（内部类）</span><br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">outneuron</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">//无参构造方法</span><br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">countTDValueandSave</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">double</span> y)</span> </span>&#123;<span class="hljs-comment">//计算输出层神经元的梯度项值</span><br>            <span class="hljs-keyword">double</span> out = <span class="hljs-keyword">super</span>.getOutputValue(i - <span class="hljs-number">1</span>, j);<br>            <span class="hljs-keyword">double</span> c = out * (<span class="hljs-number">1</span> - out) * (out - y);<br>            <span class="hljs-keyword">super</span>.set(i - <span class="hljs-number">1</span>, j, c, <span class="hljs-number">3</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">countIntputValueandSave</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<span class="hljs-comment">//计算输出层神经元的输入值</span><br>            <span class="hljs-keyword">double</span> b = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; nums[i - <span class="hljs-number">1</span>]; k++) &#123;<br>                b += <span class="hljs-keyword">super</span>.getOutputValue(i - <span class="hljs-number">1</span>, k) * <span class="hljs-keyword">super</span>.getQ_Value(i - <span class="hljs-number">1</span>, j, k);<br>            &#125;<br>            <span class="hljs-keyword">super</span>.set(i, j, b, <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">countOutputValueandSave</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<span class="hljs-comment">//计算神经元的输出值(此处使用sigmiod函数作为激活函数)</span><br>            <span class="hljs-keyword">double</span> b = <span class="hljs-keyword">super</span>.getIntputValue(i, j);<br>            <span class="hljs-keyword">double</span> yu = <span class="hljs-keyword">super</span>.getYu_Value(i - <span class="hljs-number">1</span>, j);<br>            <span class="hljs-keyword">double</span> c = <span class="hljs-number">1.0</span> / (<span class="hljs-number">1</span> + Math.pow(Math.E, yu - b));<br>            <span class="hljs-keyword">super</span>.set(i, j, c, <span class="hljs-number">2</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">renewYu</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">double</span> rate)</span> </span>&#123;<span class="hljs-comment">//更新阈值</span><br>            <span class="hljs-keyword">double</span> g = <span class="hljs-keyword">super</span>.getTDValue(i - <span class="hljs-number">1</span>, j);<br>            <span class="hljs-keyword">double</span> c = <span class="hljs-keyword">super</span>.getYu_Value(i - <span class="hljs-number">1</span>, j) + rate * g;<br>            <span class="hljs-keyword">super</span>.set(i - <span class="hljs-number">1</span>, j, c, <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">renewQuan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">double</span> rate)</span> </span>&#123;<span class="hljs-comment">//更新权重</span><br>            <span class="hljs-keyword">double</span> g = <span class="hljs-keyword">super</span>.getTDValue(i - <span class="hljs-number">1</span>, j);<br>            <span class="hljs-keyword">double</span> c = <span class="hljs-keyword">super</span>.getQ_Value(i - <span class="hljs-number">1</span>, j, k) - rate * g * <span class="hljs-keyword">super</span>.getOutputValue(i - <span class="hljs-number">1</span>, k);<br>            <span class="hljs-keyword">super</span>.set(i - <span class="hljs-number">1</span>, j, k, c);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getOutputValue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<span class="hljs-comment">//获取神经元的输出值</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getOutputValue(i, j);<br><br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 训练集:</span><br><span class="hljs-comment">         * (正例，都是好瓜①密度 0.697 含糖率 0.460  ②密度 0.774 含糖率0.376  ③密度 0.634 含糖率 0.264</span><br><span class="hljs-comment">         * ④密度 0.608 含糖率 0.318 ⑤密度 0.556 含糖率 0.215)</span><br><span class="hljs-comment">         * (反例①密度 0.666 含糖率 0.091 ②密度 0.243 含糖率 0.267 ③密度 0.245 含糖率 0.057</span><br><span class="hljs-comment">         * ④密度 0.343 含糖率 0.099 ⑤密度 0.639 含糖率 0.161 ⑥密度 0.657 含糖率 0.198</span><br><span class="hljs-comment">         * )</span><br><span class="hljs-comment">         * 测试集:</span><br><span class="hljs-comment">         * (正例①密度 0.481 含糖率 0.149 ②密度 0.437 含糖率 0.211 ③密度 0.403 含糖率 0.237)</span><br><span class="hljs-comment">         * (反例①密度 0.593 含糖率 0.042 ②密度 0.719 含糖率 0.103 ④密度 0.360 含糖率 0.370)</span><br><span class="hljs-comment">         */</span><br>        List traindatas = <span class="hljs-keyword">new</span> ArrayList();<br>        List traindatass = <span class="hljs-keyword">new</span> ArrayList();<br>        List zresult = <span class="hljs-keyword">new</span> ArrayList();<br>        traindatas.add(<span class="hljs-number">0.697</span>);<br>        traindatass.add(<span class="hljs-number">0.460</span>);<br>        traindatas.add(<span class="hljs-number">0.774</span>);<br>        traindatass.add(<span class="hljs-number">0.376</span>);<br>        traindatas.add(<span class="hljs-number">0.634</span>);<br>        traindatass.add(<span class="hljs-number">0.264</span>);<br>        traindatas.add(<span class="hljs-number">0.608</span>);<br>        traindatass.add(<span class="hljs-number">0.318</span>);<br>        traindatas.add(<span class="hljs-number">0.556</span>);<br>        traindatass.add(<span class="hljs-number">0.215</span>);<br>        <span class="hljs-comment">//正例↑</span><br>        traindatas.add(<span class="hljs-number">0.666</span>);<br>        traindatass.add(<span class="hljs-number">0.091</span>);<br>        traindatas.add(<span class="hljs-number">0.243</span>);<br>        traindatass.add(<span class="hljs-number">0.267</span>);<br>        traindatas.add(<span class="hljs-number">0.245</span>);<br>        traindatass.add(<span class="hljs-number">0.057</span>);<br>        traindatas.add(<span class="hljs-number">0.343</span>);<br>        traindatass.add(<span class="hljs-number">0.099</span>);<br>        traindatas.add(<span class="hljs-number">0.639</span>);<br>        traindatass.add(<span class="hljs-number">0.161</span>);<br>        traindatas.add(<span class="hljs-number">0.657</span>);<br>        traindatass.add(<span class="hljs-number">0.198</span>);<br>        zresult.add(<span class="hljs-number">1</span>);<br>        zresult.add(<span class="hljs-number">1</span>);<br>        zresult.add(<span class="hljs-number">1</span>);<br>        zresult.add(<span class="hljs-number">1</span>);<br>        zresult.add(<span class="hljs-number">1</span>);<br>        zresult.add(<span class="hljs-number">0</span>);<br>        zresult.add(<span class="hljs-number">0</span>);<br>        zresult.add(<span class="hljs-number">0</span>);<br>        zresult.add(<span class="hljs-number">0</span>);<br>        zresult.add(<span class="hljs-number">0</span>);<br>        zresult.add(<span class="hljs-number">0</span>);<br>        List ftraindatas = <span class="hljs-keyword">new</span> ArrayList();<br>        List ftraindatass = <span class="hljs-keyword">new</span> ArrayList();<br>        List fzresult = <span class="hljs-keyword">new</span> ArrayList();<br>        ftraindatas.add(<span class="hljs-number">0.481</span>);<br>        ftraindatass.add(<span class="hljs-number">0.149</span>);<br>        ftraindatas.add(<span class="hljs-number">0.437</span>);<br>        ftraindatass.add(<span class="hljs-number">0.211</span>);<br>        ftraindatas.add(<span class="hljs-number">0.593</span>);<br>        ftraindatass.add(<span class="hljs-number">0.042</span>);<br>        ftraindatas.add(<span class="hljs-number">0.719</span>);<br>        ftraindatass.add(<span class="hljs-number">0.103</span>);<br>        ftraindatas.add(<span class="hljs-number">0.403</span>);<br>        ftraindatass.add(<span class="hljs-number">0.237</span>);<br>        ftraindatas.add(<span class="hljs-number">0.360</span>);<br>        ftraindatass.add(<span class="hljs-number">0.370</span>);<br>        fzresult.add(<span class="hljs-number">1</span>);<br>        fzresult.add(<span class="hljs-number">1</span>);<br>        fzresult.add(<span class="hljs-number">1</span>);<br>        fzresult.add(<span class="hljs-number">0</span>);<br>        fzresult.add(<span class="hljs-number">0</span>);<br>        fzresult.add(<span class="hljs-number">0</span>);<br>        networks n = <span class="hljs-keyword">new</span> networks();<span class="hljs-comment">//new 一个神经网络</span><br>        neuron ne = <span class="hljs-keyword">new</span> neuron();<span class="hljs-comment">//new 一个神经元</span><br>        hiddenneuron hne = <span class="hljs-keyword">new</span> hiddenneuron();<span class="hljs-comment">//new一个隐结点对象</span><br>        outneuron one = <span class="hljs-keyword">new</span> outneuron();<span class="hljs-comment">//new一个输出结点对象</span><br>        <span class="hljs-keyword">double</span> rate = <span class="hljs-number">0.1</span>;<span class="hljs-comment">//学习率</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1500</span>; i++) &#123;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; traindatas.size(); j++) &#123;<br>                networks.set(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, (<span class="hljs-keyword">double</span>) traindatas.get(j), <span class="hljs-number">1</span>);<br>                networks.set(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, (<span class="hljs-keyword">double</span>) traindatas.get(j), <span class="hljs-number">2</span>);<br>                networks.set(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, (<span class="hljs-keyword">double</span>) traindatass.get(j), <span class="hljs-number">1</span>);<br>                networks.set(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, (<span class="hljs-keyword">double</span>) traindatass.get(j), <span class="hljs-number">2</span>);<br><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt; nums.length - <span class="hljs-number">1</span>; k++) &#123;<span class="hljs-comment">//循环遍历隐结点:计算输入输出值</span><br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> z = <span class="hljs-number">0</span>; z &lt; nums[k]; z++) &#123;<br>                        hne.countIntputValueandSave(k, z);<br>                        hne.countOutputValueandSave(k, z);<br>                    &#125;<br><br>                &#125;<br><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; nums[nums.length - <span class="hljs-number">1</span>]; k++) &#123;<span class="hljs-comment">//遍历输出结点</span><br>                    <span class="hljs-keyword">int</span> c = nums.length - <span class="hljs-number">1</span>;<br>                    one.countIntputValueandSave(c, k);<br>                    one.countOutputValueandSave(c, k);<br>                    one.countTDValueandSave(c, k, Double.valueOf(zresult.get(j).toString()));<br>                    one.renewYu(c, k, rate);<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> z = <span class="hljs-number">0</span>; z &lt; nums[c - <span class="hljs-number">1</span>]; z++) &#123;<br>                        one.renewQuan(c, k, z, rate);<br>                    &#125;<br><br>                &#125;<br><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt; nums.length - <span class="hljs-number">1</span>; k++) &#123;<span class="hljs-comment">//计算隐结点梯度项</span><br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> z = <span class="hljs-number">0</span>; z &lt; nums[nums.length - <span class="hljs-number">1</span> - k]; z++) &#123;<br>                        hne.countTDValueandSave(nums.length - <span class="hljs-number">1</span> - k, z);<br>                        hne.renewYu(nums.length - <span class="hljs-number">1</span> - k, z, rate);<br>                        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>; t &lt; nums[nums.length - <span class="hljs-number">2</span> - k]; t++) &#123;<br>                            hne.renewQuan(nums.length - <span class="hljs-number">1</span> - k, z, t, rate);<br>                        &#125;<br><br>                    &#125;<br><br>                &#125;<br><br>            &#125;<br>            <span class="hljs-comment">//以下是测试</span><br>            <span class="hljs-keyword">int</span> cw = <span class="hljs-number">0</span>;<span class="hljs-comment">//记录错误示例个数</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; ftraindatas.size(); j++) &#123;<br>                networks.set(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, (<span class="hljs-keyword">double</span>) ftraindatas.get(j), <span class="hljs-number">1</span>);<br>                networks.set(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, (<span class="hljs-keyword">double</span>) ftraindatas.get(j), <span class="hljs-number">2</span>);<br>                networks.set(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, (<span class="hljs-keyword">double</span>) ftraindatass.get(j), <span class="hljs-number">1</span>);<br>                networks.set(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, (<span class="hljs-keyword">double</span>) ftraindatass.get(j), <span class="hljs-number">2</span>);<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt; nums.length - <span class="hljs-number">1</span>; k++) &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> z = <span class="hljs-number">0</span>; z &lt; nums[k]; z++) &#123;<br>                        hne.countIntputValueandSave(k, z);<br>                        hne.countOutputValueandSave(k, z);<br>                    &#125;<br><br>                &#125;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">1</span>; k++) &#123;<br>                    <span class="hljs-keyword">int</span> c = nums.length - <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">double</span> averageout = <span class="hljs-number">0</span>;<span class="hljs-comment">//神经网络有多个输出，在这里取所有输出的平均值</span><br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> z = <span class="hljs-number">0</span>; z &lt; nums[c]; z++) &#123;<br>                        one.countIntputValueandSave(c, z);<br>                        one.countOutputValueandSave(c, z);<br>                    &#125;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> z = <span class="hljs-number">0</span>; z &lt; nums[c]; z++) &#123;<br>                        averageout += one.getOutputValue(c, z);<br>                    &#125;<br>                    averageout /= (<span class="hljs-keyword">double</span>) nums[c];<br>                    <span class="hljs-keyword">if</span> (averageout &gt; <span class="hljs-number">0.5</span> &amp; Double.valueOf(fzresult.get(j).toString()) == <span class="hljs-number">0.0</span>) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;第&quot;</span> + (j + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;个示例分类错误&quot;</span>);<br>                        cw++;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (averageout &lt; <span class="hljs-number">0.5</span> &amp; Double.valueOf(fzresult.get(j).toString()) == <span class="hljs-number">1.0</span>) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;第&quot;</span> + (j + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;个示例分类错误&quot;</span>);<br>                        cw++;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (averageout == <span class="hljs-number">0.5</span>) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;第&quot;</span> + (j + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;个示例分类错误&quot;</span>);<br>                        cw++;<br>                    &#125;<br><br>                &#125;<br><br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;错误率:&quot;</span> + cw / (<span class="hljs-keyword">double</span>) fzresult.size());<br><br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于累积BP算法，我们可以先求出多个误差，再进行平均。此方法有时可以免去误差抵销的现象。</p><p>例如：你辛辛苦苦算了一节课的数学题，最后发现是条件看错了。所以，舍得花时间先看清条件是必要的。</p><p>如果神经网络的模型非常复杂（即有超多个地方需要计算），每算一次需要花费巨大的时间，那你可不想看到被抵销的现象吧，用累积BP算法就可以节省大量时间，提高学习效率。</p><p>标准BP算法就是累积BP算法每次训练样例数取1时的特例。一般情况下，模型越复杂，每次训练样例数取得越多。</p><p>训练及测试结果：</p><p><img src="/images/BP/%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%89%93%E5%8D%B0%E8%AE%A1%E7%AE%97%E7%BB%93%E6%9E%9C.png" alt="控制台打印计算结果"></p><p>不知道是因为任务太简单了还是神经网络的学习能力太强了，在几十次训练后就达到了100%的精度</p><p>我更愿相信它是过拟合了</p><p>用到的神经元模型：<img src="/images/BP/M-P%E7%A5%9E%E7%BB%8F%E5%85%83.png" alt="M-P神经元"></p>]]></content>
    
    
    <categories>
      
      <category>人工智能</category>
      
      <category>机器学习</category>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>人工智能</tag>
      
      <tag>深度学习</tag>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>T-Ti项目进度记录</title>
    <link href="/2021/03/14/2021-03-14-T-Ti%E9%A1%B9%E7%9B%AE%E8%BF%9B%E5%BA%A6%E8%AE%B0%E5%BD%95/"/>
    <url>/2021/03/14/2021-03-14-T-Ti%E9%A1%B9%E7%9B%AE%E8%BF%9B%E5%BA%A6%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>稚晖君的“充电宝屏幕一体”的充电宝到啦！</p><p><img src="/images/T-Tip/%E7%A8%9A%E6%99%96%E5%90%9B%E7%9A%84%E5%85%85%E7%94%B5%E5%AE%9D%E5%B1%8F%E5%B9%95.png" alt="稚晖君的充电宝屏幕"></p><p>下个大周继续肝项目！</p>]]></content>
    
    
    <categories>
      
      <category>T-Ti项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>个人项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大数据推荐趣评</title>
    <link href="/2021/02/25/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9C%9F%E4%B8%8D%E9%94%99%EF%BC%88%E8%B6%A3%E8%AF%84%EF%BC%89/"/>
    <url>/2021/02/25/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9C%9F%E4%B8%8D%E9%94%99%EF%BC%88%E8%B6%A3%E8%AF%84%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>博主最近闲得无聊，不知不觉打开淘宝竟然发现了一个有趣的东西——淘宝的推荐系统。</p><p>先来说一下它是怎么工作的：通过算法分析用户喜欢什么，再把那些分析出来用户会喜欢的东西推荐给用户。</p><p>如今是互联网时代，大家都知道在网上有各种奇葩的东西，但却很难找到。</p><p>来看推荐系统选出的第一位选手：<img src="/images/qp/%E5%8F%AF%E7%BC%96%E7%A8%8B%E7%82%B8%E5%BC%B9.png" alt="可编程炸弹"></p><p><em>趣评：</em></p><p>（一号网友）没人会带着一块开发板上街，不知道的以为是<img src="/images/qp/%E7%82%B8%E5%BC%B9.png" alt="炸弹"></p><p>（二号网友）绑个开发板在手上？<img src="/images/qp/%E6%BB%A1%E9%9D%A2%E7%96%91%E6%83%91.png" alt="满面疑惑"></p><p>（三号网友）我以为是彩六里的爆破<img src="/images/qp/%E6%B5%81%E6%B1%97.png" alt="流汗"></p><p>第二位选手：<img src="/images/qp/%E8%80%81%E5%B9%B4%E6%9C%BA.png" alt="老年机"></p><p><em>趣评裁判：</em>小编你真的确定现在的学生会用这个东西？<img src="/images/qp/%E6%8B%92%E7%BB%9D%EF%BC%81.png" alt="拒绝！"></p><p>第三位选手：<img src="/images/qp/%E5%8D%95%E7%9C%BC%E9%95%9C.png" alt="单眼镜"></p><p><em>趣评裁判：</em>考试作弊就别想了，这不是掩耳盗铃的事吗？<img src="/images/qp/%E5%90%97.png" alt="吗">？（生怕别人不知道呢<img src="/images/qp/%E4%BA%8C%E5%93%88%E7%96%91%E6%83%91.png" alt="二哈疑惑"></p><p>）</p><p>第四位选手：<img src="/images/qp/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99.png" alt="学习资料"></p><p><em>趣评裁判：</em><img src="/images/qp/%E8%B0%A2%E8%B0%A2.png" alt="谢谢">学习又有伴咯！</p><p>第五位选手：<img src="/images/qp/%E6%8B%86IC.png" alt="拆IC"></p><p><em>趣评裁判：</em>好东西，之前还不知道呢，收下了<img src="/images/qp/%E5%BC%80%E5%BF%83.png" alt="开心"></p><p>第六位选手：<img src="/images/qp/DIY%E6%9C%BA%E7%AE%B1%E5%89%AF%E5%B1%8F.png" alt="DIY机箱副屏"></p><p><em>趣味裁判：</em><img src="/images/qp/%E7%89%9B.png" alt="牛"></p><p>第七位选手：<img src="/images/qp/%E5%BC%B1.png" alt="弱"></p><p><em>趣评裁判：</em><img src="/images/qp/%EF%BC%9F.png" alt="？">你在监视我？</p><p><img src="/images/qp/Hi.gif" alt="Hi"></p><p>好了，以上就是本次趣评的全部内容了。下次继续——<em>趣评裁判</em>（以上内容纯属娱乐）</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么显卡暴涨了？</title>
    <link href="/2021/02/24/2021-02-24-%E6%98%BE%E5%8D%A1%E6%9A%B4%E6%B6%A8%EF%BC%8C%E8%BF%99%E6%98%AF%E4%B8%BA%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <url>/2021/02/24/2021-02-24-%E6%98%BE%E5%8D%A1%E6%9A%B4%E6%B6%A8%EF%BC%8C%E8%BF%99%E6%98%AF%E4%B8%BA%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>因为比特币价格的暴涨，所以矿工在市面上大量收购一些运算比特币挖矿算法较好的显卡，并通过显卡的计算来获得比特币，俗称挖矿。根据经济学规律，矿工大量收购显卡的行为导致市场上的显卡供不应求，所以显卡的价格持续上涨。</p><p>举个实例：<img src="/images/xk/%E4%BA%A4%E6%98%93%E6%88%AA%E5%9B%BE.png" alt="交易截图"></p><p>这是博主一年前花了60元收的一张坏显卡。一年后的现在，它的价格是这样的：<img src="/images/xk/%E5%95%86%E5%AE%B6%E6%8A%A5%E4%BB%B7.png" alt="商家报价"></p><p>显卡：<img src="/images/xk/%E6%98%BE%E5%8D%A1%E6%AD%A3%E9%9D%A2.png" alt="显卡正面"></p><p><img src="/images/xk/%E6%98%BE%E5%8D%A1%E8%83%8C%E9%9D%A2.png" alt="显卡背面"></p><hr><p>—【文章封面图来自中关村在线，如有侵权请联系作者删除】</p>]]></content>
    
    
    <categories>
      
      <category>计算机硬件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机硬件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TCJ的寒假搞机flag——iPhone X</title>
    <link href="/2021/02/24/TCJ%E7%9A%84%E5%AF%92%E5%81%87%E6%90%9E%E6%9C%BA%E6%95%85%E4%BA%8B%E2%80%94%E2%80%94iPhone%20X/"/>
    <url>/2021/02/24/TCJ%E7%9A%84%E5%AF%92%E5%81%87%E6%90%9E%E6%9C%BA%E6%95%85%E4%BA%8B%E2%80%94%E2%80%94iPhone%20X/</url>
    
    <content type="html"><![CDATA[<p>寒假已至，博主在家闲得无聊，恰好手上的电子设备到了退休的年龄。于是我就立了一个flag—–搞台 iPhone X，又可以换个角度搞机啦。</p><p>打开闲鱼，有不少卖 iPhone X 主板的，接着往下看<img src="/images/Tx/%E5%9D%8Fx.png" alt="坏x"></p><p>oh，这不刚好吗，省得去东拼西凑了，就它了。</p><p>嗯~还差一个屏幕，<img src="/images/Tx/%E5%B1%8F%E5%B9%95.png" alt="屏幕"></p><p>初二，手机到了，拆开包装，还挺好看的。</p><p><img src="/images/Tx/%E8%BA%BA%E6%9C%BA.png" alt="躺机">屏幕还得等年后。</p><p>静等屏幕中。。。穿越一下，好了。接下来就是去网上找换屏幕的视频了，大致流程是这样的：</p><p>拆开屏幕及其支架（博主第一次拆发生了一点小意外——屏幕和支架脱离了）→掀开排线盖子→断开电池排线（此处一定要注意，不然容易冒火花，甚至<img src="/images/Tx/Boom!.png" alt="Boom!">)</p><p>→断开屏幕的显示排线和触摸排线→把前置摄像头搬到新屏上去→再扣上显示排线和触摸排线→扣上电池排线→拧上排线盖子→测试一下<img src="/images/Tx/ohhhhhh.png" alt="ohhhhhh"></p><p>→最后再合上屏幕就好了。</p><p>不过这里有一个激活锁，必须得绕过它才能用。</p><p>来到Mac OS 系统下，下载此软件（越狱用）<img src="/images/Tx/%E8%B6%8A%E7%8B%B1%E8%BD%AF%E4%BB%B6.png" alt="越狱软件"></p><p>越狱完成后，我们就可以绕过激活锁了。</p><p>来到win10，打开绕激活软件<img src="/images/Tx/%E7%BB%95%E6%BF%80%E6%B4%BB%E8%BD%AF%E4%BB%B6.png" alt="绕激活软件"></p><p>成功后就可以使用了，<img src="/images/Tx/%E8%B4%A7%E5%B8%81%E6%88%90%E6%9C%AC660.png" alt="货币成本660"></p><p><img src="/images/Tx/%E4%B8%80%E8%B7%AF%E5%90%91%E5%8C%97%E6%8C%BA%E5%A5%BD%E5%90%AC%E7%9A%84.png" alt="一路向北挺好听的"></p><p>寒假第一个flag完成！<img src="/images/Tx/%E7%88%B1%E6%80%9D%E8%AE%BE%E5%A4%87%E8%AF%A6%E6%83%85.png" alt="爱思设备详情"></p>]]></content>
    
    
    <categories>
      
      <category>计算机硬件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机硬件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>古人荀子学习观——《劝学》</title>
    <link href="/2021/02/07/%E5%8F%A4%E4%BA%BA%E8%8D%80%E5%AD%90%E5%AD%A6%E4%B9%A0%E8%A7%82%E2%80%94%E2%80%94%E2%80%94%E3%80%8A%E5%8A%9D%E5%AD%A6%E3%80%8B/"/>
    <url>/2021/02/07/%E5%8F%A4%E4%BA%BA%E8%8D%80%E5%AD%90%E5%AD%A6%E4%B9%A0%E8%A7%82%E2%80%94%E2%80%94%E2%80%94%E3%80%8A%E5%8A%9D%E5%AD%A6%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<p>前言：学习自古以来就是人类生存中无法避免的一件事。主张“性恶论”的荀子尤其强调后天学习的重要。由此，我们来探讨一下《劝学》。</p><p>①选自《荀子集解》卷一（中华书局1988年版）。有删节。荀子（约前313—前238），名况，字卿，赵国人，战国末期思想家。</p><h5 id="原文："><a href="#原文：" class="headerlink" title="原文："></a>原文：</h5><p>①君子曰：学不可以已。</p><p>②青，取之于蓝，而青于蓝；冰，水为之，而寒于水。木直中绳，輮以为轮，其曲中规。虽有槁暴，不复挺者，輮使之然也。故木受绳则直，金就砺则利，君子博学而日参省乎己，则知明而行无过矣。</p><p>③吾尝终日而思矣，不如须臾之所学也；吾尝跂而望矣，不如登高之博见也。登高而招，臂非加长也，而见者远；顺风而呼，声非加疾也，而闻者彰。假舆马者，非利足也，而致千里；假舟楫者，非能水也，而绝江河。君子生非异也，善假于物也。</p><p>④积土成山，风雨兴焉；积水成渊，蛟龙生焉；积善成德，而神明自得，圣心备焉。故不积跬步，无以至千里；不积小流，无以成江海。骐骥一跃，不能十步；驽马十驾，功在不舍。锲而舍之，朽木不折；锲而不舍，金石可镂。蚓无爪牙之利，筋骨之强，上食埃土，下饮黄泉，用心一也。蟹六跪而二螯，非蛇鳝之穴无可寄托者，用心躁也。</p><h5 id="译文："><a href="#译文：" class="headerlink" title="译文："></a>译文：</h5><p>①有学问和修养的人说：学习不可以停止。</p><p>②靛青从蓝草中取得，却比蓝草颜色深；冰是水形成的，却比水更寒冷。木头直得合乎木匠用来取直的墨线，用火烘烤木材使它弯曲成车轮，它的弯曲程度合乎圆规。即使又晒干了，不再挺直的原因是火让它这样的。所以木头经过墨线比量就直了，金属制的刀斧拿到磨刀石上去磨就锋利了，有学问和修养的人广泛的学习并且每天对自己检查、省察，就智慧明达而且行为没有过错了。</p><p>③我曾经整天的思考，不如片刻所学到的东西；我曾经踮起脚后跟眺望，不如登上高处后广博的看。登上高处后招手，手臂没有加长，但是人在远处都看得见；顺着风呼喊，声音没有变得宏大，而别人听得更清楚了。借车子的人，不一定善于奔走，却能到达千里之外；借船的人，不一定善于游水，却能横渡江河。君子的天性同一般人没有差别，只是善于借助各种客观条件。</p><p>④泥土累积成山，风和雨在这里兴起；水累积成深渊，蛟龙在这里生存；善良累积成品德，非凡的智慧自然就有了，圣人的心怀也具备了。所以不一步步的累积，就无从到达千里；不将小溪流累积起来，就无法形成江河和大海。骏马跳一次，不能达到十步；劣马拉车走十天的路程，它的功效来源走个不停。雕刻如果半途而废的话，连朽木都不会折；如果不停的雕刻，金石都能雕刻。蚯蚓没有锋利的爪牙和强健的筋骨，却能向上吃到泥土，向下喝到地下的泉水，这是因为它用心专一。蟹有六条腿和两个蟹钳，如果没有蛇和鳝的洞穴就无法藏身，这是因为用心急躁。</p><hr><h4 id="题解：劝学是鼓励学习的意思。那荀子为何如此强调后天学习的重要性？"><a href="#题解：劝学是鼓励学习的意思。那荀子为何如此强调后天学习的重要性？" class="headerlink" title="题解：劝学是鼓励学习的意思。那荀子为何如此强调后天学习的重要性？"></a>题解：劝学是鼓励学习的意思。那荀子为何如此强调后天学习的重要性？</h4><p>荀子是战国时期的儒学思想家。他在有生之年提出了“人性恶”的观点。他认为人性本恶，但可以通过后天教化变恶为善。</p><h4 id="结合今天的社会生活，说说《劝学》中哪些仍值得借鉴，哪些需要更新并赋予其新的内涵？"><a href="#结合今天的社会生活，说说《劝学》中哪些仍值得借鉴，哪些需要更新并赋予其新的内涵？" class="headerlink" title="结合今天的社会生活，说说《劝学》中哪些仍值得借鉴，哪些需要更新并赋予其新的内涵？"></a>结合今天的社会生活，说说《劝学》中哪些仍值得借鉴，哪些需要更新并赋予其新的内涵？</h4><p>作为互联网时代的人们，我们可以通过网络和书籍来学习。</p><p>学习要有恒心。</p><p>我们要把道德作为行为的准则。</p>]]></content>
    
    
    <categories>
      
      <category>文学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux Ubuntu MATE介绍</title>
    <link href="/2021/02/03/Linux%20Ubuntu%20MATE%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%A4%BE%E5%8C%BA/"/>
    <url>/2021/02/03/Linux%20Ubuntu%20MATE%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%A4%BE%E5%8C%BA/</url>
    
    <content type="html"><![CDATA[<h5 id="简述：Ubuntu-MATE是一个操作系统–运行在电脑上的核心软件，类似于-微软的Windows，苹果的OS-X以及谷歌的Chrome-OS。Ubuntu-MATE是GNU-Linux的桌面发行版（分支），一种可靠，安全，功能强大且现代化的计算机操作系统，可与所有其他受欢迎的计算机操作系统相媲美。"><a href="#简述：Ubuntu-MATE是一个操作系统–运行在电脑上的核心软件，类似于-微软的Windows，苹果的OS-X以及谷歌的Chrome-OS。Ubuntu-MATE是GNU-Linux的桌面发行版（分支），一种可靠，安全，功能强大且现代化的计算机操作系统，可与所有其他受欢迎的计算机操作系统相媲美。" class="headerlink" title="简述：Ubuntu MATE是一个操作系统–运行在电脑上的核心软件，类似于 微软的Windows，苹果的OS X以及谷歌的Chrome OS。Ubuntu MATE是GNU/Linux的桌面发行版（分支），一种可靠，安全，功能强大且现代化的计算机操作系统，可与所有其他受欢迎的计算机操作系统相媲美。"></a>简述：Ubuntu MATE是一个操作系统–运行在电脑上的核心软件，类似于 <u>微软的Windows</u>，<u>苹果的OS X</u>以及<u>谷歌的Chrome OS</u>。Ubuntu MATE是GNU/Linux的桌面发行版（分支），一种可靠，安全，功能强大且现代化的计算机操作系统，可与所有其他受欢迎的计算机操作系统相媲美。</h5><p>与其他操作系统不同，Linux用于</p><p>··· 世界上大部分高速且强大的超级电脑</p><p>···大部分节点服务器上</p><p>···以及许多公司的高稳定性高可靠性商用服务器上。</p><h5 id="Ubuntu-MATE是一个稳定，易于使用的操作系统，具有可自行配置的桌面环境。它非常适合那些希望充分利用电脑并喜欢传统桌面的人。它拥有较低的硬件要求，适用于台式机和笔记本电脑，单片机（如树莓派）和较旧的硬件。"><a href="#Ubuntu-MATE是一个稳定，易于使用的操作系统，具有可自行配置的桌面环境。它非常适合那些希望充分利用电脑并喜欢传统桌面的人。它拥有较低的硬件要求，适用于台式机和笔记本电脑，单片机（如树莓派）和较旧的硬件。" class="headerlink" title="Ubuntu MATE是一个稳定，易于使用的操作系统，具有可自行配置的桌面环境。它非常适合那些希望充分利用电脑并喜欢传统桌面的人。它拥有较低的硬件要求，适用于台式机和笔记本电脑，单片机（如树莓派）和较旧的硬件。"></a>Ubuntu MATE是一个稳定，易于使用的操作系统，具有可自行配置的桌面环境。它非常适合那些希望充分利用电脑并喜欢传统桌面的人。它拥有较低的硬件要求，适用于台式机和笔记本电脑，单片机（如树莓派）和较旧的硬件。</h5><h5 id="本操作系统比目前大多数家用计算机预装的操作系统更安全，支持更好。"><a href="#本操作系统比目前大多数家用计算机预装的操作系统更安全，支持更好。" class="headerlink" title="本操作系统比目前大多数家用计算机预装的操作系统更安全，支持更好。"></a>本操作系统比目前大多数家用计算机预装的操作系统更安全，支持更好。</h5><h5 id="Ubuntu-MATE-提供给你使用完整的，功能齐全，预设好的（可能并不完全）桌面环境-。如果你有不满意的地方，可以根据自由定制它的外观及运行方式。"><a href="#Ubuntu-MATE-提供给你使用完整的，功能齐全，预设好的（可能并不完全）桌面环境-。如果你有不满意的地方，可以根据自由定制它的外观及运行方式。" class="headerlink" title="Ubuntu MATE 提供给你使用完整的，功能齐全，预设好的（可能并不完全）桌面环境 。如果你有不满意的地方，可以根据自由定制它的外观及运行方式。"></a>Ubuntu MATE 提供给你使用完整的，功能齐全，预设好的（可能并不完全）桌面环境 。如果你有不满意的地方，可以根据自由定制它的外观及运行方式。</h5><hr><h5 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h5><p>Ubuntu MATE 有许多原则和目标：</p><p>···为所有人提供服务。</p><p>···提高 Ubuntu 和 MATE 桌面用户的采用率。</p><p>···作为运行 Ubuntu 复合桌面时性能不够强大的计算机的一个替代选项。</p><p>···作为首选方案为 Ubuntu 的远程工作站，如 LTSP 和 X2Go 的另一选项。</p><p>···为喜欢传统 Gnome 2 桌面隐喻的用户重新造一个避风港。</p><p>···使用 Ubuntu 的主题，壁纸以在 Ubuntu MATE 上获得相似体验。</p><p>···如果可以的话，请给 Ubuntu 或者 Debian 项目做点贡献以使它们也获得一些益处。</p><p>···软件专注于功能和稳定性，而不是幻想或极度简单的功能。</p><hr><h5 id="Ubuntu-MATE-是什么？"><a href="#Ubuntu-MATE-是什么？" class="headerlink" title="Ubuntu MATE 是什么？"></a>Ubuntu MATE 是什么？</h5><h5 id="Ubuntu：Ubuntu是部署最多的基于Linux的桌面操作系统之一。Linux是Ubuntu的核心，Linux-使之可以创建安全，强大和多功能的操作系统（例如Ubuntu和Android）。Android现在在全球有巨量的用户，而Android是基于-Linux-的。Ubuntu-有许多不同的-特色版，每一个都拥有自己的桌面环境。Ubuntu-MATE-基于-Ubuntu-并添加了-MATE-桌面。"><a href="#Ubuntu：Ubuntu是部署最多的基于Linux的桌面操作系统之一。Linux是Ubuntu的核心，Linux-使之可以创建安全，强大和多功能的操作系统（例如Ubuntu和Android）。Android现在在全球有巨量的用户，而Android是基于-Linux-的。Ubuntu-有许多不同的-特色版，每一个都拥有自己的桌面环境。Ubuntu-MATE-基于-Ubuntu-并添加了-MATE-桌面。" class="headerlink" title="Ubuntu：Ubuntu是部署最多的基于Linux的桌面操作系统之一。Linux是Ubuntu的核心，Linux 使之可以创建安全，强大和多功能的操作系统（例如Ubuntu和Android）。Android现在在全球有巨量的用户，而Android是基于  Linux 的。Ubuntu 有许多不同的 特色版，每一个都拥有自己的桌面环境。Ubuntu MATE 基于 Ubuntu 并添加了 MATE 桌面。"></a>Ubuntu：Ubuntu是部署最多的基于Linux的桌面操作系统之一。<a href="https://en.wikipedia.org/wiki/Linux">Linux</a>是Ubuntu的核心，Linux 使之可以创建安全，强大和多功能的操作系统（例如Ubuntu和Android）。Android现在在全球有巨量的用户，而Android是基于  Linux 的。Ubuntu 有许多不同的 特色版，每一个都拥有自己的桌面环境。Ubuntu MATE 基于 Ubuntu 并添加了 MATE 桌面。</h5><h5 id="MATE-桌面：维基百科称桌面环境是：桌面环境由运行在计算机操作系统上的一组程序组成，它们共享一个公共图形用户界面（GUI）。桌面GUI帮助用户轻松访问和编辑文件。MATE桌面提供一个桌面环境应有的基本组件，例如：文件管理器（Caja）、计算器（MATE-Calculator）、归档管理器（Engrampa）、图片浏览器（Eye-of-MATE）、文档浏览器（Atril）、MATE系统监视器、MATE终端。这些内容都可以进行高度的自定义通过控制中心。"><a href="#MATE-桌面：维基百科称桌面环境是：桌面环境由运行在计算机操作系统上的一组程序组成，它们共享一个公共图形用户界面（GUI）。桌面GUI帮助用户轻松访问和编辑文件。MATE桌面提供一个桌面环境应有的基本组件，例如：文件管理器（Caja）、计算器（MATE-Calculator）、归档管理器（Engrampa）、图片浏览器（Eye-of-MATE）、文档浏览器（Atril）、MATE系统监视器、MATE终端。这些内容都可以进行高度的自定义通过控制中心。" class="headerlink" title="MATE 桌面：维基百科称桌面环境是：桌面环境由运行在计算机操作系统上的一组程序组成，它们共享一个公共图形用户界面（GUI）。桌面GUI帮助用户轻松访问和编辑文件。MATE桌面提供一个桌面环境应有的基本组件，例如：文件管理器（Caja）、计算器（MATE Calculator）、归档管理器（Engrampa）、图片浏览器（Eye of MATE）、文档浏览器（Atril）、MATE系统监视器、MATE终端。这些内容都可以进行高度的自定义通过控制中心。"></a>MATE 桌面：维基百科称<u>桌面环境</u>是：桌面环境由运行在计算机操作系统上的一组程序组成，它们共享一个公共图形用户界面（GUI）。桌面GUI帮助用户轻松访问和编辑文件。MATE桌面提供一个桌面环境应有的基本组件，例如：文件管理器（Caja）、计算器（MATE Calculator）、归档管理器（Engrampa）、图片浏览器（Eye of MATE）、文档浏览器（Atril）、MATE系统监视器、MATE终端。这些内容都可以进行高度的自定义通过控制中心。</h5><p>MATE 桌面使用传统的方案提供了一个直观和有吸引力的桌面环境，这意味着你或许曾经使用过<u> Windows</u> 或者 <u>OS X</u>，你会非常容易上手。</p><p>MATE 桌面具有较久的历史，是 GNOME 2 桌面的派生，GNOME 2 桌面是十多年来许多 Linux 和 Unix 操作系统的默认桌面环境。这意味着MATE桌面已经通过测试并且非常可靠。</p><h5 id="开源：Linux，-Ubuntu-和-MATE-桌面共同之处在于它们是开源的。任何人都可以自由使用，-更改和共享该软件（以修改或未修改的形式）。简而言之，Ubuntu-MATE-完全免费，它完全符合这个词的含义。"><a href="#开源：Linux，-Ubuntu-和-MATE-桌面共同之处在于它们是开源的。任何人都可以自由使用，-更改和共享该软件（以修改或未修改的形式）。简而言之，Ubuntu-MATE-完全免费，它完全符合这个词的含义。" class="headerlink" title="开源：Linux， Ubuntu 和 MATE 桌面共同之处在于它们是开源的。任何人都可以自由使用， 更改和共享该软件（以修改或未修改的形式）。简而言之，Ubuntu MATE 完全免费，它完全符合这个词的含义。"></a>开源：Linux， Ubuntu 和 MATE 桌面共同之处在于它们是开源的。任何人都可以自由使用， 更改和共享该软件（以修改或未修改的形式）。简而言之，Ubuntu MATE 完全免费，它完全符合这个词的含义。</h5><p>虽然你会发现Linux的一些发行版是收费的，但绝大多数都是免费提供的，如Ubuntu MATE。该发行许可方式允许任何人免费赠送，并且不附带任何条款。例如，许可证授予社区的任何成员自由使用Linux用于任何目的，分发，修改，重新分配甚至销售操作系统。如果您进行了修改并重新发布了Linux，则许可证要求您提交修改，以便将其纳入未来版本。不能排除这种情况，如果你做得更好，那么你所做的改动可能会包含在下一个版本的 Ubuntu MATE中。</p><p>许多 Linux 用户使用本操作系统来运行公司业务，或者将其加入他们的产品之中。其中许多公司为Linux提供用于它们自己软件业务的补丁和新功能。这些改进将会被反馈到 <u>Linux 社区</u>，因此软件也得到了改进。这就是我们不需要向用户收取费用即可不断改进和发展的原因。</p><p>与 Windows 和OS X 不同，Linux 并不是由单独一家公司创建和支持的。它受英特尔， Redhat， Linaro ，三星 ，IBM ，SUSE ，德州仪器，谷歌，Canonical ，Oracle，AMD 和 微软 的支持。在过去的15年中，有4,000多名开发人员为Linux做出了自己的贡献。</p><p>无论您是 Ubuntu MATE 的个人用户，Ubuntu MATE 软件或者应用程序开发人员，还是使用本操作系统的组织的员工，您都是 Linux 和开源社区的成员，并受益于开发人员的Ubuntu MATE 及其相关项目：Linux，MATE 和 Ubuntu。社区成员几乎可以在任何硬件上运行Linux，从最漂亮的 Macbook 到最便宜的上网本，从最新的Chromebook 到一些为 Windows 设计的旧机器，从最强大的网络服务器到最小的智能恒温器。</p><h4 id="附：https-ubuntu-mate-community-（Linux-Ubuntu-MATE社区网址）"><a href="#附：https-ubuntu-mate-community-（Linux-Ubuntu-MATE社区网址）" class="headerlink" title="附：https://ubuntu-mate.community/  （Linux Ubuntu MATE社区网址）"></a>附：<a href="https://ubuntu-mate.community/">https://ubuntu-mate.community/</a>  （Linux Ubuntu MATE社区网址）</h4>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用Hexo&amp;Gitee快速搭建个人博客</title>
    <link href="/2020/12/05/%E5%85%B3%E4%BA%8E%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BAHexo+gitee/"/>
    <url>/2020/12/05/%E5%85%B3%E4%BA%8E%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BAHexo+gitee/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/Hexo+gitee/%E5%85%A8%E6%96%87%E6%80%9D%E7%BB%B4%E8%84%91%E5%9B%BE.png" alt="全文思维脑图"></p><hr><p>Hexo是当前市场上较火的一个静态博客框架，能够快速搭建个人博客。让我们开始吧！</p><p>—系统环境：mac os</p><hr><h3 id="必要准备"><a href="#必要准备" class="headerlink" title="必要准备"></a><strong>必要准备</strong></h3><p>1.安装Node.js(下载地址：<a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a>)</p><p>点击下载链接后进入如下页面，根据自己情况下载即可。下载好后正常安装</p><p><img src="/images/Hexo+gitee/Node.js%E4%B8%8B%E8%BD%BD%E7%95%8C%E9%9D%A2.png" alt="Node.js下载界面"></p><p>现在来到终端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">确认Node安装</span><br>node -v<br><span class="hljs-meta">#</span><span class="bash">若正常安装，则返回如下(版本号可能不同，下同)</span><br>v14.15.1<br>npm -v<br>6.14.8<br><span class="hljs-meta">#</span><span class="bash">ok，现在安装淘宝镜像加速器</span><br>npm install -g cnpm --registry=https://registry.npm.taobao.org<br>cnpm -v<br>cnpm@6.1.1 (/usr/local/lib/node_modules/cnpm/lib/parse_argv.js)<br>npm@6.14.9 (/usr/local/lib/node_modules/cnpm/node_modules/npm/lib/npm.js)<br>node@14.15.1 (/usr/local/bin/node)<br>npminstall@3.28.0 (/usr/local/lib/node_modules/cnpm/node_modules/npminstall/lib/index.js)<br>prefix=/usr/local <br>darwin x64 18.5.0 <br>registry=https://r.npm.taobao.org<br></code></pre></td></tr></table></figure><p>2.安装Hexo(官网:<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a>)</p><p>在终端输入npm install hexo-cli -g</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-cli -g<br><span class="hljs-meta">#</span><span class="bash">确认安装</span><br>hexo -v<br>INFO  Validating config<br>hexo: 5.2.0<br>hexo-cli: 4.2.0<br>os: Darwin 18.5.0 darwin x64<br>node: 14.15.1<br>v8: 8.4.371.19-node.17<br>uv: 1.40.0<br>zlib: 1.2.11<br>brotli: 1.0.9<br>ares: 1.16.1<br>modules: 83<br>nghttp2: 1.41.0<br>napi: 7<br>llhttp: 2.1.3<br>openssl: 1.1.1g<br>cldr: 37.0<br>icu: 67.1<br>tz:2020a<br>unicode: 13.0<br></code></pre></td></tr></table></figure><p>OK，到现在为止你已经成功安装了Node.js和Hexo了</p><hr><h3 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h3><p>1.新建文件夹blog(<strong>记住它在你系统中的路径</strong>)</p><p>来到终端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">使用<span class="hljs-built_in">cd</span>命令来到blog目录下</span><br><span class="hljs-meta">#</span><span class="bash">确认操作</span><br>pwd<br>/Users/tcj/blog<br><span class="hljs-meta">#</span><span class="bash">在blog目录下初始化博客</span><br>sudo hexo init<br><span class="hljs-meta">#</span><span class="bash">确认初始化成功</span><br>ls<br> db.jsonpublic<br>.deploy_gitnode_modulesscaffolds<br>.gitignorepackage-lock.jsonsource<br>_config.ymlpackage.jsonthemes<br><span class="hljs-meta">#</span><span class="bash">启动博客</span><br>hexo s<br>INFO  Validating config<br>INFO  Start processing<br>INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.<br></code></pre></td></tr></table></figure><p>2.打开浏览器，输入localhost:4000</p><p><img src="/images/Hexo+gitee/%E6%9C%AC%E5%9C%B0%E9%A2%84%E8%A7%88%E7%9A%84%E5%8D%9A%E5%AE%A2.png" alt="本地预览的博客"></p><p>上面是Hexo默认页面和自动创建的Hello World文章，这说明你已经在本地部署成功了！</p><hr><h3 id="远程部署"><a href="#远程部署" class="headerlink" title="远程部署"></a>远程部署</h3><p>这是最后一步，完成后就可以通过网络访问你的博客了！</p><p>1.准备一个码云账号(官网:<a href="https://gitee.com/">https://gitee.com/</a>)</p><p>2.新建一个仓库<img src="/images/Hexo+gitee/gitee%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93%E9%A1%B5%E9%9D%A2.png" alt="gitee新建仓库页面"></p><p>图中箭头所指一定要一致</p><p>3，来到终端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">在之前目录下安装git</span><br>cnpm install --save hexo-deployer-git<br><span class="hljs-meta">#</span><span class="bash">修改当前目录下的配置文件：_config.yml</span><br>**修改如下<br> deploy:<br>  type: git<br>  repo: 仓库URL地址<br>  branch: master<br>例如：deploy:<br>  type: git<br>  repo: https://gitee.com/tcj155038/tcj155038.git<br>  branch: master<br></code></pre></td></tr></table></figure><p>修改完成后保存退出 <strong>(冒号后有空格)</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">清除缓存</span><br>hexo clean<br><span class="hljs-meta">#</span><span class="bash">生成静态页面</span><br>hexo g<br><span class="hljs-meta">#</span><span class="bash">将项目部署到码云仓库</span><br>hexo d<br></code></pre></td></tr></table></figure><p><img src="/images/Hexo+gitee/%E4%BB%93%E5%BA%93%E9%87%8C%E7%9A%84%E6%96%87%E4%BB%B6.png" alt="仓库里的文件"></p><p>这时仓库中已经有文件了！</p><p>接着开启Gitee Pages 静态网页托管服务</p><p><img src="/images/Hexo+gitee/%E6%9C%8D%E5%8A%A1.png" alt="服务"></p><p>开启后会出现一个网址，这就是你的博客网址</p><p><img src="/images/Hexo+gitee/Pages.png" alt="Pages"></p><p>打开浏览器输入这个网址</p><p><img src="/images/Hexo+gitee/%E7%BD%91%E4%B8%8A%E7%9A%84%E5%8D%9A%E5%AE%A2.png" alt="网上的博客"></p><p>可以正常访问！</p>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>My First Blog</title>
    <link href="/2020/12/04/my-first-blog/"/>
    <url>/2020/12/04/my-first-blog/</url>
    
    <content type="html"><![CDATA[<p>tcj的第一篇博文。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
